<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="0e72e034-aaa7-4046-b7f9-bbfb7b65012a" name="更改" comment="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;&#10;import static ai.AlphaDuo.directionNum;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (directionNum == 0) {&#10;            return Direction.UP;&#10;        } else if (directionNum == 1) {&#10;            return Direction.DOWN;&#10;        } else if (directionNum == 2) {&#10;            return Direction.LEFT;&#10;        } else if (directionNum == 3) {&#10;            return Direction.RIGHT;&#10;        }&#10;        return null;&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(100);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                move(getDirection());&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/ai/AlphaDuo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ai/AlphaDuo.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="FxmlFile" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="dev" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 6
}</component>
  <component name="ProjectId" id="2gzDgn7Z1Dbff0iGRqjibYqVjRl" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;CJKProject__202405&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;应用程序.TestMainUIApplication.executor&quot;: &quot;Run&quot;
  }
}</component>
  <component name="RunManager">
    <configuration name="TestMainUIApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="TestMainUIApplication" />
      <module name="Reach2048" />
      <option name="VM_PARAMETERS" value="--module-path &quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="应用程序.TestMainUIApplication" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="项目级" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="默认任务">
      <changelist id="0e72e034-aaa7-4046-b7f9-bbfb7b65012a" name="更改" comment="Add move sound effect and apply custom font" />
      <created>1716691630324</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1716691630324</updated>
    </task>
    <task id="LOCAL-00001" summary="Add move sound effect a&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;                       &lt;project version=&quot;4&quot;&gt;&#10;                         &lt;component name=&quot;ExternalStorageConfigurationManager&quot; enabled=&quot;true&quot; /&gt;&#10;                         &lt;component name=&quot;MavenProjectsManager&quot;&gt;&#10;                           &lt;option name=&quot;originalFiles&quot;&gt;&#10;                             &lt;list&gt;&#10;                               &lt;option value=&quot;D:/IdeaProjects/Gaming2048/src/pom.xml&quot; /&gt;&#10;                               &lt;option value=&quot;D:/IdeaProjects/Gaming2048/pom.xml&quot; /&gt;&#10;                             &lt;/list&gt;&#10;                           &lt;/option&gt;&#10;                         &lt;/component&gt;&#10;                         &lt;component name=&quot;ProjectRootManager&quot; version=&quot;2&quot; languageLevel=&quot;JDK_17&quot; default=&quot;true&quot; project-jdk-name=&quot;21&quot; project-jdk-type=&quot;JavaSDK&quot;&gt;&#10;                           &lt;output url=&quot;file://D:/IdeaProjects/Gaming2048/out&quot; /&gt;&#10;                         &lt;/component&gt;&#10;                       &lt;/project&gt;nd apply custom font">
      <option name="closed" value="true" />
      <created>1716822634114</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1716822634114</updated>
    </task>
    <task id="LOCAL-00002" summary="package controller;&#10;&#10;public class RegistrationAndLogInUI {&#10;    // 注册与登录界面，当输入的用户名和密码不合法时，弹出窗口&#10;}">
      <option name="closed" value="true" />
      <created>1716822661645</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1716822661645</updated>
    </task>
    <task id="LOCAL-00003" summary="package model;&#10;public class User {&#10;    private String name;&#10;    private String password;&#10;    private String path;&#10;    private int bestScore;&#10;    private int totalGames;&#10;    private int totalWins;&#10;    private int totalLoses;&#10;    &#10;    public User (String name, String password, String path) {&#10;        this.name = name;&#10;        this.password = password;&#10;        this.path = path;&#10;        this.bestScore = 0;&#10;        this.totalGames = 0;&#10;        this.totalWins = 0;&#10;        this.totalLoses = 0;&#10;    }&#10;    &#10;    public String getName() {&#10;        return name;&#10;    }&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;    public String getPath() {&#10;        return path;&#10;    }&#10;    public int getBestScore() {&#10;        return bestScore;&#10;    }&#10;    public void setBestScore(int bestScore) {&#10;        this.bestScore = bestScore;&#10;    }&#10;    public int getTotalGames() {&#10;        return totalGames;&#10;    }&#10;    public void setTotalGames(int totalGames) {&#10;        this.totalGames = totalGames;&#10;    }&#10;    public int getTotalWins() {&#10;        return totalWins;&#10;    }&#10;    public void setTotalWins(int totalWins) {&#10;        this.totalWins = totalWins;&#10;    }&#10;    public int getTotalLoses() {&#10;        return totalLoses;&#10;    }&#10;    public void setTotalLoses(int totalLoses) {&#10;        this.totalLoses = totalLoses;&#10;    }&#10;    public void refreshInfo(int bestScore, int totalGames, int totalWins, int totalLoses) {&#10;        this.bestScore = bestScore;&#10;        this.totalGames = totalGames;&#10;        this.totalWins = totalWins;&#10;        this.totalLoses = totalLoses;&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716823036071</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1716823036071</updated>
    </task>
    <task id="LOCAL-00004" summary="package model;&#10;import util.Saver;&#10;import java.io.IOException;&#10;import java.util.*;&#10;public class UserManager {&#10;    private List&lt;User&gt; userList;&#10;    private static final String savePath = &quot;src/main/resources/general&quot;;&#10;    &#10;    public UserManager() {&#10;        try {&#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        userList = new ArrayList&lt;&gt;();&#10;    }&#10;    &#10;    public User register(String name, String password) throws IOException {&#10;        User user = null;&#10;        if (hasUser(name)) { // 检查用户是否已存在&#10;            throw new IllegalArgumentException(&quot;This user has existed!&quot;);&#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&#10;            throw new IllegalArgumentException(&quot;Invalid password!&quot; + &quot;Your password should contain at least 8 characters.&quot;);&#10;        } else if (name.equals(&quot;&quot;) || password.equals(&quot;&quot;)) { // 检查用户名和密码是否为空&#10;            throw new IllegalArgumentException(&quot;Username or password cannot be empty!&quot;);&#10;        } else {&#10;            user = new User(name, password, &quot;src/main/resources/savedata/&quot; + name);&#10;            Saver.makeDir(user.getPath());&#10;            userList.add(user);&#10;            // 保存用户信息&#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &quot;/userInfo.json&quot;);&#10;&#10;        }&#10;        return user;&#10;&#10;    }&#10;    public User login(String name, String password) {&#10;        if (userList.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            for (int i = 0; i &lt; userList.size(); i++) {&#10;                if (userList.get(i).getName().equals(name)) {&#10;                    if (!isPasswordCorrect(name, password)) {&#10;                        throw new IllegalArgumentException(&quot;Incorrect password!&quot;);&#10;                    } else {&#10;                        return userList.get(i);&#10;                    }&#10;                }&#10;            }&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        }&#10;    }&#10;    public void deleteUser(User user) throws IOException {&#10;        userList.remove(user);&#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&#10;&#10;    }&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length() &gt;= 8) {&#10;            isPasswordValid = true;&#10;        }&#10;        return isPasswordValid;&#10;    }&#10;    public boolean isPasswordCorrect(String name, String password) {&#10;        boolean isPasswordCorrect = false;&#10;        int i0 = 0;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                i0 = i;&#10;                break;&#10;            }&#10;        }&#10;        if (password.equals(userList.get(i0).getPassword())) {&#10;            isPasswordCorrect = true;&#10;        }&#10;        return isPasswordCorrect;&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716823985794</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1716823985794</updated>
    </task>
    <task id="LOCAL-00005" summary="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project version=&quot;4&quot;&gt;&#10;  &lt;component name=&quot;AutoImportSettings&quot;&gt;&#10;    &lt;option name=&quot;autoReloadType&quot; value=&quot;SELECTIVE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ChangeListManager&quot;&gt;&#10;    &lt;list default=&quot;true&quot; id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;package model;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;    &amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;    &amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password!&amp;quot; + &amp;quot;Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;&amp;#10;        }&amp;#10;        return user;&amp;#10;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            return null;&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!isPasswordCorrect(name, password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;    public boolean isPasswordCorrect(String name, String password) {&amp;#10;        boolean isPasswordCorrect = false;&amp;#10;        int i0 = 0;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                i0 = i;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        if (password.equals(userList.get(i0).getPassword())) {&amp;#10;            isPasswordCorrect = true;&amp;#10;        }&amp;#10;        return isPasswordCorrect;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; afterDir=&quot;false&quot; /&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AIThread.java&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AIThread.java&quot; afterDir=&quot;false&quot; /&gt;&#10;    &lt;/list&gt;&#10;    &lt;option name=&quot;SHOW_DIALOG&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_CONFLICTS&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;LAST_RESOLUTION&quot; value=&quot;IGNORE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;FileTemplateManagerImpl&quot;&gt;&#10;    &lt;option name=&quot;RECENT_TEMPLATES&quot;&gt;&#10;      &lt;list&gt;&#10;        &lt;option value=&quot;FxmlFile&quot; /&gt;&#10;        &lt;option value=&quot;Class&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Git.Settings&quot;&gt;&#10;    &lt;option name=&quot;RECENT_BRANCH_BY_REPOSITORY&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;D:/IdeaProjects/Gaming2048&quot; value=&quot;dev&quot; /&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;    &lt;option name=&quot;RECENT_GIT_ROOT_PATH&quot; value=&quot;D:/IdeaProjects/Gaming2048&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;MarkdownSettingsMigration&quot;&gt;&#10;    &lt;option name=&quot;stateVersion&quot; value=&quot;1&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectColorInfo&quot;&gt;{&#10;  &amp;quot;associatedIndex&amp;quot;: 6&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;ProjectId&quot; id=&quot;2gzDgn7Z1Dbff0iGRqjibYqVjRl&quot; /&gt;&#10;  &lt;component name=&quot;ProjectLevelVcsManager&quot; settingsEditedManually=&quot;true&quot;&gt;&#10;    &lt;ConfirmationsSetting value=&quot;2&quot; id=&quot;Add&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectViewState&quot;&gt;&#10;    &lt;option name=&quot;hideEmptyMiddlePackages&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;showLibraryContents&quot; value=&quot;true&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;PropertiesComponent&quot;&gt;{&#10;  &amp;quot;keyToString&amp;quot;: {&#10;    &amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;git-widget-placeholder&amp;quot;: &amp;quot;CJKProject__202405&amp;quot;,&#10;    &amp;quot;kotlin-language-version-configured&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.selected.package.tslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;应用程序.TestMainUIApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;&#10;  }&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;RunManager&quot;&gt;&#10;    &lt;configuration name=&quot;TestMainUIApplication&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot; temporary=&quot;true&quot; nameIsGenerated=&quot;true&quot;&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;TestMainUIApplication&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;VM_PARAMETERS&quot; value=&quot;--module-path &amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;recent_temporary&gt;&#10;      &lt;list&gt;&#10;        &lt;item itemvalue=&quot;应用程序.TestMainUIApplication&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/recent_temporary&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;SpellCheckerSettings&quot; RuntimeDictionaries=&quot;0&quot; Folders=&quot;0&quot; CustomDictionaries=&quot;0&quot; DefaultDictionary=&quot;项目级&quot; UseSingleDictionary=&quot;true&quot; transferred=&quot;true&quot; /&gt;&#10;  &lt;component name=&quot;TaskManager&quot;&gt;&#10;    &lt;task active=&quot;true&quot; id=&quot;Default&quot; summary=&quot;默认任务&quot;&gt;&#10;      &lt;changelist id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;Add move sound effect and apply custom font&quot; /&gt;&#10;      &lt;created&gt;1716691630324&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;updated&gt;1716691630324&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00001&quot; summary=&quot;Add move sound effect a&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;                       &amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;                         &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;                         &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;                           &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;                             &amp;lt;list&amp;gt;&amp;#10;                               &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;                               &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;                             &amp;lt;/list&amp;gt;&amp;#10;                           &amp;lt;/option&amp;gt;&amp;#10;                         &amp;lt;/component&amp;gt;&amp;#10;                         &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;                           &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;                         &amp;lt;/component&amp;gt;&amp;#10;                       &amp;lt;/project&amp;gt;nd apply custom font&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716822634114&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00001&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00001&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716822634114&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00002&quot; summary=&quot;package controller;&amp;#10;&amp;#10;public class RegistrationAndLogInUI {&amp;#10;    // 注册与登录界面，当输入的用户名和密码不合法时，弹出窗口&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716822661645&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00002&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00002&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716822661645&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00003&quot; summary=&quot;package model;&amp;#10;public class User {&amp;#10;    private String name;&amp;#10;    private String password;&amp;#10;    private String path;&amp;#10;    private int bestScore;&amp;#10;    private int totalGames;&amp;#10;    private int totalWins;&amp;#10;    private int totalLoses;&amp;#10;    &amp;#10;    public User (String name, String password, String path) {&amp;#10;        this.name = name;&amp;#10;        this.password = password;&amp;#10;        this.path = path;&amp;#10;        this.bestScore = 0;&amp;#10;        this.totalGames = 0;&amp;#10;        this.totalWins = 0;&amp;#10;        this.totalLoses = 0;&amp;#10;    }&amp;#10;    &amp;#10;    public String getName() {&amp;#10;        return name;&amp;#10;    }&amp;#10;    public String getPassword() {&amp;#10;        return password;&amp;#10;    }&amp;#10;    public String getPath() {&amp;#10;        return path;&amp;#10;    }&amp;#10;    public int getBestScore() {&amp;#10;        return bestScore;&amp;#10;    }&amp;#10;    public void setBestScore(int bestScore) {&amp;#10;        this.bestScore = bestScore;&amp;#10;    }&amp;#10;    public int getTotalGames() {&amp;#10;        return totalGames;&amp;#10;    }&amp;#10;    public void setTotalGames(int totalGames) {&amp;#10;        this.totalGames = totalGames;&amp;#10;    }&amp;#10;    public int getTotalWins() {&amp;#10;        return totalWins;&amp;#10;    }&amp;#10;    public void setTotalWins(int totalWins) {&amp;#10;        this.totalWins = totalWins;&amp;#10;    }&amp;#10;    public int getTotalLoses() {&amp;#10;        return totalLoses;&amp;#10;    }&amp;#10;    public void setTotalLoses(int totalLoses) {&amp;#10;        this.totalLoses = totalLoses;&amp;#10;    }&amp;#10;    public void refreshInfo(int bestScore, int totalGames, int totalWins, int totalLoses) {&amp;#10;        this.bestScore = bestScore;&amp;#10;        this.totalGames = totalGames;&amp;#10;        this.totalWins = totalWins;&amp;#10;        this.totalLoses = totalLoses;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716823036071&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00003&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00003&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716823036071&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00004&quot; summary=&quot;package model;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;    &amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;    &amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password!&amp;quot; + &amp;quot;Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;&amp;#10;        }&amp;#10;        return user;&amp;#10;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            return null;&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!isPasswordCorrect(name, password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;    public boolean isPasswordCorrect(String name, String password) {&amp;#10;        boolean isPasswordCorrect = false;&amp;#10;        int i0 = 0;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                i0 = i;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        if (password.equals(userList.get(i0).getPassword())) {&amp;#10;            isPasswordCorrect = true;&amp;#10;        }&amp;#10;        return isPasswordCorrect;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716823985794&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00004&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00004&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716823985794&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;option name=&quot;localTasksCounter&quot; value=&quot;5&quot; /&gt;&#10;    &lt;servers /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;VcsManagerConfiguration&quot;&gt;&#10;    &lt;MESSAGE value=&quot;Add move sound effect and apply custom font&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Add move sound effect a&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;                       &amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;                         &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;                         &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;                           &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;                             &amp;lt;list&amp;gt;&amp;#10;                               &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;                               &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;                             &amp;lt;/list&amp;gt;&amp;#10;                           &amp;lt;/option&amp;gt;&amp;#10;                         &amp;lt;/component&amp;gt;&amp;#10;                         &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;                           &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;                         &amp;lt;/component&amp;gt;&amp;#10;                       &amp;lt;/project&amp;gt;nd apply custom font&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package controller;&amp;#10;&amp;#10;public class RegistrationAndLogInUI {&amp;#10;    // 注册与登录界面，当输入的用户名和密码不合法时，弹出窗口&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package model;&amp;#10;public class User {&amp;#10;    private String name;&amp;#10;    private String password;&amp;#10;    private String path;&amp;#10;    private int bestScore;&amp;#10;    private int totalGames;&amp;#10;    private int totalWins;&amp;#10;    private int totalLoses;&amp;#10;    &amp;#10;    public User (String name, String password, String path) {&amp;#10;        this.name = name;&amp;#10;        this.password = password;&amp;#10;        this.path = path;&amp;#10;        this.bestScore = 0;&amp;#10;        this.totalGames = 0;&amp;#10;        this.totalWins = 0;&amp;#10;        this.totalLoses = 0;&amp;#10;    }&amp;#10;    &amp;#10;    public String getName() {&amp;#10;        return name;&amp;#10;    }&amp;#10;    public String getPassword() {&amp;#10;        return password;&amp;#10;    }&amp;#10;    public String getPath() {&amp;#10;        return path;&amp;#10;    }&amp;#10;    public int getBestScore() {&amp;#10;        return bestScore;&amp;#10;    }&amp;#10;    public void setBestScore(int bestScore) {&amp;#10;        this.bestScore = bestScore;&amp;#10;    }&amp;#10;    public int getTotalGames() {&amp;#10;        return totalGames;&amp;#10;    }&amp;#10;    public void setTotalGames(int totalGames) {&amp;#10;        this.totalGames = totalGames;&amp;#10;    }&amp;#10;    public int getTotalWins() {&amp;#10;        return totalWins;&amp;#10;    }&amp;#10;    public void setTotalWins(int totalWins) {&amp;#10;        this.totalWins = totalWins;&amp;#10;    }&amp;#10;    public int getTotalLoses() {&amp;#10;        return totalLoses;&amp;#10;    }&amp;#10;    public void setTotalLoses(int totalLoses) {&amp;#10;        this.totalLoses = totalLoses;&amp;#10;    }&amp;#10;    public void refreshInfo(int bestScore, int totalGames, int totalWins, int totalLoses) {&amp;#10;        this.bestScore = bestScore;&amp;#10;        this.totalGames = totalGames;&amp;#10;        this.totalWins = totalWins;&amp;#10;        this.totalLoses = totalLoses;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package model;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;    &amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;    &amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password!&amp;quot; + &amp;quot;Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;&amp;#10;        }&amp;#10;        return user;&amp;#10;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            return null;&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!isPasswordCorrect(name, password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;    public boolean isPasswordCorrect(String name, String password) {&amp;#10;        boolean isPasswordCorrect = false;&amp;#10;        int i0 = 0;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                i0 = i;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        if (password.equals(userList.get(i0).getPassword())) {&amp;#10;            isPasswordCorrect = true;&amp;#10;        }&amp;#10;        return isPasswordCorrect;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;option name=&quot;LAST_COMMIT_MESSAGE&quot; value=&quot;package model;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;    &amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;    &amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password!&amp;quot; + &amp;quot;Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;&amp;#10;        }&amp;#10;        return user;&amp;#10;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            return null;&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!isPasswordCorrect(name, password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;    public boolean isPasswordCorrect(String name, String password) {&amp;#10;        boolean isPasswordCorrect = false;&amp;#10;        int i0 = 0;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                i0 = i;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        if (password.equals(userList.get(i0).getPassword())) {&amp;#10;            isPasswordCorrect = true;&amp;#10;        }&amp;#10;        return isPasswordCorrect;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;XDebuggerManager&quot;&gt;&#10;    &lt;breakpoint-manager&gt;&#10;      &lt;breakpoints&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&lt;/url&gt;&#10;          &lt;line&gt;34&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;42&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-method&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&lt;/url&gt;&#10;          &lt;line&gt;61&lt;/line&gt;&#10;          &lt;properties class=&quot;controller.MainUI&quot;&gt;&#10;            &lt;option name=&quot;EMULATED&quot; value=&quot;true&quot; /&gt;&#10;            &lt;option name=&quot;WATCH_EXIT&quot; value=&quot;false&quot; /&gt;&#10;          &lt;/properties&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;47&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-method&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Timer.java&lt;/url&gt;&#10;          &lt;line&gt;25&lt;/line&gt;&#10;          &lt;properties class=&quot;util.Timer&quot;&gt;&#10;            &lt;option name=&quot;EMULATED&quot; value=&quot;true&quot; /&gt;&#10;            &lt;option name=&quot;WATCH_EXIT&quot; value=&quot;false&quot; /&gt;&#10;          &lt;/properties&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;51&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;      &lt;/breakpoints&gt;&#10;    &lt;/breakpoint-manager&gt;&#10;    &lt;watches-manager&gt;&#10;      &lt;configuration name=&quot;Application&quot;&gt;&#10;        &lt;watch expression=&quot;Saver.makeDir(savePath)&quot; language=&quot;JAVA&quot; /&gt;&#10;      &lt;/configuration&gt;&#10;    &lt;/watches-manager&gt;&#10;  &lt;/component&gt;&#10;&lt;/project&gt;">
      <option name="closed" value="true" />
      <created>1716859554237</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1716859554237</updated>
    </task>
    <task id="LOCAL-00006" summary="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;    private double evaluationScore = 0;&#10;    private final double monoWeight = 0.4; // 单调性权重&#10;    private final double smoothWeight = 1.0; // 平滑性权重&#10;    private final double emptyWeight = 0.7; // 总空格数权重&#10;    private final double islandWeight = 0.1; // 孤立空格数权重&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected double evaluate(Direction d) {&#10;        int emptyTile = 0;&#10;        for (int i=0; i &lt; grid.getSize(); i++) {&#10;            for (int j=0; j &lt; grid.getSize(); j++) {&#10;                if (grid.getTileGrid()[i][j] == null) {&#10;                    emptyTile += 1;&#10;                }&#10;            }&#10;        }&#10;        evaluationScore += emptyTile * emptyWeight;&#10;        return evaluationScore;&#10;    }&#10;    protected Direction getDirection() {&#10;        int directionNum = 0;&#10;        if (evaluate(Direction.UP) &lt; evaluate(Direction.DOWN)) {&#10;            directionNum = 1;&#10;        }&#10;        if (evaluate(Direction.DOWN) &lt; evaluate(Direction.LEFT)) {&#10;            directionNum = 2;&#10;        }&#10;        if (evaluate(Direction.LEFT) &lt; evaluate(Direction.RIGHT)) {&#10;            directionNum = 3;&#10;        }&#10;        if (directionNum == 0) {&#10;            return Direction.UP;&#10;        } else if (directionNum == 1) {&#10;            return Direction.DOWN;&#10;        } else if (directionNum == 2) {&#10;            return Direction.LEFT;&#10;        } else if (directionNum == 3) {&#10;            return Direction.RIGHT;&#10;        }&#10;        return null;&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;&#10;        while (!endFlag) {&#10;&#10;            try {&#10;                sleep(100);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                move(getDirection());&#10;&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;&#10;        }&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716859571132</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1716859571132</updated>
    </task>
    <task id="LOCAL-00007" summary="package controller;&#10;&#10;&#10;import ai.AIThread;&#10;import javafx.animation.ParallelTransition;&#10;import javafx.application.Application;&#10;import javafx.application.Platform;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.effect.BoxBlur;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.KeyCode;&#10;import javafx.scene.layout.*;&#10;import javafx.scene.media.Media;&#10;import javafx.scene.media.MediaPlayer;&#10;import javafx.scene.text.Font;&#10;import javafx.scene.text.Text;&#10;import javafx.stage.Stage;&#10;import javafx.stage.StageStyle;&#10;import javafx.util.Duration;&#10;import model.Save;&#10;import model.Tile;&#10;import model.Grid;&#10;import util.*;&#10;import util.graphic.Paint;&#10;import model.*;&#10;&#10;import java.io.IOException;&#10;import java.net.URL;&#10;import java.util.Map;&#10;import java.util.Objects;&#10;import java.io.File;&#10;import java.time.LocalDate;&#10;&#10;&#10;public class GameUI extends Application {&#10;&#10;&#10;    public TextField saveName;&#10;    public AnchorPane sidebarPane;&#10;    public GridPane savePane;&#10;    public GridPane exitPane;&#10;    public Text saveText;&#10;    public Button saveConfirm;&#10;    public Text exitText;&#10;    public Button rtmConfirm;&#10;    public Button exitConfirm;&#10;    // 节点域&#10;    @FXML&#10;    private AnchorPane gamePane;&#10;    public AnchorPane mainPane;&#10;    @FXML&#10;    private Button restartButton;&#10;    @FXML&#10;    private Button autoButton;&#10;    @FXML&#10;    private AnchorPane gameInterface;&#10;    @FXML&#10;    private Label scoreLabel;&#10;    @FXML&#10;    private Label stepLabel;&#10;    @FXML&#10;    private Label timeLabel;&#10;    private static Scene scene;&#10;&#10;    // 游戏参数&#10;    private static int size;&#10;    private static int mode;&#10;    private static Grid grid;&#10;&#10;    /** 运行时参数 **/&#10;    // 分数&#10;    private static int score = 0;&#10;&#10;    // 是否加载&#10;    private static boolean isLoad = false;&#10;    // 胜利标志&#10;    public static boolean isWin = false;&#10;    // 失败标志&#10;    public static boolean isLose = false;&#10;    // 游戏结束标志&#10;    private static boolean isEnd = false;&#10;    // AI运行标志&#10;    public static boolean isAuto = false;&#10;    // 当前存档&#10;    private static Save currentSave;&#10;    // AI线程&#10;    private static AIThread aiThread;&#10;    private static Timer timer;&#10;    private static Time startTime;&#10;&#10;    // 游戏资源&#10;    private static User currentUser;&#10;    private static MediaPlayer moveSound;&#10;&#10;    public static int getSize() {&#10;        return size;&#10;    }&#10;&#10;    public static void setSize(int size) {&#10;        GameUI.size = size;&#10;    }&#10;&#10;    public static int getMode() {&#10;        return mode;&#10;    }&#10;&#10;    public static void setMode(int mode) {&#10;        GameUI.mode = mode;&#10;    }&#10;&#10;    public static Grid getBoard() {&#10;        return grid;&#10;    }&#10;&#10;    public static void setBoard(Grid grid) {&#10;        GameUI.grid = grid;&#10;    }&#10;&#10;&#10;    // 游戏界面初始化&#10;    @Override&#10;    public void start(Stage primaryStage) throws Exception {&#10;        Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(&quot;/FXView/GameUI.fxml&quot;)));&#10;        scene = new Scene(root, 1000, 1000);&#10;&#10;        // stage设置&#10;        primaryStage.setTitle(&quot;2048&quot;);&#10;        primaryStage.setResizable(false);&#10;        primaryStage.getIcons().add(new javafx.scene.image.Image(&quot;/assets/titleIcon/favicon-32x32.png&quot;));&#10;        primaryStage.initStyle(StageStyle.UNIFIED);&#10;        primaryStage.setScene(scene);&#10;        primaryStage.show();&#10;&#10;        // 设置焦点&#10;        scene.getRoot().requestFocus();&#10;&#10;        // 获取节点&#10;        gamePane = (AnchorPane) scene.lookup(&quot;#gamePane&quot;);&#10;        scoreLabel = (Label) scene.lookup(&quot;#scoreLabel&quot;);&#10;        stepLabel = (Label) scene.lookup(&quot;#stepLabel&quot;);&#10;        timeLabel = (Label) scene.lookup(&quot;#timeLabel&quot;);&#10;        autoButton = (Button) scene.lookup(&quot;#autoButton&quot;);&#10;        saveName = (TextField) scene.lookup(&quot;#saveName&quot;);&#10;        saveText = (Text) scene.lookup(&quot;#saveText&quot;);&#10;        saveConfirm = (Button) scene.lookup(&quot;#saveConfirm&quot;);&#10;        exitText = (Text) scene.lookup(&quot;#exitText&quot;);&#10;        rtmConfirm = (Button) scene.lookup(&quot;#rtmConfirm&quot;);&#10;        exitConfirm = (Button) scene.lookup(&quot;#exitConfirm&quot;);&#10;        sidebarPane = (AnchorPane) scene.lookup(&quot;#sidebarPane&quot;);&#10;&#10;        // 资源初始化&#10;        // 音效初始化&#10;        URL audioResource = getClass().getResource(&quot;/assets/sound/moveSound.mp3&quot;);&#10;        if (audioResource != null) {&#10;            moveSound = new MediaPlayer(new Media(audioResource.toString()));&#10;        }&#10;        // 字体初始化&#10;        final Font LILITA_18 = Font.loadFont(getClass().getResourceAsStream(&quot;/font/Lilita_One/LilitaOne-Regular.ttf&quot;), 18);&#10;        final Font LILITA_16 = Font.loadFont(getClass().getResourceAsStream(&quot;/font/Lilita_One/LilitaOne-Regular.ttf&quot;), 16);&#10;        saveText.setFont(LILITA_18);&#10;        saveName.setFont(LILITA_16);&#10;        saveConfirm.setFont(LILITA_18);&#10;        exitText.setFont(LILITA_18);&#10;        rtmConfirm.setFont(LILITA_18);&#10;        exitConfirm.setFont(LILITA_18);&#10;&#10;        // 游戏板初始化&#10;        GameUI.initGamePane(gamePane, size);&#10;        if (!isLoad) {&#10;            grid = new Grid(size, mode);&#10;            grid.init(gamePane);&#10;            Paint.draw(grid, gamePane, size, 11, 11);&#10;            PopUpAnimation appear = new PopUpAnimation(grid);&#10;            appear.makeTransition();&#10;            appear.play(Animation.CombineType.GROUP);&#10;        } else {&#10;            grid.load(gamePane);&#10;            Paint.draw(grid, gamePane, size, 11, 11);&#10;&#10;        }&#10;&#10;        // 计时器&#10;        timer = new Timer(startTime, Time.INFINITE);&#10;        timer.begin();&#10;        // 设置定时器结束事件&#10;//        timer.setEndEvent(() -&gt; {&#10;//            isAuto = false;&#10;//            autoButton.setText(&quot;Auto&quot;);&#10;//            winAction();&#10;//        });&#10;        // 若有用户登录，开启定时自动保存任务&#10;        if (currentUser != null) {&#10;            timer.setTimingSession(() -&gt; {&#10;                autoSave();&#10;                System.out.println(&quot;Auto save&quot;);&#10;            }, Duration.seconds(10));&#10;        }&#10;        timeLabel.textProperty().bind(timer.messageProperty());&#10;        updateState();&#10;&#10;        // 初始化输入框&#10;        if (currentSave != null) {&#10;            saveName.setText(currentSave.saveName);&#10;        }&#10;&#10;        // 设置键盘监听&#10;        scene.setOnKeyPressed(event -&gt; {&#10;            if        (event.getCode() == KeyCode.UP    || event.getCode() == KeyCode.W) {&#10;                upAction();&#10;            } else if (event.getCode() == KeyCode.DOWN  || event.getCode() == KeyCode.S) {&#10;                downAction();&#10;            } else if (event.getCode() == KeyCode.LEFT  || event.getCode() == KeyCode.A) {&#10;                leftAction();&#10;            } else if (event.getCode() == KeyCode.RIGHT || event.getCode() == KeyCode.D) {&#10;                rightAction();&#10;            }&#10;        });&#10;&#10;    }&#10;&#10;    // restart按钮事件&#10;    @FXML&#10;    public void restartAction() {&#10;&#10;        if (isAuto) {&#10;            return;&#10;        }&#10;&#10;        grid = new Grid(size, mode);&#10;        grid.init(gamePane);&#10;        Paint.draw(grid, gamePane, size, 11, 11);&#10;        PopUpAnimation appear = new PopUpAnimation(grid);&#10;        appear.makeTransition();&#10;&#10;        appear.play(Animation.CombineType.GROUP);&#10;        upDateScore(scoreLabel, grid);&#10;&#10;        upDateStep(stepLabel, grid);&#10;        scene.getRoot().requestFocus();&#10;&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;        timeLabel.textProperty().bind(timer.messageProperty());&#10;        timer.reset();&#10;&#10;    }&#10;&#10;    // undo按钮事件&#10;    @FXML&#10;    public void undoAction() {&#10;&#10;        if (isAuto) {&#10;            return;&#10;        }&#10;&#10;        grid.undo();&#10;        Paint.draw(grid, gamePane, size, 11, 11);&#10;        upDateScore(scoreLabel, grid);&#10;&#10;        upDateStep(stepLabel, grid);&#10;        scene.getRoot().requestFocus();&#10;&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;        // 计时器继续&#10;        if (timer != null) {&#10;            timer.continueTimer();&#10;        }&#10;    }&#10;&#10;    // 按键事件&#10;    @FXML&#10;    public void upAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.UP);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;        makeAnimation(Direction.UP, distanceMap);&#10;//        slide.setOnFinished(event -&gt; {&#10;//&#10;//            GameUI.draw(grid, gamePane, size);&#10;//            updateState();&#10;//        });&#10;//&#10;//        slide.play(CombineType.GROUP);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void downAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.DOWN);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;&#10;        makeAnimation(Direction.DOWN, distanceMap);&#10;&#10;    }&#10;&#10;    private void makeAnimation(Direction down, Map&lt;Tile, Double&gt; distanceMap) {&#10;        // 移除键盘焦点&#10;        isEnd = true;&#10;&#10;        // 播放音效&#10;        moveSound.stop();&#10;        moveSound.play();&#10;&#10;        MoveAnimation slide = new MoveAnimation(down, distanceMap);&#10;        slide.makeTransition();&#10;        slide.setOnFinished(event1 -&gt; {&#10;&#10;            Paint.draw(grid, gamePane, size, 11, 11);&#10;            PopUpAnimation appear = new PopUpAnimation(grid);&#10;            appear.makeTransition();&#10;            BounceAnimation bounce = new BounceAnimation(grid);&#10;            bounce.makeTransition();&#10;            ParallelTransition group1 = new ParallelTransition(bounce.getGroupTransition(), appear.getGroupTransition());&#10;            group1.play();&#10;&#10;            // 恢复键盘焦点&#10;            isEnd = false;&#10;&#10;            updateState();&#10;            scene.getRoot().requestFocus();&#10;&#10;&#10;        });&#10;        slide.play(Animation.CombineType.GROUP);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void leftAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.LEFT);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;&#10;        makeAnimation(Direction.LEFT, distanceMap);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void rightAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.RIGHT);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;&#10;        makeAnimation(Direction.RIGHT, distanceMap);&#10;&#10;    }&#10;&#10;    // 获取gamePane参数&#10;    public double getGamePaneWidth() {&#10;        return gamePane.getWidth();&#10;    }&#10;&#10;    public double getLayoutX() {&#10;        return gamePane.getLayoutX();&#10;    }&#10;&#10;    public double getLayoutY() {&#10;        return gamePane.getLayoutY();&#10;    }&#10;&#10;    /**&#10;     * @description: 初始化游戏板方法&#10;     * @param gamePane 游戏板&#10;     * @param size 游戏板大小&#10;     * @return void&#10;     */&#10;    public static void initGamePane(AnchorPane gamePane, int size) {&#10;&#10;        gamePane.getChildren().clear();&#10;&#10;        Paint.drawBackground(gamePane);&#10;        Paint.drawGrid(gamePane, size, 11.0, 11.0);&#10;    }&#10;&#10;    public void updateState() {&#10;        upDateScore(scoreLabel, grid);&#10;&#10;        upDateStep(stepLabel, grid);&#10;&#10;        if (grid.isWin()) {&#10;            isWin = true;&#10;&#10;            isAuto = false;&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/auto.png&quot;, 22.0, 22.0, false, false)));&#10;            timer.stop();&#10;            winAction();&#10;        } else if (grid.isOver()) {&#10;            isLose = true;&#10;&#10;            isAuto = false;&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/auto.png&quot;, 22.0, 22.0, false, false)));&#10;            timer.stop();&#10;            loseAction();&#10;        }&#10;    }&#10;&#10;&#10;    //&#10;    public void simulateMove(Direction direction) {&#10;        switch (direction) {&#10;            case UP:&#10;                upAction();&#10;                break;&#10;            case DOWN:&#10;                downAction();&#10;                break;&#10;            case LEFT:&#10;                leftAction();&#10;                break;&#10;            case RIGHT:&#10;                rightAction();&#10;                break;&#10;        }&#10;    }&#10;&#10;    // 更新分数&#10;    private static void upDateScore(Label scoreLabel, Grid grid) {&#10;        // int incScore = grid.getScore() - score;&#10;        score = grid.getScore();&#10;        scoreLabel.setText(&quot;&quot; + score);&#10;    }&#10;&#10;    // 更新步数&#10;    private static void upDateStep(Label stepLabel, Grid grid) {&#10;        stepLabel.setText(&quot;&quot; + grid.getStep());&#10;    }&#10;&#10;    private void winAction() {&#10;&#10;        isEnd = true;&#10;        // 绘制胜利界面&#10;        StackPane winPane = new StackPane();&#10;        winPane.setLayoutX(0);&#10;        winPane.setLayoutY(0);&#10;        winPane.setPrefSize(gamePane.getWidth(), gamePane.getHeight());&#10;        winPane.setStyle(&quot;&quot;&quot;&#10;                -fx-background-color: rgba(255,220,80,0.73);&#10;                -fx-background-radius: 3px;&#10;                -fx-background-size: cover;&#10;                -fx-background-position: center;&#10;                &quot;&quot;&quot;);&#10;        winPane.toFront();&#10;        winPane.setOpacity(0.6);&#10;&#10;        VBox winBox = new VBox();&#10;        winBox.setAlignment(javafx.geometry.Pos.CENTER);&#10;        // 显示“YOU WIN”标签&#10;        Label winLabel = new Label(&quot;YOU WIN&quot;);&#10;        winLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 50px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #ffffff;&#10;                -fx-effect: dropshadow(three-pass-box, #776e65, 10, 0, 0, 0);&quot;&quot;&quot;);&#10;        // 显示分数&#10;        Label scoreLabel = new Label(&quot;Score: &quot; + score);&#10;        scoreLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 30px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #776e65;&quot;&quot;&quot;);&#10;        // 添加到父节点&#10;        winBox.getChildren().addAll(winLabel, scoreLabel);&#10;        winPane.getChildren().add(winBox);&#10;&#10;        gamePane.getChildren().add(winPane);&#10;    }&#10;&#10;    private void loseAction() {&#10;&#10;        isEnd = true;&#10;        // 绘制失败界面&#10;        StackPane losePane = new StackPane();&#10;        losePane.setLayoutX(0);&#10;        losePane.setLayoutY(0);&#10;        losePane.setPrefSize(gamePane.getWidth(), gamePane.getHeight());&#10;        losePane.setStyle(&quot;&quot;&quot;&#10;                -fx-background-color: rgba(113,113,113,0.94);&#10;                -fx-background-radius: 3px;&#10;                -fx-background-size: cover;&#10;                -fx-background-position: center;&#10;                &quot;&quot;&quot;);&#10;        losePane.toFront();&#10;        losePane.setOpacity(0.6);&#10;&#10;        VBox loseBox = new VBox();&#10;        loseBox.setAlignment(javafx.geometry.Pos.CENTER);&#10;        // 显示“YOU LOSE”标签&#10;        Label loseLabel = new Label(&quot;YOU LOSE&quot;);&#10;        loseLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 50px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #1e1d1d;&#10;                -fx-effect: dropshadow(three-pass-box, #776e65, 10, 0, 0, 0);&quot;&quot;&quot;);&#10;        // 显示分数&#10;        Label scoreLabel = new Label(&quot;Score: &quot; + score);&#10;        scoreLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 30px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #3a3a3a;&#10;                &quot;&quot;&quot;);&#10;        // 添加到父节点&#10;        loseBox.getChildren().addAll(loseLabel, scoreLabel);&#10;        losePane.getChildren().add(loseBox);&#10;&#10;        gamePane.getChildren().add(losePane);&#10;    }&#10;&#10;    @FXML&#10;    private void manualSave() {&#10;&#10;        if (saveName.getText().isEmpty()) {&#10;            Tooltip tooltip = new Tooltip(&quot;Please enter a save name!&quot;);&#10;            tooltip.setFont(Font.font(&quot;Arial&quot;, 12));&#10;            tooltip.setShowDuration(javafx.util.Duration.millis(2000));&#10;            tooltip.setAutoHide(true);&#10;            tooltip.show(saveName, 1620, 500);&#10;            return;&#10;        }&#10;&#10;        // 保存存档&#10;        // 保存用户信息&#10;        Save.State state;&#10;        if (isWin) {&#10;            state = Save.State.WIN;&#10;        } else if (isLose) {&#10;            state = Save.State.LOSE;&#10;        } else {&#10;            state = Save.State.IN_PROGRESS;&#10;        }&#10;        &#10;        // 保存到User对应存档路径&#10;        currentSave = new Save(saveName.getText(), grid, state, new Time(timeLabel.getText()), new Date(), new Time());&#10;&#10;        try {&#10;            Saver.saveToJson(Saver.buildGson(currentSave), currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;);&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(&quot;Save failed!&quot;);&#10;        }&#10;    }&#10;&#10;    private void autoSave() {&#10;        // 保存存档&#10;        // 保存用户信息&#10;        Save.State state;&#10;        if (isWin) {&#10;            state = Save.State.WIN;&#10;        } else if (isLose) {&#10;            state = Save.State.LOSE;&#10;        } else {&#10;            state = Save.State.IN_PROGRESS;&#10;        }&#10;        if (currentSave == null) {&#10;            String saveName = &quot;Auto &quot; + LocalDate.now();&#10;            currentSave = new Save(saveName, grid, state, startTime);&#10;            // 保存到User对应存档路径&#10;            try {&#10;                Saver.saveToJson(Saver.buildGson(currentSave), currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;);&#10;            } catch (IOException e) {&#10;                throw new RuntimeException(&quot;Save failed!&quot;); // 后改&#10;            }&#10;            &#10;        } else {&#10;            currentSave = new Save(currentSave.saveName, grid, state, new Time(timeLabel.getText()));&#10;            // 保存到User对应存档路径&#10;            try {&#10;                Saver.saveToJson(Saver.buildGson(currentSave), currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;);&#10;            } catch (IOException e) {&#10;                throw new RuntimeException(&quot;Save failed!&quot;); // 后改&#10;            }&#10;        }&#10;    }&#10;&#10;    // 初始化GameUI&#10;    public static void init(int size, int mode) {&#10;        GameUI.setSize(size);&#10;        GameUI.setMode(mode);&#10;        GameUI.setBoard(new Grid(size, mode));&#10;        GameUI.setStartTime(Time.ZERO);&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;    }&#10;&#10;    public static void init(int size, int mode, User user) {&#10;        GameUI.setSize(size);&#10;        GameUI.setMode(mode);&#10;        GameUI.setBoard(new Grid(size, mode));&#10;        GameUI.setStartTime(Time.ZERO);&#10;        currentUser = user;&#10;        currentSave = null;&#10;        isLoad = false;&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;    }&#10;&#10;    private static void setStartTime(Time startTime) {&#10;        GameUI.startTime = startTime;&#10;    }&#10;&#10;&#10;    public static void init(int mode, int[][] board, Time startTime) {&#10;        GameUI.setSize(board.length);&#10;        GameUI.setMode(mode);&#10;        GameUI.setBoard(new Grid(board, mode));&#10;        GameUI.setStartTime(startTime);&#10;        isLoad = true;&#10;        isEnd = false;&#10;&#10;&#10;    }&#10;&#10;    public static void init(Grid grid, Time startTime) {&#10;        GameUI.setBoard(grid);&#10;        GameUI.setSize(grid.getSize());&#10;        GameUI.setMode(grid.getMode());&#10;        GameUI.setStartTime(startTime);&#10;        isLoad = true;&#10;    }&#10;&#10;    // 读取存档时&#10;    public static void init(Grid grid, Time startTime, Save save) {&#10;        GameUI.setBoard(grid);&#10;        GameUI.setSize(grid.getSize());&#10;        GameUI.setMode(grid.getMode());&#10;        GameUI.setStartTime(startTime);&#10;        if (!PublicResource.isEmpty()) {&#10;            currentUser = PublicResource.getLoginUser();&#10;        }&#10;        GameUI.currentSave = save;&#10;        isLoad = true;&#10;        isEnd = false;&#10;&#10;        isWin = false;&#10;        isLose = false;&#10;    }&#10;&#10;    // 运行GameUI&#10;    public static void run() {&#10;        Platform.runLater(() -&gt; {&#10;            GameUI gameUI = new GameUI();&#10;            Stage primaryStage = new Stage();&#10;            try {&#10;                gameUI.start(primaryStage);&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;    }&#10;&#10;    public static void start() {&#10;        launch();&#10;    }&#10;&#10;&#10;    public static Grid getGrid() {&#10;        return grid;&#10;    }&#10;&#10;    public void autoAction() {&#10;&#10;        if (isWin || isLose) {&#10;            return;&#10;        }&#10;&#10;        if (isAuto) {&#10;            isAuto = false;&#10;            aiThread.endFlag = true;&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/auto.png&quot;, 22.0, 22.0, false, false)));&#10;            scene.getRoot().requestFocus();&#10;&#10;        } else {&#10;            isAuto = true;&#10;            aiThread = new AIThread(grid, this);&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/pause.png&quot;, 22.0, 22.0, false, false)));&#10;            new Thread(aiThread).start();&#10;&#10;        }&#10;    }&#10;&#10;    public void exitAction() {&#10;        if (isAuto) return;&#10;        timer.stop();&#10;        isEnd = true;&#10;        SlipToSidebarAnimation slip = new SlipToSidebarAnimation(mainPane,sidebarPane);&#10;        slip.makeTransition();&#10;        slip.play(Animation.CombineType.GROUP);&#10;        // 为mainPane添加毛玻璃效果&#10;        BoxBlur blur = new BoxBlur(10, 10, 3);&#10;        mainPane.setEffect(blur);&#10;&#10;        exitPane.setVisible(true);&#10;        try {&#10;            AnchorPane mask = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(&quot;/FXView/MaskPane.fxml&quot;)));&#10;            gameInterface.getChildren().add(mask);&#10;            scene.lookup(&quot;#arrow&quot;).setOnMousePressed(event -&gt; {&#10;                slipReform();&#10;                gameInterface.getChildren().remove(mask);&#10;            });&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public void returnToMain() {&#10;        MainUI.init(null);&#10;        MainUI.run();&#10;        exitGame();&#10;    }&#10;&#10;    public void exitGame() {&#10;        // 弹出确认窗口 TODO&#10;        Stage stage = (Stage) gamePane.getScene().getWindow();&#10;        stage.close();&#10;    }&#10;&#10;    public void slipReform() {&#10;        SlipToSidebarAnimation slip = new SlipToSidebarAnimation(mainPane,sidebarPane,true);&#10;        slip.makeTransition();&#10;        slip.play(Animation.CombineType.GROUP);&#10;        mainPane.setEffect(null);&#10;        exitPane.setVisible(false);&#10;        savePane.setVisible(false);&#10;        isEnd = false;&#10;        if (!isWin &amp;&amp; !isLose) timer.continueTimer();&#10;    }&#10;&#10;    public void saveAction() {&#10;        if (isAuto || currentUser == null) return;&#10;        timer.stop();&#10;        isEnd = true;&#10;        SlipToSidebarAnimation slip = new SlipToSidebarAnimation(mainPane,sidebarPane);&#10;        slip.makeTransition();&#10;        slip.play(Animation.CombineType.GROUP);&#10;        // 为mainPane添加毛玻璃效果&#10;        BoxBlur blur = new BoxBlur(10, 10, 3);&#10;        mainPane.setEffect(blur);&#10;&#10;        savePane.setVisible(true);&#10;        try {&#10;            AnchorPane mask = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(&quot;/FXView/MaskPane.fxml&quot;)));&#10;            gameInterface.getChildren().add(mask);&#10;            if (currentSave != null) {&#10;                saveName.setText(currentSave.saveName);&#10;            }&#10;            scene.lookup(&quot;#arrow&quot;).setOnMousePressed(event -&gt; {&#10;                slipReform();&#10;                gameInterface.getChildren().remove(mask);&#10;            });&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716864350376</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1716864350376</updated>
    </task>
    <task id="LOCAL-00008" summary="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;&#10;import static ai.AlphaDuo.directionNum;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (directionNum == 0) {&#10;            return Direction.UP;&#10;        } else if (directionNum == 1) {&#10;            return Direction.DOWN;&#10;        } else if (directionNum == 2) {&#10;            return Direction.LEFT;&#10;        } else if (directionNum == 3) {&#10;            return Direction.RIGHT;&#10;        }&#10;        return null;&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(100);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                move(getDirection());&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716864369611</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1716864369611</updated>
    </task>
    <option name="localTasksCounter" value="9" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Add move sound effect and apply custom font" />
    <MESSAGE value="Add move sound effect a&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;                       &lt;project version=&quot;4&quot;&gt;&#10;                         &lt;component name=&quot;ExternalStorageConfigurationManager&quot; enabled=&quot;true&quot; /&gt;&#10;                         &lt;component name=&quot;MavenProjectsManager&quot;&gt;&#10;                           &lt;option name=&quot;originalFiles&quot;&gt;&#10;                             &lt;list&gt;&#10;                               &lt;option value=&quot;D:/IdeaProjects/Gaming2048/src/pom.xml&quot; /&gt;&#10;                               &lt;option value=&quot;D:/IdeaProjects/Gaming2048/pom.xml&quot; /&gt;&#10;                             &lt;/list&gt;&#10;                           &lt;/option&gt;&#10;                         &lt;/component&gt;&#10;                         &lt;component name=&quot;ProjectRootManager&quot; version=&quot;2&quot; languageLevel=&quot;JDK_17&quot; default=&quot;true&quot; project-jdk-name=&quot;21&quot; project-jdk-type=&quot;JavaSDK&quot;&gt;&#10;                           &lt;output url=&quot;file://D:/IdeaProjects/Gaming2048/out&quot; /&gt;&#10;                         &lt;/component&gt;&#10;                       &lt;/project&gt;nd apply custom font" />
    <MESSAGE value="package controller;&#10;&#10;public class RegistrationAndLogInUI {&#10;    // 注册与登录界面，当输入的用户名和密码不合法时，弹出窗口&#10;}" />
    <MESSAGE value="package model;&#10;public class User {&#10;    private String name;&#10;    private String password;&#10;    private String path;&#10;    private int bestScore;&#10;    private int totalGames;&#10;    private int totalWins;&#10;    private int totalLoses;&#10;    &#10;    public User (String name, String password, String path) {&#10;        this.name = name;&#10;        this.password = password;&#10;        this.path = path;&#10;        this.bestScore = 0;&#10;        this.totalGames = 0;&#10;        this.totalWins = 0;&#10;        this.totalLoses = 0;&#10;    }&#10;    &#10;    public String getName() {&#10;        return name;&#10;    }&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;    public String getPath() {&#10;        return path;&#10;    }&#10;    public int getBestScore() {&#10;        return bestScore;&#10;    }&#10;    public void setBestScore(int bestScore) {&#10;        this.bestScore = bestScore;&#10;    }&#10;    public int getTotalGames() {&#10;        return totalGames;&#10;    }&#10;    public void setTotalGames(int totalGames) {&#10;        this.totalGames = totalGames;&#10;    }&#10;    public int getTotalWins() {&#10;        return totalWins;&#10;    }&#10;    public void setTotalWins(int totalWins) {&#10;        this.totalWins = totalWins;&#10;    }&#10;    public int getTotalLoses() {&#10;        return totalLoses;&#10;    }&#10;    public void setTotalLoses(int totalLoses) {&#10;        this.totalLoses = totalLoses;&#10;    }&#10;    public void refreshInfo(int bestScore, int totalGames, int totalWins, int totalLoses) {&#10;        this.bestScore = bestScore;&#10;        this.totalGames = totalGames;&#10;        this.totalWins = totalWins;&#10;        this.totalLoses = totalLoses;&#10;    }&#10;}" />
    <MESSAGE value="package model;&#10;import util.Saver;&#10;import java.io.IOException;&#10;import java.util.*;&#10;public class UserManager {&#10;    private List&lt;User&gt; userList;&#10;    private static final String savePath = &quot;src/main/resources/general&quot;;&#10;    &#10;    public UserManager() {&#10;        try {&#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        userList = new ArrayList&lt;&gt;();&#10;    }&#10;    &#10;    public User register(String name, String password) throws IOException {&#10;        User user = null;&#10;        if (hasUser(name)) { // 检查用户是否已存在&#10;            throw new IllegalArgumentException(&quot;This user has existed!&quot;);&#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&#10;            throw new IllegalArgumentException(&quot;Invalid password!&quot; + &quot;Your password should contain at least 8 characters.&quot;);&#10;        } else if (name.equals(&quot;&quot;) || password.equals(&quot;&quot;)) { // 检查用户名和密码是否为空&#10;            throw new IllegalArgumentException(&quot;Username or password cannot be empty!&quot;);&#10;        } else {&#10;            user = new User(name, password, &quot;src/main/resources/savedata/&quot; + name);&#10;            Saver.makeDir(user.getPath());&#10;            userList.add(user);&#10;            // 保存用户信息&#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &quot;/userInfo.json&quot;);&#10;&#10;        }&#10;        return user;&#10;&#10;    }&#10;    public User login(String name, String password) {&#10;        if (userList.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            for (int i = 0; i &lt; userList.size(); i++) {&#10;                if (userList.get(i).getName().equals(name)) {&#10;                    if (!isPasswordCorrect(name, password)) {&#10;                        throw new IllegalArgumentException(&quot;Incorrect password!&quot;);&#10;                    } else {&#10;                        return userList.get(i);&#10;                    }&#10;                }&#10;            }&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        }&#10;    }&#10;    public void deleteUser(User user) throws IOException {&#10;        userList.remove(user);&#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&#10;&#10;    }&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length() &gt;= 8) {&#10;            isPasswordValid = true;&#10;        }&#10;        return isPasswordValid;&#10;    }&#10;    public boolean isPasswordCorrect(String name, String password) {&#10;        boolean isPasswordCorrect = false;&#10;        int i0 = 0;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                i0 = i;&#10;                break;&#10;            }&#10;        }&#10;        if (password.equals(userList.get(i0).getPassword())) {&#10;            isPasswordCorrect = true;&#10;        }&#10;        return isPasswordCorrect;&#10;    }&#10;}" />
    <MESSAGE value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project version=&quot;4&quot;&gt;&#10;  &lt;component name=&quot;AutoImportSettings&quot;&gt;&#10;    &lt;option name=&quot;autoReloadType&quot; value=&quot;SELECTIVE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ChangeListManager&quot;&gt;&#10;    &lt;list default=&quot;true&quot; id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;package model;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;    &amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;    &amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password!&amp;quot; + &amp;quot;Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;&amp;#10;        }&amp;#10;        return user;&amp;#10;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            return null;&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!isPasswordCorrect(name, password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;    public boolean isPasswordCorrect(String name, String password) {&amp;#10;        boolean isPasswordCorrect = false;&amp;#10;        int i0 = 0;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                i0 = i;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        if (password.equals(userList.get(i0).getPassword())) {&amp;#10;            isPasswordCorrect = true;&amp;#10;        }&amp;#10;        return isPasswordCorrect;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; afterDir=&quot;false&quot; /&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AIThread.java&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AIThread.java&quot; afterDir=&quot;false&quot; /&gt;&#10;    &lt;/list&gt;&#10;    &lt;option name=&quot;SHOW_DIALOG&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_CONFLICTS&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;LAST_RESOLUTION&quot; value=&quot;IGNORE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;FileTemplateManagerImpl&quot;&gt;&#10;    &lt;option name=&quot;RECENT_TEMPLATES&quot;&gt;&#10;      &lt;list&gt;&#10;        &lt;option value=&quot;FxmlFile&quot; /&gt;&#10;        &lt;option value=&quot;Class&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Git.Settings&quot;&gt;&#10;    &lt;option name=&quot;RECENT_BRANCH_BY_REPOSITORY&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;D:/IdeaProjects/Gaming2048&quot; value=&quot;dev&quot; /&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;    &lt;option name=&quot;RECENT_GIT_ROOT_PATH&quot; value=&quot;D:/IdeaProjects/Gaming2048&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;MarkdownSettingsMigration&quot;&gt;&#10;    &lt;option name=&quot;stateVersion&quot; value=&quot;1&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectColorInfo&quot;&gt;{&#10;  &amp;quot;associatedIndex&amp;quot;: 6&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;ProjectId&quot; id=&quot;2gzDgn7Z1Dbff0iGRqjibYqVjRl&quot; /&gt;&#10;  &lt;component name=&quot;ProjectLevelVcsManager&quot; settingsEditedManually=&quot;true&quot;&gt;&#10;    &lt;ConfirmationsSetting value=&quot;2&quot; id=&quot;Add&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectViewState&quot;&gt;&#10;    &lt;option name=&quot;hideEmptyMiddlePackages&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;showLibraryContents&quot; value=&quot;true&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;PropertiesComponent&quot;&gt;{&#10;  &amp;quot;keyToString&amp;quot;: {&#10;    &amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;git-widget-placeholder&amp;quot;: &amp;quot;CJKProject__202405&amp;quot;,&#10;    &amp;quot;kotlin-language-version-configured&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.selected.package.tslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;应用程序.TestMainUIApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;&#10;  }&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;RunManager&quot;&gt;&#10;    &lt;configuration name=&quot;TestMainUIApplication&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot; temporary=&quot;true&quot; nameIsGenerated=&quot;true&quot;&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;TestMainUIApplication&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;VM_PARAMETERS&quot; value=&quot;--module-path &amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;recent_temporary&gt;&#10;      &lt;list&gt;&#10;        &lt;item itemvalue=&quot;应用程序.TestMainUIApplication&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/recent_temporary&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;SpellCheckerSettings&quot; RuntimeDictionaries=&quot;0&quot; Folders=&quot;0&quot; CustomDictionaries=&quot;0&quot; DefaultDictionary=&quot;项目级&quot; UseSingleDictionary=&quot;true&quot; transferred=&quot;true&quot; /&gt;&#10;  &lt;component name=&quot;TaskManager&quot;&gt;&#10;    &lt;task active=&quot;true&quot; id=&quot;Default&quot; summary=&quot;默认任务&quot;&gt;&#10;      &lt;changelist id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;Add move sound effect and apply custom font&quot; /&gt;&#10;      &lt;created&gt;1716691630324&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;updated&gt;1716691630324&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00001&quot; summary=&quot;Add move sound effect a&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;                       &amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;                         &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;                         &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;                           &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;                             &amp;lt;list&amp;gt;&amp;#10;                               &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;                               &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;                             &amp;lt;/list&amp;gt;&amp;#10;                           &amp;lt;/option&amp;gt;&amp;#10;                         &amp;lt;/component&amp;gt;&amp;#10;                         &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;                           &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;                         &amp;lt;/component&amp;gt;&amp;#10;                       &amp;lt;/project&amp;gt;nd apply custom font&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716822634114&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00001&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00001&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716822634114&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00002&quot; summary=&quot;package controller;&amp;#10;&amp;#10;public class RegistrationAndLogInUI {&amp;#10;    // 注册与登录界面，当输入的用户名和密码不合法时，弹出窗口&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716822661645&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00002&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00002&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716822661645&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00003&quot; summary=&quot;package model;&amp;#10;public class User {&amp;#10;    private String name;&amp;#10;    private String password;&amp;#10;    private String path;&amp;#10;    private int bestScore;&amp;#10;    private int totalGames;&amp;#10;    private int totalWins;&amp;#10;    private int totalLoses;&amp;#10;    &amp;#10;    public User (String name, String password, String path) {&amp;#10;        this.name = name;&amp;#10;        this.password = password;&amp;#10;        this.path = path;&amp;#10;        this.bestScore = 0;&amp;#10;        this.totalGames = 0;&amp;#10;        this.totalWins = 0;&amp;#10;        this.totalLoses = 0;&amp;#10;    }&amp;#10;    &amp;#10;    public String getName() {&amp;#10;        return name;&amp;#10;    }&amp;#10;    public String getPassword() {&amp;#10;        return password;&amp;#10;    }&amp;#10;    public String getPath() {&amp;#10;        return path;&amp;#10;    }&amp;#10;    public int getBestScore() {&amp;#10;        return bestScore;&amp;#10;    }&amp;#10;    public void setBestScore(int bestScore) {&amp;#10;        this.bestScore = bestScore;&amp;#10;    }&amp;#10;    public int getTotalGames() {&amp;#10;        return totalGames;&amp;#10;    }&amp;#10;    public void setTotalGames(int totalGames) {&amp;#10;        this.totalGames = totalGames;&amp;#10;    }&amp;#10;    public int getTotalWins() {&amp;#10;        return totalWins;&amp;#10;    }&amp;#10;    public void setTotalWins(int totalWins) {&amp;#10;        this.totalWins = totalWins;&amp;#10;    }&amp;#10;    public int getTotalLoses() {&amp;#10;        return totalLoses;&amp;#10;    }&amp;#10;    public void setTotalLoses(int totalLoses) {&amp;#10;        this.totalLoses = totalLoses;&amp;#10;    }&amp;#10;    public void refreshInfo(int bestScore, int totalGames, int totalWins, int totalLoses) {&amp;#10;        this.bestScore = bestScore;&amp;#10;        this.totalGames = totalGames;&amp;#10;        this.totalWins = totalWins;&amp;#10;        this.totalLoses = totalLoses;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716823036071&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00003&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00003&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716823036071&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00004&quot; summary=&quot;package model;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;    &amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;    &amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password!&amp;quot; + &amp;quot;Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;&amp;#10;        }&amp;#10;        return user;&amp;#10;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            return null;&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!isPasswordCorrect(name, password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;    public boolean isPasswordCorrect(String name, String password) {&amp;#10;        boolean isPasswordCorrect = false;&amp;#10;        int i0 = 0;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                i0 = i;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        if (password.equals(userList.get(i0).getPassword())) {&amp;#10;            isPasswordCorrect = true;&amp;#10;        }&amp;#10;        return isPasswordCorrect;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716823985794&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00004&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00004&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716823985794&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;option name=&quot;localTasksCounter&quot; value=&quot;5&quot; /&gt;&#10;    &lt;servers /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;VcsManagerConfiguration&quot;&gt;&#10;    &lt;MESSAGE value=&quot;Add move sound effect and apply custom font&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Add move sound effect a&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;                       &amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;                         &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;                         &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;                           &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;                             &amp;lt;list&amp;gt;&amp;#10;                               &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;                               &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;                             &amp;lt;/list&amp;gt;&amp;#10;                           &amp;lt;/option&amp;gt;&amp;#10;                         &amp;lt;/component&amp;gt;&amp;#10;                         &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;                           &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;                         &amp;lt;/component&amp;gt;&amp;#10;                       &amp;lt;/project&amp;gt;nd apply custom font&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package controller;&amp;#10;&amp;#10;public class RegistrationAndLogInUI {&amp;#10;    // 注册与登录界面，当输入的用户名和密码不合法时，弹出窗口&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package model;&amp;#10;public class User {&amp;#10;    private String name;&amp;#10;    private String password;&amp;#10;    private String path;&amp;#10;    private int bestScore;&amp;#10;    private int totalGames;&amp;#10;    private int totalWins;&amp;#10;    private int totalLoses;&amp;#10;    &amp;#10;    public User (String name, String password, String path) {&amp;#10;        this.name = name;&amp;#10;        this.password = password;&amp;#10;        this.path = path;&amp;#10;        this.bestScore = 0;&amp;#10;        this.totalGames = 0;&amp;#10;        this.totalWins = 0;&amp;#10;        this.totalLoses = 0;&amp;#10;    }&amp;#10;    &amp;#10;    public String getName() {&amp;#10;        return name;&amp;#10;    }&amp;#10;    public String getPassword() {&amp;#10;        return password;&amp;#10;    }&amp;#10;    public String getPath() {&amp;#10;        return path;&amp;#10;    }&amp;#10;    public int getBestScore() {&amp;#10;        return bestScore;&amp;#10;    }&amp;#10;    public void setBestScore(int bestScore) {&amp;#10;        this.bestScore = bestScore;&amp;#10;    }&amp;#10;    public int getTotalGames() {&amp;#10;        return totalGames;&amp;#10;    }&amp;#10;    public void setTotalGames(int totalGames) {&amp;#10;        this.totalGames = totalGames;&amp;#10;    }&amp;#10;    public int getTotalWins() {&amp;#10;        return totalWins;&amp;#10;    }&amp;#10;    public void setTotalWins(int totalWins) {&amp;#10;        this.totalWins = totalWins;&amp;#10;    }&amp;#10;    public int getTotalLoses() {&amp;#10;        return totalLoses;&amp;#10;    }&amp;#10;    public void setTotalLoses(int totalLoses) {&amp;#10;        this.totalLoses = totalLoses;&amp;#10;    }&amp;#10;    public void refreshInfo(int bestScore, int totalGames, int totalWins, int totalLoses) {&amp;#10;        this.bestScore = bestScore;&amp;#10;        this.totalGames = totalGames;&amp;#10;        this.totalWins = totalWins;&amp;#10;        this.totalLoses = totalLoses;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package model;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;    &amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;    &amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password!&amp;quot; + &amp;quot;Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;&amp;#10;        }&amp;#10;        return user;&amp;#10;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            return null;&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!isPasswordCorrect(name, password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;    public boolean isPasswordCorrect(String name, String password) {&amp;#10;        boolean isPasswordCorrect = false;&amp;#10;        int i0 = 0;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                i0 = i;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        if (password.equals(userList.get(i0).getPassword())) {&amp;#10;            isPasswordCorrect = true;&amp;#10;        }&amp;#10;        return isPasswordCorrect;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;option name=&quot;LAST_COMMIT_MESSAGE&quot; value=&quot;package model;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;    &amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;    &amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password!&amp;quot; + &amp;quot;Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;&amp;#10;        }&amp;#10;        return user;&amp;#10;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            return null;&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!isPasswordCorrect(name, password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;    public boolean isPasswordCorrect(String name, String password) {&amp;#10;        boolean isPasswordCorrect = false;&amp;#10;        int i0 = 0;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                i0 = i;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        if (password.equals(userList.get(i0).getPassword())) {&amp;#10;            isPasswordCorrect = true;&amp;#10;        }&amp;#10;        return isPasswordCorrect;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;XDebuggerManager&quot;&gt;&#10;    &lt;breakpoint-manager&gt;&#10;      &lt;breakpoints&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&lt;/url&gt;&#10;          &lt;line&gt;34&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;42&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-method&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&lt;/url&gt;&#10;          &lt;line&gt;61&lt;/line&gt;&#10;          &lt;properties class=&quot;controller.MainUI&quot;&gt;&#10;            &lt;option name=&quot;EMULATED&quot; value=&quot;true&quot; /&gt;&#10;            &lt;option name=&quot;WATCH_EXIT&quot; value=&quot;false&quot; /&gt;&#10;          &lt;/properties&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;47&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-method&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Timer.java&lt;/url&gt;&#10;          &lt;line&gt;25&lt;/line&gt;&#10;          &lt;properties class=&quot;util.Timer&quot;&gt;&#10;            &lt;option name=&quot;EMULATED&quot; value=&quot;true&quot; /&gt;&#10;            &lt;option name=&quot;WATCH_EXIT&quot; value=&quot;false&quot; /&gt;&#10;          &lt;/properties&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;51&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;      &lt;/breakpoints&gt;&#10;    &lt;/breakpoint-manager&gt;&#10;    &lt;watches-manager&gt;&#10;      &lt;configuration name=&quot;Application&quot;&gt;&#10;        &lt;watch expression=&quot;Saver.makeDir(savePath)&quot; language=&quot;JAVA&quot; /&gt;&#10;      &lt;/configuration&gt;&#10;    &lt;/watches-manager&gt;&#10;  &lt;/component&gt;&#10;&lt;/project&gt;" />
    <MESSAGE value="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;    private double evaluationScore = 0;&#10;    private final double monoWeight = 0.4; // 单调性权重&#10;    private final double smoothWeight = 1.0; // 平滑性权重&#10;    private final double emptyWeight = 0.7; // 总空格数权重&#10;    private final double islandWeight = 0.1; // 孤立空格数权重&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected double evaluate(Direction d) {&#10;        int emptyTile = 0;&#10;        for (int i=0; i &lt; grid.getSize(); i++) {&#10;            for (int j=0; j &lt; grid.getSize(); j++) {&#10;                if (grid.getTileGrid()[i][j] == null) {&#10;                    emptyTile += 1;&#10;                }&#10;            }&#10;        }&#10;        evaluationScore += emptyTile * emptyWeight;&#10;        return evaluationScore;&#10;    }&#10;    protected Direction getDirection() {&#10;        int directionNum = 0;&#10;        if (evaluate(Direction.UP) &lt; evaluate(Direction.DOWN)) {&#10;            directionNum = 1;&#10;        }&#10;        if (evaluate(Direction.DOWN) &lt; evaluate(Direction.LEFT)) {&#10;            directionNum = 2;&#10;        }&#10;        if (evaluate(Direction.LEFT) &lt; evaluate(Direction.RIGHT)) {&#10;            directionNum = 3;&#10;        }&#10;        if (directionNum == 0) {&#10;            return Direction.UP;&#10;        } else if (directionNum == 1) {&#10;            return Direction.DOWN;&#10;        } else if (directionNum == 2) {&#10;            return Direction.LEFT;&#10;        } else if (directionNum == 3) {&#10;            return Direction.RIGHT;&#10;        }&#10;        return null;&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;&#10;        while (!endFlag) {&#10;&#10;            try {&#10;                sleep(100);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                move(getDirection());&#10;&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;&#10;        }&#10;    }&#10;}" />
    <MESSAGE value="package controller;&#10;&#10;&#10;import ai.AIThread;&#10;import javafx.animation.ParallelTransition;&#10;import javafx.application.Application;&#10;import javafx.application.Platform;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.effect.BoxBlur;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.KeyCode;&#10;import javafx.scene.layout.*;&#10;import javafx.scene.media.Media;&#10;import javafx.scene.media.MediaPlayer;&#10;import javafx.scene.text.Font;&#10;import javafx.scene.text.Text;&#10;import javafx.stage.Stage;&#10;import javafx.stage.StageStyle;&#10;import javafx.util.Duration;&#10;import model.Save;&#10;import model.Tile;&#10;import model.Grid;&#10;import util.*;&#10;import util.graphic.Paint;&#10;import model.*;&#10;&#10;import java.io.IOException;&#10;import java.net.URL;&#10;import java.util.Map;&#10;import java.util.Objects;&#10;import java.io.File;&#10;import java.time.LocalDate;&#10;&#10;&#10;public class GameUI extends Application {&#10;&#10;&#10;    public TextField saveName;&#10;    public AnchorPane sidebarPane;&#10;    public GridPane savePane;&#10;    public GridPane exitPane;&#10;    public Text saveText;&#10;    public Button saveConfirm;&#10;    public Text exitText;&#10;    public Button rtmConfirm;&#10;    public Button exitConfirm;&#10;    // 节点域&#10;    @FXML&#10;    private AnchorPane gamePane;&#10;    public AnchorPane mainPane;&#10;    @FXML&#10;    private Button restartButton;&#10;    @FXML&#10;    private Button autoButton;&#10;    @FXML&#10;    private AnchorPane gameInterface;&#10;    @FXML&#10;    private Label scoreLabel;&#10;    @FXML&#10;    private Label stepLabel;&#10;    @FXML&#10;    private Label timeLabel;&#10;    private static Scene scene;&#10;&#10;    // 游戏参数&#10;    private static int size;&#10;    private static int mode;&#10;    private static Grid grid;&#10;&#10;    /** 运行时参数 **/&#10;    // 分数&#10;    private static int score = 0;&#10;&#10;    // 是否加载&#10;    private static boolean isLoad = false;&#10;    // 胜利标志&#10;    public static boolean isWin = false;&#10;    // 失败标志&#10;    public static boolean isLose = false;&#10;    // 游戏结束标志&#10;    private static boolean isEnd = false;&#10;    // AI运行标志&#10;    public static boolean isAuto = false;&#10;    // 当前存档&#10;    private static Save currentSave;&#10;    // AI线程&#10;    private static AIThread aiThread;&#10;    private static Timer timer;&#10;    private static Time startTime;&#10;&#10;    // 游戏资源&#10;    private static User currentUser;&#10;    private static MediaPlayer moveSound;&#10;&#10;    public static int getSize() {&#10;        return size;&#10;    }&#10;&#10;    public static void setSize(int size) {&#10;        GameUI.size = size;&#10;    }&#10;&#10;    public static int getMode() {&#10;        return mode;&#10;    }&#10;&#10;    public static void setMode(int mode) {&#10;        GameUI.mode = mode;&#10;    }&#10;&#10;    public static Grid getBoard() {&#10;        return grid;&#10;    }&#10;&#10;    public static void setBoard(Grid grid) {&#10;        GameUI.grid = grid;&#10;    }&#10;&#10;&#10;    // 游戏界面初始化&#10;    @Override&#10;    public void start(Stage primaryStage) throws Exception {&#10;        Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(&quot;/FXView/GameUI.fxml&quot;)));&#10;        scene = new Scene(root, 1000, 1000);&#10;&#10;        // stage设置&#10;        primaryStage.setTitle(&quot;2048&quot;);&#10;        primaryStage.setResizable(false);&#10;        primaryStage.getIcons().add(new javafx.scene.image.Image(&quot;/assets/titleIcon/favicon-32x32.png&quot;));&#10;        primaryStage.initStyle(StageStyle.UNIFIED);&#10;        primaryStage.setScene(scene);&#10;        primaryStage.show();&#10;&#10;        // 设置焦点&#10;        scene.getRoot().requestFocus();&#10;&#10;        // 获取节点&#10;        gamePane = (AnchorPane) scene.lookup(&quot;#gamePane&quot;);&#10;        scoreLabel = (Label) scene.lookup(&quot;#scoreLabel&quot;);&#10;        stepLabel = (Label) scene.lookup(&quot;#stepLabel&quot;);&#10;        timeLabel = (Label) scene.lookup(&quot;#timeLabel&quot;);&#10;        autoButton = (Button) scene.lookup(&quot;#autoButton&quot;);&#10;        saveName = (TextField) scene.lookup(&quot;#saveName&quot;);&#10;        saveText = (Text) scene.lookup(&quot;#saveText&quot;);&#10;        saveConfirm = (Button) scene.lookup(&quot;#saveConfirm&quot;);&#10;        exitText = (Text) scene.lookup(&quot;#exitText&quot;);&#10;        rtmConfirm = (Button) scene.lookup(&quot;#rtmConfirm&quot;);&#10;        exitConfirm = (Button) scene.lookup(&quot;#exitConfirm&quot;);&#10;        sidebarPane = (AnchorPane) scene.lookup(&quot;#sidebarPane&quot;);&#10;&#10;        // 资源初始化&#10;        // 音效初始化&#10;        URL audioResource = getClass().getResource(&quot;/assets/sound/moveSound.mp3&quot;);&#10;        if (audioResource != null) {&#10;            moveSound = new MediaPlayer(new Media(audioResource.toString()));&#10;        }&#10;        // 字体初始化&#10;        final Font LILITA_18 = Font.loadFont(getClass().getResourceAsStream(&quot;/font/Lilita_One/LilitaOne-Regular.ttf&quot;), 18);&#10;        final Font LILITA_16 = Font.loadFont(getClass().getResourceAsStream(&quot;/font/Lilita_One/LilitaOne-Regular.ttf&quot;), 16);&#10;        saveText.setFont(LILITA_18);&#10;        saveName.setFont(LILITA_16);&#10;        saveConfirm.setFont(LILITA_18);&#10;        exitText.setFont(LILITA_18);&#10;        rtmConfirm.setFont(LILITA_18);&#10;        exitConfirm.setFont(LILITA_18);&#10;&#10;        // 游戏板初始化&#10;        GameUI.initGamePane(gamePane, size);&#10;        if (!isLoad) {&#10;            grid = new Grid(size, mode);&#10;            grid.init(gamePane);&#10;            Paint.draw(grid, gamePane, size, 11, 11);&#10;            PopUpAnimation appear = new PopUpAnimation(grid);&#10;            appear.makeTransition();&#10;            appear.play(Animation.CombineType.GROUP);&#10;        } else {&#10;            grid.load(gamePane);&#10;            Paint.draw(grid, gamePane, size, 11, 11);&#10;&#10;        }&#10;&#10;        // 计时器&#10;        timer = new Timer(startTime, Time.INFINITE);&#10;        timer.begin();&#10;        // 设置定时器结束事件&#10;//        timer.setEndEvent(() -&gt; {&#10;//            isAuto = false;&#10;//            autoButton.setText(&quot;Auto&quot;);&#10;//            winAction();&#10;//        });&#10;        // 若有用户登录，开启定时自动保存任务&#10;        if (currentUser != null) {&#10;            timer.setTimingSession(() -&gt; {&#10;                autoSave();&#10;                System.out.println(&quot;Auto save&quot;);&#10;            }, Duration.seconds(10));&#10;        }&#10;        timeLabel.textProperty().bind(timer.messageProperty());&#10;        updateState();&#10;&#10;        // 初始化输入框&#10;        if (currentSave != null) {&#10;            saveName.setText(currentSave.saveName);&#10;        }&#10;&#10;        // 设置键盘监听&#10;        scene.setOnKeyPressed(event -&gt; {&#10;            if        (event.getCode() == KeyCode.UP    || event.getCode() == KeyCode.W) {&#10;                upAction();&#10;            } else if (event.getCode() == KeyCode.DOWN  || event.getCode() == KeyCode.S) {&#10;                downAction();&#10;            } else if (event.getCode() == KeyCode.LEFT  || event.getCode() == KeyCode.A) {&#10;                leftAction();&#10;            } else if (event.getCode() == KeyCode.RIGHT || event.getCode() == KeyCode.D) {&#10;                rightAction();&#10;            }&#10;        });&#10;&#10;    }&#10;&#10;    // restart按钮事件&#10;    @FXML&#10;    public void restartAction() {&#10;&#10;        if (isAuto) {&#10;            return;&#10;        }&#10;&#10;        grid = new Grid(size, mode);&#10;        grid.init(gamePane);&#10;        Paint.draw(grid, gamePane, size, 11, 11);&#10;        PopUpAnimation appear = new PopUpAnimation(grid);&#10;        appear.makeTransition();&#10;&#10;        appear.play(Animation.CombineType.GROUP);&#10;        upDateScore(scoreLabel, grid);&#10;&#10;        upDateStep(stepLabel, grid);&#10;        scene.getRoot().requestFocus();&#10;&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;        timeLabel.textProperty().bind(timer.messageProperty());&#10;        timer.reset();&#10;&#10;    }&#10;&#10;    // undo按钮事件&#10;    @FXML&#10;    public void undoAction() {&#10;&#10;        if (isAuto) {&#10;            return;&#10;        }&#10;&#10;        grid.undo();&#10;        Paint.draw(grid, gamePane, size, 11, 11);&#10;        upDateScore(scoreLabel, grid);&#10;&#10;        upDateStep(stepLabel, grid);&#10;        scene.getRoot().requestFocus();&#10;&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;        // 计时器继续&#10;        if (timer != null) {&#10;            timer.continueTimer();&#10;        }&#10;    }&#10;&#10;    // 按键事件&#10;    @FXML&#10;    public void upAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.UP);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;        makeAnimation(Direction.UP, distanceMap);&#10;//        slide.setOnFinished(event -&gt; {&#10;//&#10;//            GameUI.draw(grid, gamePane, size);&#10;//            updateState();&#10;//        });&#10;//&#10;//        slide.play(CombineType.GROUP);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void downAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.DOWN);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;&#10;        makeAnimation(Direction.DOWN, distanceMap);&#10;&#10;    }&#10;&#10;    private void makeAnimation(Direction down, Map&lt;Tile, Double&gt; distanceMap) {&#10;        // 移除键盘焦点&#10;        isEnd = true;&#10;&#10;        // 播放音效&#10;        moveSound.stop();&#10;        moveSound.play();&#10;&#10;        MoveAnimation slide = new MoveAnimation(down, distanceMap);&#10;        slide.makeTransition();&#10;        slide.setOnFinished(event1 -&gt; {&#10;&#10;            Paint.draw(grid, gamePane, size, 11, 11);&#10;            PopUpAnimation appear = new PopUpAnimation(grid);&#10;            appear.makeTransition();&#10;            BounceAnimation bounce = new BounceAnimation(grid);&#10;            bounce.makeTransition();&#10;            ParallelTransition group1 = new ParallelTransition(bounce.getGroupTransition(), appear.getGroupTransition());&#10;            group1.play();&#10;&#10;            // 恢复键盘焦点&#10;            isEnd = false;&#10;&#10;            updateState();&#10;            scene.getRoot().requestFocus();&#10;&#10;&#10;        });&#10;        slide.play(Animation.CombineType.GROUP);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void leftAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.LEFT);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;&#10;        makeAnimation(Direction.LEFT, distanceMap);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void rightAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.RIGHT);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;&#10;        makeAnimation(Direction.RIGHT, distanceMap);&#10;&#10;    }&#10;&#10;    // 获取gamePane参数&#10;    public double getGamePaneWidth() {&#10;        return gamePane.getWidth();&#10;    }&#10;&#10;    public double getLayoutX() {&#10;        return gamePane.getLayoutX();&#10;    }&#10;&#10;    public double getLayoutY() {&#10;        return gamePane.getLayoutY();&#10;    }&#10;&#10;    /**&#10;     * @description: 初始化游戏板方法&#10;     * @param gamePane 游戏板&#10;     * @param size 游戏板大小&#10;     * @return void&#10;     */&#10;    public static void initGamePane(AnchorPane gamePane, int size) {&#10;&#10;        gamePane.getChildren().clear();&#10;&#10;        Paint.drawBackground(gamePane);&#10;        Paint.drawGrid(gamePane, size, 11.0, 11.0);&#10;    }&#10;&#10;    public void updateState() {&#10;        upDateScore(scoreLabel, grid);&#10;&#10;        upDateStep(stepLabel, grid);&#10;&#10;        if (grid.isWin()) {&#10;            isWin = true;&#10;&#10;            isAuto = false;&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/auto.png&quot;, 22.0, 22.0, false, false)));&#10;            timer.stop();&#10;            winAction();&#10;        } else if (grid.isOver()) {&#10;            isLose = true;&#10;&#10;            isAuto = false;&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/auto.png&quot;, 22.0, 22.0, false, false)));&#10;            timer.stop();&#10;            loseAction();&#10;        }&#10;    }&#10;&#10;&#10;    //&#10;    public void simulateMove(Direction direction) {&#10;        switch (direction) {&#10;            case UP:&#10;                upAction();&#10;                break;&#10;            case DOWN:&#10;                downAction();&#10;                break;&#10;            case LEFT:&#10;                leftAction();&#10;                break;&#10;            case RIGHT:&#10;                rightAction();&#10;                break;&#10;        }&#10;    }&#10;&#10;    // 更新分数&#10;    private static void upDateScore(Label scoreLabel, Grid grid) {&#10;        // int incScore = grid.getScore() - score;&#10;        score = grid.getScore();&#10;        scoreLabel.setText(&quot;&quot; + score);&#10;    }&#10;&#10;    // 更新步数&#10;    private static void upDateStep(Label stepLabel, Grid grid) {&#10;        stepLabel.setText(&quot;&quot; + grid.getStep());&#10;    }&#10;&#10;    private void winAction() {&#10;&#10;        isEnd = true;&#10;        // 绘制胜利界面&#10;        StackPane winPane = new StackPane();&#10;        winPane.setLayoutX(0);&#10;        winPane.setLayoutY(0);&#10;        winPane.setPrefSize(gamePane.getWidth(), gamePane.getHeight());&#10;        winPane.setStyle(&quot;&quot;&quot;&#10;                -fx-background-color: rgba(255,220,80,0.73);&#10;                -fx-background-radius: 3px;&#10;                -fx-background-size: cover;&#10;                -fx-background-position: center;&#10;                &quot;&quot;&quot;);&#10;        winPane.toFront();&#10;        winPane.setOpacity(0.6);&#10;&#10;        VBox winBox = new VBox();&#10;        winBox.setAlignment(javafx.geometry.Pos.CENTER);&#10;        // 显示“YOU WIN”标签&#10;        Label winLabel = new Label(&quot;YOU WIN&quot;);&#10;        winLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 50px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #ffffff;&#10;                -fx-effect: dropshadow(three-pass-box, #776e65, 10, 0, 0, 0);&quot;&quot;&quot;);&#10;        // 显示分数&#10;        Label scoreLabel = new Label(&quot;Score: &quot; + score);&#10;        scoreLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 30px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #776e65;&quot;&quot;&quot;);&#10;        // 添加到父节点&#10;        winBox.getChildren().addAll(winLabel, scoreLabel);&#10;        winPane.getChildren().add(winBox);&#10;&#10;        gamePane.getChildren().add(winPane);&#10;    }&#10;&#10;    private void loseAction() {&#10;&#10;        isEnd = true;&#10;        // 绘制失败界面&#10;        StackPane losePane = new StackPane();&#10;        losePane.setLayoutX(0);&#10;        losePane.setLayoutY(0);&#10;        losePane.setPrefSize(gamePane.getWidth(), gamePane.getHeight());&#10;        losePane.setStyle(&quot;&quot;&quot;&#10;                -fx-background-color: rgba(113,113,113,0.94);&#10;                -fx-background-radius: 3px;&#10;                -fx-background-size: cover;&#10;                -fx-background-position: center;&#10;                &quot;&quot;&quot;);&#10;        losePane.toFront();&#10;        losePane.setOpacity(0.6);&#10;&#10;        VBox loseBox = new VBox();&#10;        loseBox.setAlignment(javafx.geometry.Pos.CENTER);&#10;        // 显示“YOU LOSE”标签&#10;        Label loseLabel = new Label(&quot;YOU LOSE&quot;);&#10;        loseLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 50px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #1e1d1d;&#10;                -fx-effect: dropshadow(three-pass-box, #776e65, 10, 0, 0, 0);&quot;&quot;&quot;);&#10;        // 显示分数&#10;        Label scoreLabel = new Label(&quot;Score: &quot; + score);&#10;        scoreLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 30px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #3a3a3a;&#10;                &quot;&quot;&quot;);&#10;        // 添加到父节点&#10;        loseBox.getChildren().addAll(loseLabel, scoreLabel);&#10;        losePane.getChildren().add(loseBox);&#10;&#10;        gamePane.getChildren().add(losePane);&#10;    }&#10;&#10;    @FXML&#10;    private void manualSave() {&#10;&#10;        if (saveName.getText().isEmpty()) {&#10;            Tooltip tooltip = new Tooltip(&quot;Please enter a save name!&quot;);&#10;            tooltip.setFont(Font.font(&quot;Arial&quot;, 12));&#10;            tooltip.setShowDuration(javafx.util.Duration.millis(2000));&#10;            tooltip.setAutoHide(true);&#10;            tooltip.show(saveName, 1620, 500);&#10;            return;&#10;        }&#10;&#10;        // 保存存档&#10;        // 保存用户信息&#10;        Save.State state;&#10;        if (isWin) {&#10;            state = Save.State.WIN;&#10;        } else if (isLose) {&#10;            state = Save.State.LOSE;&#10;        } else {&#10;            state = Save.State.IN_PROGRESS;&#10;        }&#10;        &#10;        // 保存到User对应存档路径&#10;        currentSave = new Save(saveName.getText(), grid, state, new Time(timeLabel.getText()), new Date(), new Time());&#10;&#10;        try {&#10;            Saver.saveToJson(Saver.buildGson(currentSave), currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;);&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(&quot;Save failed!&quot;);&#10;        }&#10;    }&#10;&#10;    private void autoSave() {&#10;        // 保存存档&#10;        // 保存用户信息&#10;        Save.State state;&#10;        if (isWin) {&#10;            state = Save.State.WIN;&#10;        } else if (isLose) {&#10;            state = Save.State.LOSE;&#10;        } else {&#10;            state = Save.State.IN_PROGRESS;&#10;        }&#10;        if (currentSave == null) {&#10;            String saveName = &quot;Auto &quot; + LocalDate.now();&#10;            currentSave = new Save(saveName, grid, state, startTime);&#10;            // 保存到User对应存档路径&#10;            try {&#10;                Saver.saveToJson(Saver.buildGson(currentSave), currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;);&#10;            } catch (IOException e) {&#10;                throw new RuntimeException(&quot;Save failed!&quot;); // 后改&#10;            }&#10;            &#10;        } else {&#10;            currentSave = new Save(currentSave.saveName, grid, state, new Time(timeLabel.getText()));&#10;            // 保存到User对应存档路径&#10;            try {&#10;                Saver.saveToJson(Saver.buildGson(currentSave), currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;);&#10;            } catch (IOException e) {&#10;                throw new RuntimeException(&quot;Save failed!&quot;); // 后改&#10;            }&#10;        }&#10;    }&#10;&#10;    // 初始化GameUI&#10;    public static void init(int size, int mode) {&#10;        GameUI.setSize(size);&#10;        GameUI.setMode(mode);&#10;        GameUI.setBoard(new Grid(size, mode));&#10;        GameUI.setStartTime(Time.ZERO);&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;    }&#10;&#10;    public static void init(int size, int mode, User user) {&#10;        GameUI.setSize(size);&#10;        GameUI.setMode(mode);&#10;        GameUI.setBoard(new Grid(size, mode));&#10;        GameUI.setStartTime(Time.ZERO);&#10;        currentUser = user;&#10;        currentSave = null;&#10;        isLoad = false;&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;    }&#10;&#10;    private static void setStartTime(Time startTime) {&#10;        GameUI.startTime = startTime;&#10;    }&#10;&#10;&#10;    public static void init(int mode, int[][] board, Time startTime) {&#10;        GameUI.setSize(board.length);&#10;        GameUI.setMode(mode);&#10;        GameUI.setBoard(new Grid(board, mode));&#10;        GameUI.setStartTime(startTime);&#10;        isLoad = true;&#10;        isEnd = false;&#10;&#10;&#10;    }&#10;&#10;    public static void init(Grid grid, Time startTime) {&#10;        GameUI.setBoard(grid);&#10;        GameUI.setSize(grid.getSize());&#10;        GameUI.setMode(grid.getMode());&#10;        GameUI.setStartTime(startTime);&#10;        isLoad = true;&#10;    }&#10;&#10;    // 读取存档时&#10;    public static void init(Grid grid, Time startTime, Save save) {&#10;        GameUI.setBoard(grid);&#10;        GameUI.setSize(grid.getSize());&#10;        GameUI.setMode(grid.getMode());&#10;        GameUI.setStartTime(startTime);&#10;        if (!PublicResource.isEmpty()) {&#10;            currentUser = PublicResource.getLoginUser();&#10;        }&#10;        GameUI.currentSave = save;&#10;        isLoad = true;&#10;        isEnd = false;&#10;&#10;        isWin = false;&#10;        isLose = false;&#10;    }&#10;&#10;    // 运行GameUI&#10;    public static void run() {&#10;        Platform.runLater(() -&gt; {&#10;            GameUI gameUI = new GameUI();&#10;            Stage primaryStage = new Stage();&#10;            try {&#10;                gameUI.start(primaryStage);&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;    }&#10;&#10;    public static void start() {&#10;        launch();&#10;    }&#10;&#10;&#10;    public static Grid getGrid() {&#10;        return grid;&#10;    }&#10;&#10;    public void autoAction() {&#10;&#10;        if (isWin || isLose) {&#10;            return;&#10;        }&#10;&#10;        if (isAuto) {&#10;            isAuto = false;&#10;            aiThread.endFlag = true;&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/auto.png&quot;, 22.0, 22.0, false, false)));&#10;            scene.getRoot().requestFocus();&#10;&#10;        } else {&#10;            isAuto = true;&#10;            aiThread = new AIThread(grid, this);&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/pause.png&quot;, 22.0, 22.0, false, false)));&#10;            new Thread(aiThread).start();&#10;&#10;        }&#10;    }&#10;&#10;    public void exitAction() {&#10;        if (isAuto) return;&#10;        timer.stop();&#10;        isEnd = true;&#10;        SlipToSidebarAnimation slip = new SlipToSidebarAnimation(mainPane,sidebarPane);&#10;        slip.makeTransition();&#10;        slip.play(Animation.CombineType.GROUP);&#10;        // 为mainPane添加毛玻璃效果&#10;        BoxBlur blur = new BoxBlur(10, 10, 3);&#10;        mainPane.setEffect(blur);&#10;&#10;        exitPane.setVisible(true);&#10;        try {&#10;            AnchorPane mask = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(&quot;/FXView/MaskPane.fxml&quot;)));&#10;            gameInterface.getChildren().add(mask);&#10;            scene.lookup(&quot;#arrow&quot;).setOnMousePressed(event -&gt; {&#10;                slipReform();&#10;                gameInterface.getChildren().remove(mask);&#10;            });&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public void returnToMain() {&#10;        MainUI.init(null);&#10;        MainUI.run();&#10;        exitGame();&#10;    }&#10;&#10;    public void exitGame() {&#10;        // 弹出确认窗口 TODO&#10;        Stage stage = (Stage) gamePane.getScene().getWindow();&#10;        stage.close();&#10;    }&#10;&#10;    public void slipReform() {&#10;        SlipToSidebarAnimation slip = new SlipToSidebarAnimation(mainPane,sidebarPane,true);&#10;        slip.makeTransition();&#10;        slip.play(Animation.CombineType.GROUP);&#10;        mainPane.setEffect(null);&#10;        exitPane.setVisible(false);&#10;        savePane.setVisible(false);&#10;        isEnd = false;&#10;        if (!isWin &amp;&amp; !isLose) timer.continueTimer();&#10;    }&#10;&#10;    public void saveAction() {&#10;        if (isAuto || currentUser == null) return;&#10;        timer.stop();&#10;        isEnd = true;&#10;        SlipToSidebarAnimation slip = new SlipToSidebarAnimation(mainPane,sidebarPane);&#10;        slip.makeTransition();&#10;        slip.play(Animation.CombineType.GROUP);&#10;        // 为mainPane添加毛玻璃效果&#10;        BoxBlur blur = new BoxBlur(10, 10, 3);&#10;        mainPane.setEffect(blur);&#10;&#10;        savePane.setVisible(true);&#10;        try {&#10;            AnchorPane mask = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(&quot;/FXView/MaskPane.fxml&quot;)));&#10;            gameInterface.getChildren().add(mask);&#10;            if (currentSave != null) {&#10;                saveName.setText(currentSave.saveName);&#10;            }&#10;            scene.lookup(&quot;#arrow&quot;).setOnMousePressed(event -&gt; {&#10;                slipReform();&#10;                gameInterface.getChildren().remove(mask);&#10;            });&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;}" />
    <MESSAGE value="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;&#10;import static ai.AlphaDuo.directionNum;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (directionNum == 0) {&#10;            return Direction.UP;&#10;        } else if (directionNum == 1) {&#10;            return Direction.DOWN;&#10;        } else if (directionNum == 2) {&#10;            return Direction.LEFT;&#10;        } else if (directionNum == 3) {&#10;            return Direction.RIGHT;&#10;        }&#10;        return null;&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(100);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                move(getDirection());&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}" />
    <option name="LAST_COMMIT_MESSAGE" value="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;&#10;import static ai.AlphaDuo.directionNum;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (directionNum == 0) {&#10;            return Direction.UP;&#10;        } else if (directionNum == 1) {&#10;            return Direction.DOWN;&#10;        } else if (directionNum == 2) {&#10;            return Direction.LEFT;&#10;        } else if (directionNum == 3) {&#10;            return Direction.RIGHT;&#10;        }&#10;        return null;&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(100);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                move(getDirection());&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}" />
  </component>
  <component name="XDebuggerManager">
    <watches-manager>
      <configuration name="Application">
        <watch expression="Saver.makeDir(savePath)" language="JAVA" />
      </configuration>
    </watches-manager>
  </component>
</project>