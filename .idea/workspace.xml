<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="0e72e034-aaa7-4046-b7f9-bbfb7b65012a" name="更改" comment="package model;&#10;&#10;import util.Saver;&#10;import java.io.IOException;&#10;import java.util.*;&#10;&#10;public class UserManager {&#10;    private List&lt;User&gt; userList;&#10;    private static final String savePath = &quot;src/main/resources/general&quot;;&#10;&#10;    public UserManager() {&#10;        try {&#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        userList = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public User register(String name, String password) throws IOException {&#10;        User user = null;&#10;        if (hasUser(name)) { // 检查用户是否已存在&#10;            throw new IllegalArgumentException(&quot;This user has existed!&quot;);&#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&#10;            throw new IllegalArgumentException(&quot;Invalid password! Your password should contain at least 8 characters.&quot;);&#10;        } else if (name.equals(&quot;&quot;) || password.equals(&quot;&quot;)) { // 检查用户名和密码是否为空&#10;            throw new IllegalArgumentException(&quot;Username or password cannot be empty!&quot;);&#10;        } else {&#10;            user = new User(name, password, &quot;src/main/resources/savedata/&quot; + name);&#10;            Saver.makeDir(user.getPath());&#10;            userList.add(user);&#10;            // 保存用户信息&#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &quot;/userInfo.json&quot;);&#10;        }&#10;        return user;&#10;    }&#10;    public User login(String name, String password) {&#10;        if (userList.isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        } else {&#10;            for (int i = 0; i &lt; userList.size(); i++) {&#10;                if (userList.get(i).getName().equals(name)) {&#10;                    if (!userList.get(i).getPassword().equals(password)) {&#10;                        throw new IllegalArgumentException(&quot;Incorrect password!&quot;);&#10;                    } else {&#10;                        return userList.get(i);&#10;                    }&#10;                }&#10;            }&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        }&#10;    }&#10;    public void deleteUser(User user) throws IOException {&#10;        userList.remove(user);&#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&#10;    }&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length() &gt;= 8) {&#10;            isPasswordValid = true;&#10;        }&#10;        return isPasswordValid;&#10;    }&#10;}">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/ai/AlphaDuo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ai/AlphaDuo.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="FxmlFile" />
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 3
}</component>
  <component name="ProjectId" id="2gtu7oicMVlC4ncjClqNBKWrEOa" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="openDirectoriesWithSingleClick" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;CJKProject__202405&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;,
    &quot;应用程序.GameApplication.executor&quot;: &quot;Run&quot;,
    &quot;应用程序.Main.executor&quot;: &quot;Run&quot;,
    &quot;应用程序.TestMainUIApplication.executor&quot;: &quot;Run&quot;
  }
}</component>
  <component name="RunManager" selected="应用程序.TestMainUIApplication">
    <configuration name="GameApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="GameApplication" />
      <module name="Reach2048" />
      <option name="VM_PARAMETERS" value="--module-path &quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Main" />
      <module name="Reach2048" />
      <option name="VM_PARAMETERS" value="--module-path &quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="TestMainUIApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="TestMainUIApplication" />
      <module name="Reach2048" />
      <option name="VM_PARAMETERS" value="--module-path &quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="应用程序.Main" />
      <item itemvalue="应用程序.GameApplication" />
      <item itemvalue="应用程序.TestMainUIApplication" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="应用程序.TestMainUIApplication" />
        <item itemvalue="应用程序.Main" />
        <item itemvalue="应用程序.GameApplication" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="项目级" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task id="LOCAL-00001" summary="Implement multiple player management and save function">
      <option name="closed" value="true" />
      <created>1716480870818</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1716480870818</updated>
    </task>
    <task active="true" id="Default" summary="默认任务">
      <changelist id="0e72e034-aaa7-4046-b7f9-bbfb7b65012a" name="更改" comment="Implement multiple player management and save function" />
      <created>1716529031291</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1716529031291</updated>
      <workItem from="1716529033750" duration="10429000" />
      <workItem from="1716611936691" duration="178000" />
      <workItem from="1716612124380" duration="25412000" />
      <workItem from="1716702297487" duration="11293000" />
      <workItem from="1716713611578" duration="244000" />
      <workItem from="1716717775841" duration="4053000" />
    </task>
    <task id="LOCAL-00002" summary="Modify GameUI">
      <option name="closed" value="true" />
      <created>1716632335330</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1716632335331</updated>
    </task>
    <task id="LOCAL-00003" summary="Modify GameUI with sidebar">
      <option name="closed" value="true" />
      <created>1716650344770</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1716650344770</updated>
    </task>
    <task id="LOCAL-00004" summary="Modify Game Runtime logic">
      <option name="closed" value="true" />
      <created>1716711603420</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1716711603420</updated>
    </task>
    <task id="LOCAL-00005" summary="Apply auto save func">
      <option name="closed" value="true" />
      <created>1716713655208</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1716713655208</updated>
    </task>
    <task id="LOCAL-00006" summary="Version:1.0.0">
      <option name="closed" value="true" />
      <created>1716717860221</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1716717860221</updated>
    </task>
    <task id="LOCAL-00007" summary="Version:1.0.0">
      <option name="closed" value="true" />
      <created>1716721663720</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1716721663720</updated>
    </task>
    <task id="LOCAL-00008" summary="Version:1.0.0">
      <option name="closed" value="true" />
      <created>1716983228635</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1716983228635</updated>
    </task>
    <task id="LOCAL-00009" summary="package model;&#10;&#10;import util.Saver;&#10;import java.io.IOException;&#10;import java.util.*;&#10;&#10;public class UserManager {&#10;    private List&lt;User&gt; userList;&#10;    private static final String savePath = &quot;src/main/resources/general&quot;;&#10;&#10;    public UserManager() {&#10;        try {&#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        userList = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public User register(String name, String password) throws IOException {&#10;        User user = null;&#10;        if (hasUser(name)) { // 检查用户是否已存在&#10;            throw new IllegalArgumentException(&quot;This user has existed!&quot;);&#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&#10;            throw new IllegalArgumentException(&quot;Invalid password! Your password should contain at least 8 characters.&quot;);&#10;        } else if (name.equals(&quot;&quot;) || password.equals(&quot;&quot;)) { // 检查用户名和密码是否为空&#10;            throw new IllegalArgumentException(&quot;Username or password cannot be empty!&quot;);&#10;        } else {&#10;            user = new User(name, password, &quot;src/main/resources/savedata/&quot; + name);&#10;            Saver.makeDir(user.getPath());&#10;            userList.add(user);&#10;            // 保存用户信息&#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &quot;/userInfo.json&quot;);&#10;        }&#10;        return user;&#10;    }&#10;    public User login(String name, String password) {&#10;        if (userList.isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        } else {&#10;            for (int i = 0; i &lt; userList.size(); i++) {&#10;                if (userList.get(i).getName().equals(name)) {&#10;                    if (!userList.get(i).getPassword().equals(password)) {&#10;                        throw new IllegalArgumentException(&quot;Incorrect password!&quot;);&#10;                    } else {&#10;                        return userList.get(i);&#10;                    }&#10;                }&#10;            }&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        }&#10;    }&#10;    public void deleteUser(User user) throws IOException {&#10;        userList.remove(user);&#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&#10;    }&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length() &gt;= 8) {&#10;            isPasswordValid = true;&#10;        }&#10;        return isPasswordValid;&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716983259273</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1716983259273</updated>
    </task>
    <option name="localTasksCounter" value="10" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Merge branch 'dev' into zaddle" />
    <MESSAGE value="Add move sound effect and apply custom font" />
    <MESSAGE value="Implement multiple player management and save function" />
    <MESSAGE value="Modify GameUI" />
    <MESSAGE value="Modify GameUI with sidebar" />
    <MESSAGE value="Modify Game Runtime logic" />
    <MESSAGE value="Apply auto save func" />
    <MESSAGE value="Version:1.0.0" />
    <MESSAGE value="package model;&#10;&#10;import util.Saver;&#10;import java.io.IOException;&#10;import java.util.*;&#10;&#10;public class UserManager {&#10;    private List&lt;User&gt; userList;&#10;    private static final String savePath = &quot;src/main/resources/general&quot;;&#10;&#10;    public UserManager() {&#10;        try {&#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        userList = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public User register(String name, String password) throws IOException {&#10;        User user = null;&#10;        if (hasUser(name)) { // 检查用户是否已存在&#10;            throw new IllegalArgumentException(&quot;This user has existed!&quot;);&#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&#10;            throw new IllegalArgumentException(&quot;Invalid password! Your password should contain at least 8 characters.&quot;);&#10;        } else if (name.equals(&quot;&quot;) || password.equals(&quot;&quot;)) { // 检查用户名和密码是否为空&#10;            throw new IllegalArgumentException(&quot;Username or password cannot be empty!&quot;);&#10;        } else {&#10;            user = new User(name, password, &quot;src/main/resources/savedata/&quot; + name);&#10;            Saver.makeDir(user.getPath());&#10;            userList.add(user);&#10;            // 保存用户信息&#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &quot;/userInfo.json&quot;);&#10;        }&#10;        return user;&#10;    }&#10;    public User login(String name, String password) {&#10;        if (userList.isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        } else {&#10;            for (int i = 0; i &lt; userList.size(); i++) {&#10;                if (userList.get(i).getName().equals(name)) {&#10;                    if (!userList.get(i).getPassword().equals(password)) {&#10;                        throw new IllegalArgumentException(&quot;Incorrect password!&quot;);&#10;                    } else {&#10;                        return userList.get(i);&#10;                    }&#10;                }&#10;            }&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        }&#10;    }&#10;    public void deleteUser(User user) throws IOException {&#10;        userList.remove(user);&#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&#10;    }&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length() &gt;= 8) {&#10;            isPasswordValid = true;&#10;        }&#10;        return isPasswordValid;&#10;    }&#10;}" />
    <option name="LAST_COMMIT_MESSAGE" value="package model;&#10;&#10;import util.Saver;&#10;import java.io.IOException;&#10;import java.util.*;&#10;&#10;public class UserManager {&#10;    private List&lt;User&gt; userList;&#10;    private static final String savePath = &quot;src/main/resources/general&quot;;&#10;&#10;    public UserManager() {&#10;        try {&#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        userList = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public User register(String name, String password) throws IOException {&#10;        User user = null;&#10;        if (hasUser(name)) { // 检查用户是否已存在&#10;            throw new IllegalArgumentException(&quot;This user has existed!&quot;);&#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&#10;            throw new IllegalArgumentException(&quot;Invalid password! Your password should contain at least 8 characters.&quot;);&#10;        } else if (name.equals(&quot;&quot;) || password.equals(&quot;&quot;)) { // 检查用户名和密码是否为空&#10;            throw new IllegalArgumentException(&quot;Username or password cannot be empty!&quot;);&#10;        } else {&#10;            user = new User(name, password, &quot;src/main/resources/savedata/&quot; + name);&#10;            Saver.makeDir(user.getPath());&#10;            userList.add(user);&#10;            // 保存用户信息&#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &quot;/userInfo.json&quot;);&#10;        }&#10;        return user;&#10;    }&#10;    public User login(String name, String password) {&#10;        if (userList.isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        } else {&#10;            for (int i = 0; i &lt; userList.size(); i++) {&#10;                if (userList.get(i).getName().equals(name)) {&#10;                    if (!userList.get(i).getPassword().equals(password)) {&#10;                        throw new IllegalArgumentException(&quot;Incorrect password!&quot;);&#10;                    } else {&#10;                        return userList.get(i);&#10;                    }&#10;                }&#10;            }&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        }&#10;    }&#10;    public void deleteUser(User user) throws IOException {&#10;        userList.remove(user);&#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&#10;    }&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length() &gt;= 8) {&#10;            isPasswordValid = true;&#10;        }&#10;        return isPasswordValid;&#10;    }&#10;}" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/util/Saver.java</url>
          <line>34</line>
          <option name="timeStamp" value="42" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/controller/GameUI.java</url>
          <line>218</line>
          <option name="timeStamp" value="58" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/controller/GameUI.java</url>
          <line>216</line>
          <option name="timeStamp" value="59" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/controller/GameUI.java</url>
          <line>214</line>
          <option name="timeStamp" value="60" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/controller/GameUI.java</url>
          <line>212</line>
          <option name="timeStamp" value="61" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/controller/GameUI.java</url>
          <line>551</line>
          <option name="timeStamp" value="62" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/controller/GameUI.java</url>
          <line>330</line>
          <option name="timeStamp" value="66" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/controller/LoadingAnimation.java</url>
          <line>132</line>
          <option name="timeStamp" value="68" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-method">
          <url>file://$PROJECT_DIR$/src/main/java/controller/MainUI.java</url>
          <line>64</line>
          <properties class="controller.MainUI">
            <option name="EMULATED" value="true" />
            <option name="WATCH_EXIT" value="false" />
          </properties>
          <option name="timeStamp" value="47" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
    <watches-manager>
      <configuration name="Application">
        <watch expression="Saver.makeDir(savePath)" language="JAVA" />
        <watch expression="currentIndex" language="JAVA" />
        <watch expression="MainUI.downPanes" language="JAVA" custom="controller.MainUI" />
      </configuration>
    </watches-manager>
  </component>
</project>