<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="0e72e034-aaa7-4046-b7f9-bbfb7b65012a" name="更改" comment="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project version=&quot;4&quot;&gt;&#10;  &lt;component name=&quot;AutoImportSettings&quot;&gt;&#10;    &lt;option name=&quot;autoReloadType&quot; value=&quot;SELECTIVE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ChangeListManager&quot;&gt;&#10;    &lt;list default=&quot;true&quot; id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; afterDir=&quot;false&quot; /&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&quot; afterDir=&quot;false&quot; /&gt;&#10;    &lt;/list&gt;&#10;    &lt;option name=&quot;SHOW_DIALOG&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_CONFLICTS&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;LAST_RESOLUTION&quot; value=&quot;IGNORE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;FileTemplateManagerImpl&quot;&gt;&#10;    &lt;option name=&quot;RECENT_TEMPLATES&quot;&gt;&#10;      &lt;list&gt;&#10;        &lt;option value=&quot;FxmlFile&quot; /&gt;&#10;        &lt;option value=&quot;Interface&quot; /&gt;&#10;        &lt;option value=&quot;Class&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Git.Settings&quot;&gt;&#10;    &lt;option name=&quot;RECENT_BRANCH_BY_REPOSITORY&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;D:/IdeaProjects/Gaming2048&quot; value=&quot;dev&quot; /&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;    &lt;option name=&quot;RECENT_GIT_ROOT_PATH&quot; value=&quot;D:/IdeaProjects/Gaming2048&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;GitHubPullRequestSearchHistory&quot;&gt;&lt;![CDATA[{&#10;  &quot;lastFilter&quot;: {&#10;    &quot;state&quot;: &quot;OPEN&quot;,&#10;    &quot;assignee&quot;: &quot;SUSTechCJK2023&quot;&#10;  }&#10;}]]&gt;&lt;/component&gt;&#10;  &lt;component name=&quot;GithubPullRequestsUISettings&quot;&gt;&#10;    &lt;option name=&quot;selectedUrlAndAccountId&quot;&gt;&#10;      &lt;UrlAndAccount&gt;&#10;        &lt;option name=&quot;accountId&quot; value=&quot;8dc58497-80d5-4549-a909-aef707eb60dd&quot; /&gt;&#10;        &lt;option name=&quot;url&quot; value=&quot;https://github.com/zaddle55/Gaming2048.git&quot; /&gt;&#10;      &lt;/UrlAndAccount&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;MarkdownSettingsMigration&quot;&gt;&#10;    &lt;option name=&quot;stateVersion&quot; value=&quot;1&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectColorInfo&quot;&gt;{&#10;  &amp;quot;associatedIndex&amp;quot;: 3&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;ProjectId&quot; id=&quot;2gtu7oicMVlC4ncjClqNBKWrEOa&quot; /&gt;&#10;  &lt;component name=&quot;ProjectLevelVcsManager&quot; settingsEditedManually=&quot;true&quot;&gt;&#10;    &lt;ConfirmationsSetting value=&quot;2&quot; id=&quot;Add&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectViewState&quot;&gt;&#10;    &lt;option name=&quot;hideEmptyMiddlePackages&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;openDirectoriesWithSingleClick&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;showLibraryContents&quot; value=&quot;true&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;PropertiesComponent&quot;&gt;{&#10;  &amp;quot;keyToString&amp;quot;: {&#10;    &amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;git-widget-placeholder&amp;quot;: &amp;quot;CJKProject__202405&amp;quot;,&#10;    &amp;quot;kotlin-language-version-configured&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.detected.package.eslint&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.selected.package.eslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;node.js.selected.package.tslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;nodejs_package_manager_path&amp;quot;: &amp;quot;npm&amp;quot;,&#10;    &amp;quot;settings.editor.selected.configurable&amp;quot;: &amp;quot;preferences.pluginManager&amp;quot;,&#10;    &amp;quot;vue.rearranger.settings.migration&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;应用程序.GameApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.Main.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.TestMainUIApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;&#10;  }&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;RunManager&quot;&gt;&#10;    &lt;configuration name=&quot;TestMainUIApplication&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot;&gt;&#10;      &lt;option name=&quot;ALTERNATIVE_JRE_PATH&quot; value=&quot;21&quot; /&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;Main&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;PROGRAM_PARAMETERS&quot; value=&quot;--module-path     &amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;recent_temporary&gt;&#10;      &lt;list&gt;&#10;        &lt;item itemvalue=&quot;应用程序.TestMainUIApplication&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/recent_temporary&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;SpellCheckerSettings&quot; RuntimeDictionaries=&quot;0&quot; Folders=&quot;0&quot; CustomDictionaries=&quot;0&quot; DefaultDictionary=&quot;项目级&quot; UseSingleDictionary=&quot;true&quot; transferred=&quot;true&quot; /&gt;&#10;  &lt;component name=&quot;TaskManager&quot;&gt;&#10;    &lt;task id=&quot;LOCAL-00001&quot; summary=&quot;Implement multiple player management and save function&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716480870818&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00001&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00001&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716480870818&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task active=&quot;true&quot; id=&quot;Default&quot; summary=&quot;默认任务&quot;&gt;&#10;      &lt;changelist id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;Implement multiple player management and save function&quot; /&gt;&#10;      &lt;created&gt;1716529031291&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;updated&gt;1716529031291&lt;/updated&gt;&#10;      &lt;workItem from=&quot;1716529033750&quot; duration=&quot;10429000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716611936691&quot; duration=&quot;178000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716612124380&quot; duration=&quot;25412000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716702297487&quot; duration=&quot;11293000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716713611578&quot; duration=&quot;244000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716717775841&quot; duration=&quot;4053000&quot; /&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00002&quot; summary=&quot;Modify GameUI&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716632335330&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00002&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00002&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716632335331&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00003&quot; summary=&quot;Modify GameUI with sidebar&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716650344770&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00003&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00003&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716650344770&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00004&quot; summary=&quot;Modify Game Runtime logic&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716711603420&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00004&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00004&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716711603420&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00005&quot; summary=&quot;Apply auto save func&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716713655208&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00005&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00005&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716713655208&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00006&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716717860221&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00006&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00006&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716717860221&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00007&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716721663720&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00007&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00007&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716721663720&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00008&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983228635&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00008&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00008&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983228635&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00009&quot; summary=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983259273&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00009&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00009&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983259273&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00010&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot; selected=&amp;quot;应用程序.TestMainUIApplication&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;GameApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;Main&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;list&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;216&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;59&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;212&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;61&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;330&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;66&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;132&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;68&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983305328&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00010&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00010&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983305328&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00011&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    protected static double evaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static double evaluate(Direction d) {&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles = 0;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                for (int a=0; j+a &amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;#10;                }&amp;#10;                for (int b=0; i+b &amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyD += 1;&amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyU += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        int emptyTile = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;#10;                    emptyTile += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        return evaluationScore;&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluate(Direction.DOWN) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluate(Direction.LEFT) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluate(Direction.RIGHT) &amp;gt; evaluate(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716985108246&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00011&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00011&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716985108246&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00012&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        Random random = new Random();&amp;#10;        int randomNum = random.nextInt(4);&amp;#10;        if (randomNum == 0) {&amp;#10;            move(Direction.UP);&amp;#10;        } else if (randomNum == 1) {&amp;#10;            move(Direction.DOWN);&amp;#10;        } else if (randomNum == 2) {&amp;#10;            move(Direction.LEFT);&amp;#10;        } else {&amp;#10;            move(Direction.RIGHT);&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716988945401&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00012&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00012&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716988945401&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00013&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716990905746&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00013&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00013&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716990905746&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00014&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716991858020&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00014&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00014&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716991858020&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00015&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716995533105&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00015&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00015&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716995533105&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00016&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717031088690&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00016&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00016&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717031088690&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00017&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717031151193&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00017&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00017&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717031151193&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00018&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032087165&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00018&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00018&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032087165&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00019&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_BRANCH_BY_REPOSITORY&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; value=&amp;quot;dev&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GitHubPullRequestSearchHistory&amp;quot;&amp;gt;&amp;lt;![CDATA[{&amp;#10;  &amp;quot;lastFilter&amp;quot;: {&amp;#10;    &amp;quot;state&amp;quot;: &amp;quot;OPEN&amp;quot;,&amp;#10;    &amp;quot;assignee&amp;quot;: &amp;quot;SUSTechCJK2023&amp;quot;&amp;#10;  }&amp;#10;}]]&amp;gt;&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GithubPullRequestsUISettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;selectedUrlAndAccountId&amp;quot;&amp;gt;&amp;#10;      &amp;lt;UrlAndAccount&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;accountId&amp;quot; value=&amp;quot;8dc58497-80d5-4549-a909-aef707eb60dd&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;url&amp;quot; value=&amp;quot;https://github.com/zaddle55/Gaming2048.git&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/UrlAndAccount&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;ALTERNATIVE_JRE_PATH&amp;quot; value=&amp;quot;21&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;PROGRAM_PARAMETERS&amp;quot; value=&amp;quot;--module-path     &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00010&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983305328&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983305328&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00011&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716985108246&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716985108246&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00012&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716988945401&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716988945401&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00013&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716990905746&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716990905746&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00014&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716991858020&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716991858020&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00015&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716995533105&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716995533105&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00016&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031088690&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031088690&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00017&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031151193&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031151193&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00018&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717032087165&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717032087165&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;19&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;evaluateDirection(direction)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;getDirection()&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032118536&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00019&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00019&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032118536&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00020&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    // 为每种移动方向“评分”，哪种方向评分最高，采取哪种方向移动&amp;#10;    protected static double upEvaluationScore = 0;&amp;#10;    protected static double downEvaluationScore = 0;&amp;#10;    protected static double leftEvaluationScore = 0;&amp;#10;    protected static double rightEvaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.5; // 单调性权重&amp;#10;    protected static final double smoothWeight = -0.2; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.5; // 总空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static void evaluate() {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        // 1. 单调性评估&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j+1 &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyR += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyL += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (monotonyL * monotonyWeight);&amp;#10;        rightEvaluationScore += (monotonyR * monotonyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i+1 &amp;lt; GameUI.getGrid().getSize(); i += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;lt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyD += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;gt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyU += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (monotonyU * monotonyWeight);&amp;#10;        downEvaluationScore += (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        // 2. 平滑性评估&amp;#10;        int smoothU = 0;&amp;#10;        int smoothD = 0;&amp;#10;        int smoothL = 0;&amp;#10;        int smoothR = 0;&amp;#10;        for (int i=1; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i-1][j] != 0)) {&amp;#10;                    smoothU += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize() - 1; i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+1][j] != 0)) {&amp;#10;                    smoothD += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=1; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j-1] != 0)) {&amp;#10;                    smoothL += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize() - 1; j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+1] != 0)) {&amp;#10;                    smoothR += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += smoothU * smoothWeight;&amp;#10;        downEvaluationScore += smoothD * smoothWeight;&amp;#10;        leftEvaluationScore += smoothL * smoothWeight;&amp;#10;        rightEvaluationScore += smoothR * smoothWeight;&amp;#10;        // 找连续的同数值格子个数&amp;#10;        int numOfEqualTiles;&amp;#10;        int equalU = 0;&amp;#10;        int equalD = 0;&amp;#10;        int equalL = 0;&amp;#10;        int equalR = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a+1] == GameUI.getGrid().getBoard()[i][j+a])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalL += 1;&amp;#10;                        equalR += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (equalL * smoothWeight * (-10));&amp;#10;        rightEvaluationScore += (equalR * smoothWeight * (-10));&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a+1][j] == GameUI.getGrid().getBoard()[i+a][j])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalU += 1;&amp;#10;                        equalD += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (equalU * smoothWeight * (-10));&amp;#10;        downEvaluationScore += (equalD * smoothWeight * (-10));&amp;#10;&amp;#10;        // 3. 总空格数评估&amp;#10;        int numOfEmptyTiles;&amp;#10;        int emptyRow = 0;&amp;#10;        int emptyColumn = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i][j+a] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyRow += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        rightEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; i+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+a][j] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyColumn += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;        downEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;    }&amp;#10;    protected static double evaluateDirection(Direction d) {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        evaluate();&amp;#10;        if (d == Direction.UP) {&amp;#10;            return upEvaluationScore;&amp;#10;        } else if (d == Direction.DOWN) {&amp;#10;            return downEvaluationScore;&amp;#10;        } else if (d == Direction.LEFT) {&amp;#10;            return leftEvaluationScore;&amp;#10;        } else if (d == Direction.RIGHT) {&amp;#10;            return rightEvaluationScore;&amp;#10;        } else {&amp;#10;            return 0;&amp;#10;        }&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluateDirection(Direction.DOWN) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.LEFT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.RIGHT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032140325&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00020&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00020&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032140325&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00021&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717034510817&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00021&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00021&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717034510817&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00022&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717034529581&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00022&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00022&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717034529581&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;option name=&quot;localTasksCounter&quot; value=&quot;23&quot; /&gt;&#10;    &lt;servers /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;TypeScriptGeneratedFilesManager&quot;&gt;&#10;    &lt;option name=&quot;version&quot; value=&quot;3&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Vcs.Log.Tabs.Properties&quot;&gt;&#10;    &lt;option name=&quot;TAB_STATES&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;MAIN&quot;&gt;&#10;          &lt;value&gt;&#10;            &lt;State /&gt;&#10;          &lt;/value&gt;&#10;        &lt;/entry&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;VcsManagerConfiguration&quot;&gt;&#10;    &lt;MESSAGE value=&quot;Merge branch 'dev' into zaddle&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Add move sound effect and apply custom font&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Implement multiple player management and save function&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI with sidebar&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify Game Runtime logic&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Apply auto save func&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Version:1.0.0&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot; selected=&amp;quot;应用程序.TestMainUIApplication&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;GameApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;Main&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;list&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;216&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;59&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;212&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;61&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;330&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;66&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;132&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;68&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    protected static double evaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static double evaluate(Direction d) {&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles = 0;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                for (int a=0; j+a &amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;#10;                }&amp;#10;                for (int b=0; i+b &amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyD += 1;&amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyU += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        int emptyTile = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;#10;                    emptyTile += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        return evaluationScore;&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluate(Direction.DOWN) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluate(Direction.LEFT) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluate(Direction.RIGHT) &amp;gt; evaluate(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        Random random = new Random();&amp;#10;        int randomNum = random.nextInt(4);&amp;#10;        if (randomNum == 0) {&amp;#10;            move(Direction.UP);&amp;#10;        } else if (randomNum == 1) {&amp;#10;            move(Direction.DOWN);&amp;#10;        } else if (randomNum == 2) {&amp;#10;            move(Direction.LEFT);&amp;#10;        } else {&amp;#10;            move(Direction.RIGHT);&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_BRANCH_BY_REPOSITORY&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; value=&amp;quot;dev&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GitHubPullRequestSearchHistory&amp;quot;&amp;gt;&amp;lt;![CDATA[{&amp;#10;  &amp;quot;lastFilter&amp;quot;: {&amp;#10;    &amp;quot;state&amp;quot;: &amp;quot;OPEN&amp;quot;,&amp;#10;    &amp;quot;assignee&amp;quot;: &amp;quot;SUSTechCJK2023&amp;quot;&amp;#10;  }&amp;#10;}]]&amp;gt;&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GithubPullRequestsUISettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;selectedUrlAndAccountId&amp;quot;&amp;gt;&amp;#10;      &amp;lt;UrlAndAccount&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;accountId&amp;quot; value=&amp;quot;8dc58497-80d5-4549-a909-aef707eb60dd&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;url&amp;quot; value=&amp;quot;https://github.com/zaddle55/Gaming2048.git&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/UrlAndAccount&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;ALTERNATIVE_JRE_PATH&amp;quot; value=&amp;quot;21&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;PROGRAM_PARAMETERS&amp;quot; value=&amp;quot;--module-path     &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00010&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983305328&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983305328&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00011&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716985108246&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716985108246&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00012&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716988945401&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716988945401&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00013&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716990905746&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716990905746&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00014&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716991858020&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716991858020&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00015&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716995533105&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716995533105&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00016&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031088690&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031088690&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00017&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031151193&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031151193&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00018&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717032087165&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717032087165&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;19&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;evaluateDirection(direction)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;getDirection()&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    // 为每种移动方向“评分”，哪种方向评分最高，采取哪种方向移动&amp;#10;    protected static double upEvaluationScore = 0;&amp;#10;    protected static double downEvaluationScore = 0;&amp;#10;    protected static double leftEvaluationScore = 0;&amp;#10;    protected static double rightEvaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.5; // 单调性权重&amp;#10;    protected static final double smoothWeight = -0.2; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.5; // 总空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static void evaluate() {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        // 1. 单调性评估&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j+1 &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyR += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyL += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (monotonyL * monotonyWeight);&amp;#10;        rightEvaluationScore += (monotonyR * monotonyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i+1 &amp;lt; GameUI.getGrid().getSize(); i += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;lt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyD += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;gt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyU += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (monotonyU * monotonyWeight);&amp;#10;        downEvaluationScore += (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        // 2. 平滑性评估&amp;#10;        int smoothU = 0;&amp;#10;        int smoothD = 0;&amp;#10;        int smoothL = 0;&amp;#10;        int smoothR = 0;&amp;#10;        for (int i=1; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i-1][j] != 0)) {&amp;#10;                    smoothU += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize() - 1; i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+1][j] != 0)) {&amp;#10;                    smoothD += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=1; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j-1] != 0)) {&amp;#10;                    smoothL += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize() - 1; j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+1] != 0)) {&amp;#10;                    smoothR += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += smoothU * smoothWeight;&amp;#10;        downEvaluationScore += smoothD * smoothWeight;&amp;#10;        leftEvaluationScore += smoothL * smoothWeight;&amp;#10;        rightEvaluationScore += smoothR * smoothWeight;&amp;#10;        // 找连续的同数值格子个数&amp;#10;        int numOfEqualTiles;&amp;#10;        int equalU = 0;&amp;#10;        int equalD = 0;&amp;#10;        int equalL = 0;&amp;#10;        int equalR = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a+1] == GameUI.getGrid().getBoard()[i][j+a])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalL += 1;&amp;#10;                        equalR += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (equalL * smoothWeight * (-10));&amp;#10;        rightEvaluationScore += (equalR * smoothWeight * (-10));&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a+1][j] == GameUI.getGrid().getBoard()[i+a][j])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalU += 1;&amp;#10;                        equalD += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (equalU * smoothWeight * (-10));&amp;#10;        downEvaluationScore += (equalD * smoothWeight * (-10));&amp;#10;&amp;#10;        // 3. 总空格数评估&amp;#10;        int numOfEmptyTiles;&amp;#10;        int emptyRow = 0;&amp;#10;        int emptyColumn = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i][j+a] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyRow += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        rightEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; i+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+a][j] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyColumn += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;        downEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;    }&amp;#10;    protected static double evaluateDirection(Direction d) {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        evaluate();&amp;#10;        if (d == Direction.UP) {&amp;#10;            return upEvaluationScore;&amp;#10;        } else if (d == Direction.DOWN) {&amp;#10;            return downEvaluationScore;&amp;#10;        } else if (d == Direction.LEFT) {&amp;#10;            return leftEvaluationScore;&amp;#10;        } else if (d == Direction.RIGHT) {&amp;#10;            return rightEvaluationScore;&amp;#10;        } else {&amp;#10;            return 0;&amp;#10;        }&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluateDirection(Direction.DOWN) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.LEFT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.RIGHT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;option name=&quot;LAST_COMMIT_MESSAGE&quot; value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;XDebuggerManager&quot;&gt;&#10;    &lt;breakpoint-manager&gt;&#10;      &lt;breakpoints&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&lt;/url&gt;&#10;          &lt;line&gt;34&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;42&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;218&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;58&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;214&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;60&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;550&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;62&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-method&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&lt;/url&gt;&#10;          &lt;line&gt;64&lt;/line&gt;&#10;          &lt;properties class=&quot;controller.MainUI&quot;&gt;&#10;            &lt;option name=&quot;EMULATED&quot; value=&quot;true&quot; /&gt;&#10;            &lt;option name=&quot;WATCH_EXIT&quot; value=&quot;false&quot; /&gt;&#10;          &lt;/properties&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;47&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;      &lt;/breakpoints&gt;&#10;    &lt;/breakpoint-manager&gt;&#10;    &lt;watches-manager&gt;&#10;      &lt;configuration name=&quot;Application&quot;&gt;&#10;        &lt;watch expression=&quot;Saver.makeDir(savePath)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;currentIndex&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;MainUI.downPanes&quot; language=&quot;JAVA&quot; custom=&quot;controller.MainUI&quot; /&gt;&#10;        &lt;watch expression=&quot;evaluateDirection(direction)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;getDirection()&quot; language=&quot;JAVA&quot; /&gt;&#10;      &lt;/configuration&gt;&#10;    &lt;/watches-manager&gt;&#10;  &lt;/component&gt;&#10;&lt;/project&gt;">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/ai/AlphaDuo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ai/AlphaDuo.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="FxmlFile" />
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="dev" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;SUSTechCJK2023&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">
    <option name="selectedUrlAndAccountId">
      <UrlAndAccount>
        <option name="accountId" value="8dc58497-80d5-4549-a909-aef707eb60dd" />
        <option name="url" value="https://github.com/zaddle55/Gaming2048.git" />
      </UrlAndAccount>
    </option>
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 3
}</component>
  <component name="ProjectId" id="2gtu7oicMVlC4ncjClqNBKWrEOa" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="openDirectoriesWithSingleClick" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;CJKProject__202405&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;,
    &quot;应用程序.GameApplication.executor&quot;: &quot;Run&quot;,
    &quot;应用程序.Main.executor&quot;: &quot;Run&quot;,
    &quot;应用程序.TestMainUIApplication.executor&quot;: &quot;Run&quot;
  }
}</component>
  <component name="RunManager">
    <configuration name="TestMainUIApplication" type="Application" factoryName="Application">
      <option name="ALTERNATIVE_JRE_PATH" value="21" />
      <option name="MAIN_CLASS_NAME" value="Main" />
      <module name="Reach2048" />
      <option name="PROGRAM_PARAMETERS" value="--module-path     &quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="应用程序.TestMainUIApplication" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="项目级" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task id="LOCAL-00001" summary="Implement multiple player management and save function">
      <option name="closed" value="true" />
      <created>1716480870818</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1716480870818</updated>
    </task>
    <task active="true" id="Default" summary="默认任务">
      <changelist id="0e72e034-aaa7-4046-b7f9-bbfb7b65012a" name="更改" comment="Implement multiple player management and save function" />
      <created>1716529031291</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1716529031291</updated>
      <workItem from="1716529033750" duration="10429000" />
      <workItem from="1716611936691" duration="178000" />
      <workItem from="1716612124380" duration="25412000" />
      <workItem from="1716702297487" duration="11293000" />
      <workItem from="1716713611578" duration="244000" />
      <workItem from="1716717775841" duration="4053000" />
    </task>
    <task id="LOCAL-00002" summary="Modify GameUI">
      <option name="closed" value="true" />
      <created>1716632335330</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1716632335331</updated>
    </task>
    <task id="LOCAL-00003" summary="Modify GameUI with sidebar">
      <option name="closed" value="true" />
      <created>1716650344770</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1716650344770</updated>
    </task>
    <task id="LOCAL-00004" summary="Modify Game Runtime logic">
      <option name="closed" value="true" />
      <created>1716711603420</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1716711603420</updated>
    </task>
    <task id="LOCAL-00005" summary="Apply auto save func">
      <option name="closed" value="true" />
      <created>1716713655208</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1716713655208</updated>
    </task>
    <task id="LOCAL-00006" summary="Version:1.0.0">
      <option name="closed" value="true" />
      <created>1716717860221</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1716717860221</updated>
    </task>
    <task id="LOCAL-00007" summary="Version:1.0.0">
      <option name="closed" value="true" />
      <created>1716721663720</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1716721663720</updated>
    </task>
    <task id="LOCAL-00008" summary="Version:1.0.0">
      <option name="closed" value="true" />
      <created>1716983228635</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1716983228635</updated>
    </task>
    <task id="LOCAL-00009" summary="package model;&#10;&#10;import util.Saver;&#10;import java.io.IOException;&#10;import java.util.*;&#10;&#10;public class UserManager {&#10;    private List&lt;User&gt; userList;&#10;    private static final String savePath = &quot;src/main/resources/general&quot;;&#10;&#10;    public UserManager() {&#10;        try {&#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        userList = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public User register(String name, String password) throws IOException {&#10;        User user = null;&#10;        if (hasUser(name)) { // 检查用户是否已存在&#10;            throw new IllegalArgumentException(&quot;This user has existed!&quot;);&#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&#10;            throw new IllegalArgumentException(&quot;Invalid password! Your password should contain at least 8 characters.&quot;);&#10;        } else if (name.equals(&quot;&quot;) || password.equals(&quot;&quot;)) { // 检查用户名和密码是否为空&#10;            throw new IllegalArgumentException(&quot;Username or password cannot be empty!&quot;);&#10;        } else {&#10;            user = new User(name, password, &quot;src/main/resources/savedata/&quot; + name);&#10;            Saver.makeDir(user.getPath());&#10;            userList.add(user);&#10;            // 保存用户信息&#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &quot;/userInfo.json&quot;);&#10;        }&#10;        return user;&#10;    }&#10;    public User login(String name, String password) {&#10;        if (userList.isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        } else {&#10;            for (int i = 0; i &lt; userList.size(); i++) {&#10;                if (userList.get(i).getName().equals(name)) {&#10;                    if (!userList.get(i).getPassword().equals(password)) {&#10;                        throw new IllegalArgumentException(&quot;Incorrect password!&quot;);&#10;                    } else {&#10;                        return userList.get(i);&#10;                    }&#10;                }&#10;            }&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        }&#10;    }&#10;    public void deleteUser(User user) throws IOException {&#10;        userList.remove(user);&#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&#10;    }&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length() &gt;= 8) {&#10;            isPasswordValid = true;&#10;        }&#10;        return isPasswordValid;&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716983259273</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1716983259273</updated>
    </task>
    <task id="LOCAL-00010" summary="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project version=&quot;4&quot;&gt;&#10;  &lt;component name=&quot;AutoImportSettings&quot;&gt;&#10;    &lt;option name=&quot;autoReloadType&quot; value=&quot;SELECTIVE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ChangeListManager&quot;&gt;&#10;    &lt;list default=&quot;true&quot; id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; afterDir=&quot;false&quot; /&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&quot; afterDir=&quot;false&quot; /&gt;&#10;    &lt;/list&gt;&#10;    &lt;option name=&quot;SHOW_DIALOG&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_CONFLICTS&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;LAST_RESOLUTION&quot; value=&quot;IGNORE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;FileTemplateManagerImpl&quot;&gt;&#10;    &lt;option name=&quot;RECENT_TEMPLATES&quot;&gt;&#10;      &lt;list&gt;&#10;        &lt;option value=&quot;FxmlFile&quot; /&gt;&#10;        &lt;option value=&quot;Interface&quot; /&gt;&#10;        &lt;option value=&quot;Class&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Git.Settings&quot;&gt;&#10;    &lt;option name=&quot;RECENT_GIT_ROOT_PATH&quot; value=&quot;D:/IdeaProjects/Gaming2048&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;MarkdownSettingsMigration&quot;&gt;&#10;    &lt;option name=&quot;stateVersion&quot; value=&quot;1&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectColorInfo&quot;&gt;{&#10;  &amp;quot;associatedIndex&amp;quot;: 3&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;ProjectId&quot; id=&quot;2gtu7oicMVlC4ncjClqNBKWrEOa&quot; /&gt;&#10;  &lt;component name=&quot;ProjectLevelVcsManager&quot; settingsEditedManually=&quot;true&quot;&gt;&#10;    &lt;ConfirmationsSetting value=&quot;2&quot; id=&quot;Add&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectViewState&quot;&gt;&#10;    &lt;option name=&quot;hideEmptyMiddlePackages&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;openDirectoriesWithSingleClick&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;showLibraryContents&quot; value=&quot;true&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;PropertiesComponent&quot;&gt;{&#10;  &amp;quot;keyToString&amp;quot;: {&#10;    &amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;git-widget-placeholder&amp;quot;: &amp;quot;CJKProject__202405&amp;quot;,&#10;    &amp;quot;kotlin-language-version-configured&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.detected.package.eslint&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.selected.package.eslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;node.js.selected.package.tslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;nodejs_package_manager_path&amp;quot;: &amp;quot;npm&amp;quot;,&#10;    &amp;quot;settings.editor.selected.configurable&amp;quot;: &amp;quot;preferences.pluginManager&amp;quot;,&#10;    &amp;quot;vue.rearranger.settings.migration&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;应用程序.GameApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.Main.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.TestMainUIApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;&#10;  }&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;RunManager&quot; selected=&quot;应用程序.TestMainUIApplication&quot;&gt;&#10;    &lt;configuration name=&quot;GameApplication&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot; temporary=&quot;true&quot; nameIsGenerated=&quot;true&quot;&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;GameApplication&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;VM_PARAMETERS&quot; value=&quot;--module-path &amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;configuration name=&quot;Main&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot; temporary=&quot;true&quot; nameIsGenerated=&quot;true&quot;&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;Main&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;VM_PARAMETERS&quot; value=&quot;--module-path &amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;configuration name=&quot;TestMainUIApplication&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot; temporary=&quot;true&quot; nameIsGenerated=&quot;true&quot;&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;TestMainUIApplication&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;VM_PARAMETERS&quot; value=&quot;--module-path &amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;list&gt;&#10;      &lt;item itemvalue=&quot;应用程序.Main&quot; /&gt;&#10;      &lt;item itemvalue=&quot;应用程序.GameApplication&quot; /&gt;&#10;      &lt;item itemvalue=&quot;应用程序.TestMainUIApplication&quot; /&gt;&#10;    &lt;/list&gt;&#10;    &lt;recent_temporary&gt;&#10;      &lt;list&gt;&#10;        &lt;item itemvalue=&quot;应用程序.TestMainUIApplication&quot; /&gt;&#10;        &lt;item itemvalue=&quot;应用程序.Main&quot; /&gt;&#10;        &lt;item itemvalue=&quot;应用程序.GameApplication&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/recent_temporary&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;SpellCheckerSettings&quot; RuntimeDictionaries=&quot;0&quot; Folders=&quot;0&quot; CustomDictionaries=&quot;0&quot; DefaultDictionary=&quot;项目级&quot; UseSingleDictionary=&quot;true&quot; transferred=&quot;true&quot; /&gt;&#10;  &lt;component name=&quot;TaskManager&quot;&gt;&#10;    &lt;task id=&quot;LOCAL-00001&quot; summary=&quot;Implement multiple player management and save function&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716480870818&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00001&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00001&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716480870818&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task active=&quot;true&quot; id=&quot;Default&quot; summary=&quot;默认任务&quot;&gt;&#10;      &lt;changelist id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;Implement multiple player management and save function&quot; /&gt;&#10;      &lt;created&gt;1716529031291&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;updated&gt;1716529031291&lt;/updated&gt;&#10;      &lt;workItem from=&quot;1716529033750&quot; duration=&quot;10429000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716611936691&quot; duration=&quot;178000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716612124380&quot; duration=&quot;25412000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716702297487&quot; duration=&quot;11293000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716713611578&quot; duration=&quot;244000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716717775841&quot; duration=&quot;4053000&quot; /&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00002&quot; summary=&quot;Modify GameUI&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716632335330&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00002&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00002&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716632335331&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00003&quot; summary=&quot;Modify GameUI with sidebar&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716650344770&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00003&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00003&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716650344770&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00004&quot; summary=&quot;Modify Game Runtime logic&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716711603420&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00004&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00004&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716711603420&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00005&quot; summary=&quot;Apply auto save func&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716713655208&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00005&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00005&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716713655208&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00006&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716717860221&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00006&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00006&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716717860221&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00007&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716721663720&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00007&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00007&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716721663720&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00008&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983228635&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00008&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00008&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983228635&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00009&quot; summary=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983259273&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00009&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00009&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983259273&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;option name=&quot;localTasksCounter&quot; value=&quot;10&quot; /&gt;&#10;    &lt;servers /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;TypeScriptGeneratedFilesManager&quot;&gt;&#10;    &lt;option name=&quot;version&quot; value=&quot;3&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Vcs.Log.Tabs.Properties&quot;&gt;&#10;    &lt;option name=&quot;TAB_STATES&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;MAIN&quot;&gt;&#10;          &lt;value&gt;&#10;            &lt;State /&gt;&#10;          &lt;/value&gt;&#10;        &lt;/entry&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;VcsManagerConfiguration&quot;&gt;&#10;    &lt;MESSAGE value=&quot;Merge branch 'dev' into zaddle&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Add move sound effect and apply custom font&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Implement multiple player management and save function&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI with sidebar&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify Game Runtime logic&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Apply auto save func&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Version:1.0.0&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;option name=&quot;LAST_COMMIT_MESSAGE&quot; value=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;XDebuggerManager&quot;&gt;&#10;    &lt;breakpoint-manager&gt;&#10;      &lt;breakpoints&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&lt;/url&gt;&#10;          &lt;line&gt;34&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;42&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;218&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;58&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;216&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;59&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;214&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;60&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;212&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;61&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;551&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;62&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;330&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;66&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&lt;/url&gt;&#10;          &lt;line&gt;132&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;68&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-method&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&lt;/url&gt;&#10;          &lt;line&gt;64&lt;/line&gt;&#10;          &lt;properties class=&quot;controller.MainUI&quot;&gt;&#10;            &lt;option name=&quot;EMULATED&quot; value=&quot;true&quot; /&gt;&#10;            &lt;option name=&quot;WATCH_EXIT&quot; value=&quot;false&quot; /&gt;&#10;          &lt;/properties&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;47&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;      &lt;/breakpoints&gt;&#10;    &lt;/breakpoint-manager&gt;&#10;    &lt;watches-manager&gt;&#10;      &lt;configuration name=&quot;Application&quot;&gt;&#10;        &lt;watch expression=&quot;Saver.makeDir(savePath)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;currentIndex&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;MainUI.downPanes&quot; language=&quot;JAVA&quot; custom=&quot;controller.MainUI&quot; /&gt;&#10;      &lt;/configuration&gt;&#10;    &lt;/watches-manager&gt;&#10;  &lt;/component&gt;&#10;&lt;/project&gt;">
      <option name="closed" value="true" />
      <created>1716983305328</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1716983305328</updated>
    </task>
    <task id="LOCAL-00011" summary="package ai;&#10;&#10;import controller.GameUI;&#10;import util.*;&#10;&#10;/**&#10; * AlphaDuo&#10; * @version: 1.0.0&#10; * @description: AlphaDuo is a class that represents the AI of the game, &quot;duo&quot; means two, which means that the AI is designed for 2048 which uses &quot;2&quot; grids to make larger binary numbers.&#10; * @function: Used to play the game automatically or to provide hints to the player.&#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&#10; */&#10;public class AlphaDuo {&#10;    protected static double evaluationScore = 0;&#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&#10;    protected static int directionNum = 0;&#10;&#10;    protected static double evaluate(Direction d) {&#10;        boolean isIncrease = false;&#10;        int numOfMonotonyTiles = 0;&#10;        int monotonyL = 0;&#10;        int monotonyR = 0;&#10;        int monotonyU = 0;&#10;        int monotonyD = 0;&#10;        for (int i=0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j=0; j &lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&#10;                if ((GameUI.getGrid().getBoard()[i][j] &lt; GameUI.getGrid().getBoard()[i][j+1])) {&#10;                    isIncrease = true;&#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &gt; GameUI.getGrid().getBoard()[i][j+1])) {&#10;                    isIncrease = false;&#10;                }&#10;                if (isIncrease) {&#10;                    for (int a=1; j+a &lt; GameUI.getGrid().getSize(); a++) {&#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&#10;                            numOfMonotonyTiles += 1;&#10;                        } else {&#10;                            isIncrease = false;&#10;                            break;&#10;                        }&#10;                    }&#10;                } else if (!isIncrease) {&#10;                    for (int a=1; j+a &lt; GameUI.getGrid().getSize(); a++) {&#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&#10;                            numOfMonotonyTiles += 1;&#10;                        } else {&#10;                            isIncrease = true;&#10;                            break;&#10;                        }&#10;                    }&#10;                }&#10;                for (int a=0; j+a &lt; GameUI.getGrid().getSize()-1; a++) {&#10;                }&#10;                for (int b=0; i+b &lt; GameUI.getGrid().getSize() - 1; b++) {&#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&#10;                        monotonyD += 1;&#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&#10;                        monotonyU += 1;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&#10;&#10;        int emptyTile = 0;&#10;        for (int i=0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j=0; j &lt; GameUI.getGrid().getSize(); j++) {&#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&#10;                    emptyTile += 1;&#10;                }&#10;            }&#10;        }&#10;        evaluationScore += emptyTile * emptyWeight;&#10;&#10;&#10;&#10;&#10;        return evaluationScore;&#10;    }&#10;    protected static int setDirection() {&#10;        Direction direction = Direction.UP;&#10;        if (evaluate(Direction.DOWN) &gt; evaluate(direction)) {&#10;            direction = Direction.DOWN;&#10;            directionNum = 1;&#10;        }&#10;        if (evaluate(Direction.LEFT) &gt; evaluate(direction)) {&#10;            direction = Direction.LEFT;&#10;            directionNum = 2;&#10;        }&#10;        if (evaluate(Direction.RIGHT) &gt; evaluate(direction)) {&#10;            directionNum = 3;&#10;        }&#10;        return directionNum;&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716985108246</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1716985108246</updated>
    </task>
    <task id="LOCAL-00012" summary="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.setDirection;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        Random random = new Random();&#10;        int randomNum = random.nextInt(4);&#10;        if (randomNum == 0) {&#10;            move(Direction.UP);&#10;        } else if (randomNum == 1) {&#10;            move(Direction.DOWN);&#10;        } else if (randomNum == 2) {&#10;            move(Direction.LEFT);&#10;        } else {&#10;            move(Direction.RIGHT);&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(200);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                move(getDirection());&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716988945401</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1716988945401</updated>
    </task>
    <task id="LOCAL-00013" summary="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.setDirection;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        if (!endFlag) {&#10;            Random random = new Random();&#10;            int randomNum = random.nextInt(4);&#10;            if (randomNum == 0) {&#10;                move(Direction.UP);&#10;            } else if (randomNum == 1) {&#10;                move(Direction.DOWN);&#10;            } else if (randomNum == 2) {&#10;                move(Direction.LEFT);&#10;            } else {&#10;                move(Direction.RIGHT);&#10;            }&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(200);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                move(getDirection());&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716990905746</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1716990905746</updated>
    </task>
    <task id="LOCAL-00014" summary="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.*;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        if (!endFlag) {&#10;            Random random = new Random();&#10;            int randomNum = random.nextInt(4);&#10;            if (randomNum == 0) {&#10;                move(Direction.UP);&#10;            } else if (randomNum == 1) {&#10;                move(Direction.DOWN);&#10;            } else if (randomNum == 2) {&#10;                move(Direction.LEFT);&#10;            } else {&#10;                move(Direction.RIGHT);&#10;            }&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(200);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                move(getDirection());&#10;                upEvaluationScore = 0;&#10;                downEvaluationScore = 0;&#10;                leftEvaluationScore = 0;&#10;                rightEvaluationScore = 0;&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716991858020</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1716991858020</updated>
    </task>
    <task id="LOCAL-00015" summary="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.*;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        if (!endFlag) {&#10;            Random random = new Random();&#10;            int randomNum = random.nextInt(4);&#10;            if (randomNum == 0) {&#10;                move(Direction.UP);&#10;            } else if (randomNum == 1) {&#10;                move(Direction.DOWN);&#10;            } else if (randomNum == 2) {&#10;                move(Direction.LEFT);&#10;            } else {&#10;                move(Direction.RIGHT);&#10;            }&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(1000);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                evaluate();&#10;                move(getDirection());&#10;                upEvaluationScore = 0;&#10;                downEvaluationScore = 0;&#10;                leftEvaluationScore = 0;&#10;                rightEvaluationScore = 0;&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716995533105</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1716995533105</updated>
    </task>
    <task id="LOCAL-00016" summary="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.*;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        if (!endFlag) {&#10;            Random random = new Random();&#10;            int randomNum = random.nextInt(4);&#10;            if (randomNum == 0) {&#10;                move(Direction.UP);&#10;            } else if (randomNum == 1) {&#10;                move(Direction.DOWN);&#10;            } else if (randomNum == 2) {&#10;                move(Direction.LEFT);&#10;            } else {&#10;                move(Direction.RIGHT);&#10;            }&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(1000);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                evaluate();&#10;                move(getDirection());&#10;                upEvaluationScore = 0;&#10;                downEvaluationScore = 0;&#10;                leftEvaluationScore = 0;&#10;                rightEvaluationScore = 0;&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1717031088690</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1717031088690</updated>
    </task>
    <task id="LOCAL-00017" summary="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.*;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        if (!endFlag) {&#10;            Random random = new Random();&#10;            int randomNum = random.nextInt(4);&#10;            if (randomNum == 0) {&#10;                move(Direction.UP);&#10;            } else if (randomNum == 1) {&#10;                move(Direction.DOWN);&#10;            } else if (randomNum == 2) {&#10;                move(Direction.LEFT);&#10;            } else {&#10;                move(Direction.RIGHT);&#10;            }&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(200);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                evaluate();&#10;                move(getDirection());&#10;                upEvaluationScore = 0;&#10;                downEvaluationScore = 0;&#10;                leftEvaluationScore = 0;&#10;                rightEvaluationScore = 0;&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1717031151193</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1717031151193</updated>
    </task>
    <task id="LOCAL-00018" summary="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project version=&quot;4&quot;&gt;&#10;  &lt;component name=&quot;ExternalStorageConfigurationManager&quot; enabled=&quot;true&quot; /&gt;&#10;  &lt;component name=&quot;MavenProjectsManager&quot;&gt;&#10;    &lt;option name=&quot;originalFiles&quot;&gt;&#10;      &lt;list&gt;&#10;        &lt;option value=&quot;D:/IdeaProjects/Gaming2048/src/pom.xml&quot; /&gt;&#10;        &lt;option value=&quot;D:/IdeaProjects/Gaming2048/pom.xml&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectRootManager&quot; version=&quot;2&quot; languageLevel=&quot;JDK_17&quot; default=&quot;true&quot; project-jdk-name=&quot;21&quot; project-jdk-type=&quot;JavaSDK&quot;&gt;&#10;    &lt;output url=&quot;file://D:/IdeaProjects/Gaming2048/out&quot; /&gt;&#10;  &lt;/component&gt;&#10;&lt;/project&gt;">
      <option name="closed" value="true" />
      <created>1717032087165</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1717032087165</updated>
    </task>
    <task id="LOCAL-00019" summary="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project version=&quot;4&quot;&gt;&#10;  &lt;component name=&quot;AutoImportSettings&quot;&gt;&#10;    &lt;option name=&quot;autoReloadType&quot; value=&quot;SELECTIVE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ChangeListManager&quot;&gt;&#10;    &lt;list default=&quot;true&quot; id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&quot; afterDir=&quot;false&quot; /&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; afterDir=&quot;false&quot; /&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&quot; afterDir=&quot;false&quot; /&gt;&#10;    &lt;/list&gt;&#10;    &lt;option name=&quot;SHOW_DIALOG&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_CONFLICTS&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;LAST_RESOLUTION&quot; value=&quot;IGNORE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;FileTemplateManagerImpl&quot;&gt;&#10;    &lt;option name=&quot;RECENT_TEMPLATES&quot;&gt;&#10;      &lt;list&gt;&#10;        &lt;option value=&quot;FxmlFile&quot; /&gt;&#10;        &lt;option value=&quot;Interface&quot; /&gt;&#10;        &lt;option value=&quot;Class&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Git.Settings&quot;&gt;&#10;    &lt;option name=&quot;RECENT_BRANCH_BY_REPOSITORY&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;D:/IdeaProjects/Gaming2048&quot; value=&quot;dev&quot; /&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;    &lt;option name=&quot;RECENT_GIT_ROOT_PATH&quot; value=&quot;D:/IdeaProjects/Gaming2048&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;GitHubPullRequestSearchHistory&quot;&gt;&lt;![CDATA[{&#10;  &quot;lastFilter&quot;: {&#10;    &quot;state&quot;: &quot;OPEN&quot;,&#10;    &quot;assignee&quot;: &quot;SUSTechCJK2023&quot;&#10;  }&#10;}]]&gt;&lt;/component&gt;&#10;  &lt;component name=&quot;GithubPullRequestsUISettings&quot;&gt;&#10;    &lt;option name=&quot;selectedUrlAndAccountId&quot;&gt;&#10;      &lt;UrlAndAccount&gt;&#10;        &lt;option name=&quot;accountId&quot; value=&quot;8dc58497-80d5-4549-a909-aef707eb60dd&quot; /&gt;&#10;        &lt;option name=&quot;url&quot; value=&quot;https://github.com/zaddle55/Gaming2048.git&quot; /&gt;&#10;      &lt;/UrlAndAccount&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;MarkdownSettingsMigration&quot;&gt;&#10;    &lt;option name=&quot;stateVersion&quot; value=&quot;1&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectColorInfo&quot;&gt;{&#10;  &amp;quot;associatedIndex&amp;quot;: 3&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;ProjectId&quot; id=&quot;2gtu7oicMVlC4ncjClqNBKWrEOa&quot; /&gt;&#10;  &lt;component name=&quot;ProjectLevelVcsManager&quot; settingsEditedManually=&quot;true&quot;&gt;&#10;    &lt;ConfirmationsSetting value=&quot;2&quot; id=&quot;Add&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectViewState&quot;&gt;&#10;    &lt;option name=&quot;hideEmptyMiddlePackages&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;openDirectoriesWithSingleClick&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;showLibraryContents&quot; value=&quot;true&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;PropertiesComponent&quot;&gt;{&#10;  &amp;quot;keyToString&amp;quot;: {&#10;    &amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;git-widget-placeholder&amp;quot;: &amp;quot;CJKProject__202405&amp;quot;,&#10;    &amp;quot;kotlin-language-version-configured&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.detected.package.eslint&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.selected.package.eslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;node.js.selected.package.tslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;nodejs_package_manager_path&amp;quot;: &amp;quot;npm&amp;quot;,&#10;    &amp;quot;settings.editor.selected.configurable&amp;quot;: &amp;quot;preferences.pluginManager&amp;quot;,&#10;    &amp;quot;vue.rearranger.settings.migration&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;应用程序.GameApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.Main.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.TestMainUIApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;&#10;  }&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;RunManager&quot;&gt;&#10;    &lt;configuration name=&quot;TestMainUIApplication&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot;&gt;&#10;      &lt;option name=&quot;ALTERNATIVE_JRE_PATH&quot; value=&quot;21&quot; /&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;Main&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;PROGRAM_PARAMETERS&quot; value=&quot;--module-path     &amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;recent_temporary&gt;&#10;      &lt;list&gt;&#10;        &lt;item itemvalue=&quot;应用程序.TestMainUIApplication&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/recent_temporary&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;SpellCheckerSettings&quot; RuntimeDictionaries=&quot;0&quot; Folders=&quot;0&quot; CustomDictionaries=&quot;0&quot; DefaultDictionary=&quot;项目级&quot; UseSingleDictionary=&quot;true&quot; transferred=&quot;true&quot; /&gt;&#10;  &lt;component name=&quot;TaskManager&quot;&gt;&#10;    &lt;task id=&quot;LOCAL-00001&quot; summary=&quot;Implement multiple player management and save function&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716480870818&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00001&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00001&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716480870818&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task active=&quot;true&quot; id=&quot;Default&quot; summary=&quot;默认任务&quot;&gt;&#10;      &lt;changelist id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;Implement multiple player management and save function&quot; /&gt;&#10;      &lt;created&gt;1716529031291&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;updated&gt;1716529031291&lt;/updated&gt;&#10;      &lt;workItem from=&quot;1716529033750&quot; duration=&quot;10429000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716611936691&quot; duration=&quot;178000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716612124380&quot; duration=&quot;25412000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716702297487&quot; duration=&quot;11293000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716713611578&quot; duration=&quot;244000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716717775841&quot; duration=&quot;4053000&quot; /&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00002&quot; summary=&quot;Modify GameUI&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716632335330&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00002&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00002&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716632335331&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00003&quot; summary=&quot;Modify GameUI with sidebar&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716650344770&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00003&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00003&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716650344770&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00004&quot; summary=&quot;Modify Game Runtime logic&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716711603420&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00004&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00004&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716711603420&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00005&quot; summary=&quot;Apply auto save func&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716713655208&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00005&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00005&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716713655208&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00006&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716717860221&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00006&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00006&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716717860221&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00007&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716721663720&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00007&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00007&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716721663720&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00008&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983228635&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00008&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00008&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983228635&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00009&quot; summary=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983259273&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00009&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00009&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983259273&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00010&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot; selected=&amp;quot;应用程序.TestMainUIApplication&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;GameApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;Main&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;list&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;216&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;59&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;212&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;61&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;330&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;66&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;132&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;68&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983305328&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00010&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00010&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983305328&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00011&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    protected static double evaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static double evaluate(Direction d) {&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles = 0;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                for (int a=0; j+a &amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;#10;                }&amp;#10;                for (int b=0; i+b &amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyD += 1;&amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyU += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        int emptyTile = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;#10;                    emptyTile += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        return evaluationScore;&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluate(Direction.DOWN) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluate(Direction.LEFT) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluate(Direction.RIGHT) &amp;gt; evaluate(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716985108246&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00011&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00011&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716985108246&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00012&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        Random random = new Random();&amp;#10;        int randomNum = random.nextInt(4);&amp;#10;        if (randomNum == 0) {&amp;#10;            move(Direction.UP);&amp;#10;        } else if (randomNum == 1) {&amp;#10;            move(Direction.DOWN);&amp;#10;        } else if (randomNum == 2) {&amp;#10;            move(Direction.LEFT);&amp;#10;        } else {&amp;#10;            move(Direction.RIGHT);&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716988945401&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00012&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00012&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716988945401&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00013&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716990905746&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00013&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00013&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716990905746&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00014&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716991858020&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00014&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00014&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716991858020&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00015&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716995533105&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00015&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00015&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716995533105&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00016&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717031088690&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00016&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00016&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717031088690&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00017&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717031151193&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00017&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00017&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717031151193&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00018&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032087165&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00018&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00018&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032087165&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;option name=&quot;localTasksCounter&quot; value=&quot;19&quot; /&gt;&#10;    &lt;servers /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;TypeScriptGeneratedFilesManager&quot;&gt;&#10;    &lt;option name=&quot;version&quot; value=&quot;3&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Vcs.Log.Tabs.Properties&quot;&gt;&#10;    &lt;option name=&quot;TAB_STATES&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;MAIN&quot;&gt;&#10;          &lt;value&gt;&#10;            &lt;State /&gt;&#10;          &lt;/value&gt;&#10;        &lt;/entry&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;VcsManagerConfiguration&quot;&gt;&#10;    &lt;MESSAGE value=&quot;Merge branch 'dev' into zaddle&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Add move sound effect and apply custom font&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Implement multiple player management and save function&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI with sidebar&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify Game Runtime logic&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Apply auto save func&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Version:1.0.0&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot; selected=&amp;quot;应用程序.TestMainUIApplication&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;GameApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;Main&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;list&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;216&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;59&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;212&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;61&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;330&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;66&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;132&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;68&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    protected static double evaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static double evaluate(Direction d) {&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles = 0;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                for (int a=0; j+a &amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;#10;                }&amp;#10;                for (int b=0; i+b &amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyD += 1;&amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyU += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        int emptyTile = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;#10;                    emptyTile += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        return evaluationScore;&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluate(Direction.DOWN) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluate(Direction.LEFT) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluate(Direction.RIGHT) &amp;gt; evaluate(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        Random random = new Random();&amp;#10;        int randomNum = random.nextInt(4);&amp;#10;        if (randomNum == 0) {&amp;#10;            move(Direction.UP);&amp;#10;        } else if (randomNum == 1) {&amp;#10;            move(Direction.DOWN);&amp;#10;        } else if (randomNum == 2) {&amp;#10;            move(Direction.LEFT);&amp;#10;        } else {&amp;#10;            move(Direction.RIGHT);&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;option name=&quot;LAST_COMMIT_MESSAGE&quot; value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;XDebuggerManager&quot;&gt;&#10;    &lt;breakpoint-manager&gt;&#10;      &lt;breakpoints&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&lt;/url&gt;&#10;          &lt;line&gt;34&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;42&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;218&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;58&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;214&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;60&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;551&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;62&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-method&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&lt;/url&gt;&#10;          &lt;line&gt;64&lt;/line&gt;&#10;          &lt;properties class=&quot;controller.MainUI&quot;&gt;&#10;            &lt;option name=&quot;EMULATED&quot; value=&quot;true&quot; /&gt;&#10;            &lt;option name=&quot;WATCH_EXIT&quot; value=&quot;false&quot; /&gt;&#10;          &lt;/properties&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;47&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;      &lt;/breakpoints&gt;&#10;    &lt;/breakpoint-manager&gt;&#10;    &lt;watches-manager&gt;&#10;      &lt;configuration name=&quot;Application&quot;&gt;&#10;        &lt;watch expression=&quot;Saver.makeDir(savePath)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;currentIndex&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;MainUI.downPanes&quot; language=&quot;JAVA&quot; custom=&quot;controller.MainUI&quot; /&gt;&#10;        &lt;watch expression=&quot;evaluateDirection(direction)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;getDirection()&quot; language=&quot;JAVA&quot; /&gt;&#10;      &lt;/configuration&gt;&#10;    &lt;/watches-manager&gt;&#10;  &lt;/component&gt;&#10;&lt;/project&gt;">
      <option name="closed" value="true" />
      <created>1717032118536</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1717032118536</updated>
    </task>
    <task id="LOCAL-00020" summary="package ai;&#10;&#10;import controller.GameUI;&#10;import util.*;&#10;&#10;/**&#10; * AlphaDuo&#10; * @version: 1.0.0&#10; * @description: AlphaDuo is a class that represents the AI of the game, &quot;duo&quot; means two, which means that the AI is designed for 2048 which uses &quot;2&quot; grids to make larger binary numbers.&#10; * @function: Used to play the game automatically or to provide hints to the player.&#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&#10; */&#10;public class AlphaDuo {&#10;    // 为每种移动方向“评分”，哪种方向评分最高，采取哪种方向移动&#10;    protected static double upEvaluationScore = 0;&#10;    protected static double downEvaluationScore = 0;&#10;    protected static double leftEvaluationScore = 0;&#10;    protected static double rightEvaluationScore = 0;&#10;    protected static final double monotonyWeight = 0.5; // 单调性权重&#10;    protected static final double smoothWeight = -0.2; // 平滑性权重&#10;    protected static final double emptyWeight = 0.5; // 总空格数权重&#10;    protected static int directionNum = 0;&#10;&#10;    protected static void evaluate() {&#10;        upEvaluationScore = 0;&#10;        downEvaluationScore = 0;&#10;        leftEvaluationScore = 0;&#10;        rightEvaluationScore = 0;&#10;        // 1. 单调性评估&#10;        boolean isIncrease = false;&#10;        int numOfMonotonyTiles;&#10;        int monotonyL = 0;&#10;        int monotonyR = 0;&#10;        int monotonyU = 0;&#10;        int monotonyD = 0;&#10;        for (int i = 0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j = 0; j+1 &lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&#10;                numOfMonotonyTiles = 0;&#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j] &lt; GameUI.getGrid().getBoard()[i][j+1])) {&#10;                    isIncrease = true;&#10;                } else if ((GameUI.getGrid().getBoard()[i][j+1] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j] &gt; GameUI.getGrid().getBoard()[i][j+1])) {&#10;                    isIncrease = false;&#10;                }&#10;                if (isIncrease) {&#10;                    for (int a = 1; j+a+1 &lt; GameUI.getGrid().getSize(); a++) {&#10;                        if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j+a] &lt; GameUI.getGrid().getBoard()[i][j+a+1])) {&#10;                            numOfMonotonyTiles += 1;&#10;                            monotonyR += 1;&#10;                        } else {&#10;                            isIncrease = false;&#10;                            break;&#10;                        }&#10;                    }&#10;                } else if (!isIncrease) {&#10;                    for (int a = 1; j+a+1 &lt; GameUI.getGrid().getSize(); a++) {&#10;                        if ((GameUI.getGrid().getBoard()[i][j+a+1] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j+a] &gt; GameUI.getGrid().getBoard()[i][j+a+1])) {&#10;                            numOfMonotonyTiles += 1;&#10;                            monotonyL += 1;&#10;                        } else {&#10;                            isIncrease = true;&#10;                            break;&#10;                        }&#10;                    }&#10;                }&#10;                if (numOfMonotonyTiles == 0) {&#10;                    numOfMonotonyTiles += 1;&#10;                }&#10;            }&#10;        }&#10;        leftEvaluationScore += (monotonyL * monotonyWeight);&#10;        rightEvaluationScore += (monotonyR * monotonyWeight);&#10;        for (int j = 0; j &lt; GameUI.getGrid().getSize(); j++) {&#10;            for (int i = 0; i+1 &lt; GameUI.getGrid().getSize(); i += numOfMonotonyTiles) {&#10;                numOfMonotonyTiles = 0;&#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j] &lt; GameUI.getGrid().getBoard()[i+1][j])) {&#10;                    isIncrease = true;&#10;                } else if ((GameUI.getGrid().getBoard()[i+1][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j] &gt; GameUI.getGrid().getBoard()[i+1][j])) {&#10;                    isIncrease = false;&#10;                }&#10;                if (isIncrease) {&#10;                    for (int a = 1; i+a+1 &lt; GameUI.getGrid().getSize(); a++) {&#10;                        if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i+a][j] &lt; GameUI.getGrid().getBoard()[i+a+1][j])) {&#10;                            numOfMonotonyTiles += 1;&#10;                            monotonyD += 1;&#10;                        } else {&#10;                            isIncrease = false;&#10;                            break;&#10;                        }&#10;                    }&#10;                } else if (!isIncrease) {&#10;                    for (int a = 1; i+a+1 &lt; GameUI.getGrid().getSize(); a++) {&#10;                        if ((GameUI.getGrid().getBoard()[i+a+1][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i+a][j] &gt; GameUI.getGrid().getBoard()[i+a+1][j])) {&#10;                            numOfMonotonyTiles += 1;&#10;                            monotonyU += 1;&#10;                        } else {&#10;                            isIncrease = true;&#10;                            break;&#10;                        }&#10;                    }&#10;                }&#10;                if (numOfMonotonyTiles == 0) {&#10;                    numOfMonotonyTiles += 1;&#10;                }&#10;            }&#10;        }&#10;        upEvaluationScore += (monotonyU * monotonyWeight);&#10;        downEvaluationScore += (monotonyD * monotonyWeight);&#10;&#10;        // 2. 平滑性评估&#10;        int smoothU = 0;&#10;        int smoothD = 0;&#10;        int smoothL = 0;&#10;        int smoothR = 0;&#10;        for (int i=1; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j=0; j &lt; GameUI.getGrid().getSize(); j++) {&#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i-1][j] != 0)) {&#10;                    smoothU += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) / GameUI.getGrid().getSize());&#10;                }&#10;            }&#10;        }&#10;        for (int i=0; i &lt; GameUI.getGrid().getSize() - 1; i++) {&#10;            for (int j=0; j &lt; GameUI.getGrid().getSize(); j++) {&#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i+1][j] != 0)) {&#10;                    smoothD += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) / GameUI.getGrid().getSize());&#10;                }&#10;            }&#10;        }&#10;        for (int i=0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j=1; j &lt; GameUI.getGrid().getSize(); j++) {&#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j-1] != 0)) {&#10;                    smoothL += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) / GameUI.getGrid().getSize());&#10;                }&#10;            }&#10;        }&#10;        for (int i=0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j=0; j &lt; GameUI.getGrid().getSize() - 1; j++) {&#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j+1] != 0)) {&#10;                    smoothR += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) / GameUI.getGrid().getSize());&#10;                }&#10;            }&#10;        }&#10;        upEvaluationScore += smoothU * smoothWeight;&#10;        downEvaluationScore += smoothD * smoothWeight;&#10;        leftEvaluationScore += smoothL * smoothWeight;&#10;        rightEvaluationScore += smoothR * smoothWeight;&#10;        // 找连续的同数值格子个数&#10;        int numOfEqualTiles;&#10;        int equalU = 0;&#10;        int equalD = 0;&#10;        int equalL = 0;&#10;        int equalR = 0;&#10;        for (int i = 0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j = 0; j &lt; GameUI.getGrid().getSize(); j += numOfEqualTiles) {&#10;                numOfEqualTiles = 0;&#10;                for (int a = 0; j+a+1 &lt; GameUI.getGrid().getSize(); a++) {&#10;                    if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j+a+1] == GameUI.getGrid().getBoard()[i][j+a])) {&#10;                        numOfEqualTiles += 1;&#10;                        equalL += 1;&#10;                        equalR += 1;&#10;                    } else {&#10;                        break;&#10;                    }&#10;                }&#10;                if (numOfEqualTiles == 0) {&#10;                    numOfEqualTiles += 1;&#10;                }&#10;            }&#10;        }&#10;        leftEvaluationScore += (equalL * smoothWeight * (-10));&#10;        rightEvaluationScore += (equalR * smoothWeight * (-10));&#10;        for (int j = 0; j &lt; GameUI.getGrid().getSize(); j++) {&#10;            for (int i = 0; i &lt; GameUI.getGrid().getSize(); i += numOfEqualTiles) {&#10;                numOfEqualTiles = 0;&#10;                for (int a = 0; i+a+1 &lt; GameUI.getGrid().getSize(); a++) {&#10;                    if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i+a+1][j] == GameUI.getGrid().getBoard()[i+a][j])) {&#10;                        numOfEqualTiles += 1;&#10;                        equalU += 1;&#10;                        equalD += 1;&#10;                    } else {&#10;                        break;&#10;                    }&#10;                }&#10;                if (numOfEqualTiles == 0) {&#10;                    numOfEqualTiles += 1;&#10;                }&#10;            }&#10;        }&#10;        upEvaluationScore += (equalU * smoothWeight * (-10));&#10;        downEvaluationScore += (equalD * smoothWeight * (-10));&#10;&#10;        // 3. 总空格数评估&#10;        int numOfEmptyTiles;&#10;        int emptyRow = 0;&#10;        int emptyColumn = 0;&#10;        for (int i = 0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j = 0; j &lt; GameUI.getGrid().getSize(); j += numOfEmptyTiles) {&#10;                numOfEmptyTiles = 0;&#10;                for (int a = 0; j+a &lt; GameUI.getGrid().getSize(); a++) {&#10;                    if (GameUI.getGrid().getBoard()[i][j+a] == 0) {&#10;                        numOfEmptyTiles += 1;&#10;                        emptyRow += 1;&#10;                    } else {&#10;                        break;&#10;                    }&#10;                }&#10;                if (numOfEmptyTiles == 0) {&#10;                    numOfEmptyTiles += 1;&#10;                }&#10;            }&#10;        }&#10;        leftEvaluationScore += (emptyRow * emptyWeight);&#10;        rightEvaluationScore += (emptyRow * emptyWeight);&#10;        for (int j = 0; j &lt; GameUI.getGrid().getSize(); j++) {&#10;            for (int i = 0; i &lt; GameUI.getGrid().getSize(); i += numOfEmptyTiles) {&#10;                numOfEmptyTiles = 0;&#10;                for (int a = 0; i+a &lt; GameUI.getGrid().getSize(); a++) {&#10;                    if (GameUI.getGrid().getBoard()[i+a][j] == 0) {&#10;                        numOfEmptyTiles += 1;&#10;                        emptyColumn += 1;&#10;                    } else {&#10;                        break;&#10;                    }&#10;                }&#10;                if (numOfEmptyTiles == 0) {&#10;                    numOfEmptyTiles += 1;&#10;                }&#10;            }&#10;        }&#10;        upEvaluationScore += (emptyColumn * emptyWeight);&#10;        downEvaluationScore += (emptyColumn * emptyWeight);&#10;    }&#10;    protected static double evaluateDirection(Direction d) {&#10;        upEvaluationScore = 0;&#10;        downEvaluationScore = 0;&#10;        leftEvaluationScore = 0;&#10;        rightEvaluationScore = 0;&#10;        evaluate();&#10;        if (d == Direction.UP) {&#10;            return upEvaluationScore;&#10;        } else if (d == Direction.DOWN) {&#10;            return downEvaluationScore;&#10;        } else if (d == Direction.LEFT) {&#10;            return leftEvaluationScore;&#10;        } else if (d == Direction.RIGHT) {&#10;            return rightEvaluationScore;&#10;        } else {&#10;            return 0;&#10;        }&#10;    }&#10;    protected static int setDirection() {&#10;        Direction direction = Direction.UP;&#10;        if (evaluateDirection(Direction.DOWN) &gt;= evaluateDirection(direction)) {&#10;            direction = Direction.DOWN;&#10;            directionNum = 1;&#10;        }&#10;        if (evaluateDirection(Direction.LEFT) &gt;= evaluateDirection(direction)) {&#10;            direction = Direction.LEFT;&#10;            directionNum = 2;&#10;        }&#10;        if (evaluateDirection(Direction.RIGHT) &gt;= evaluateDirection(direction)) {&#10;            directionNum = 3;&#10;        }&#10;        return directionNum;&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1717032140325</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1717032140325</updated>
    </task>
    <task id="LOCAL-00021" summary="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import org.jetbrains.annotations.Nullable;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.*;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    @Nullable&#10;    public static Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        if (!endFlag) {&#10;            Random random = new Random();&#10;            int randomNum = random.nextInt(4);&#10;            if (randomNum == 0) {&#10;                move(Direction.UP);&#10;            } else if (randomNum == 1) {&#10;                move(Direction.DOWN);&#10;            } else if (randomNum == 2) {&#10;                move(Direction.LEFT);&#10;            } else {&#10;                move(Direction.RIGHT);&#10;            }&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(200);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                evaluate();&#10;                move(getDirection());&#10;                upEvaluationScore = 0;&#10;                downEvaluationScore = 0;&#10;                leftEvaluationScore = 0;&#10;                rightEvaluationScore = 0;&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1717034510817</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1717034510817</updated>
    </task>
    <task id="LOCAL-00022" summary="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import org.jetbrains.annotations.Nullable;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.*;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    @Nullable&#10;    public static Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        if (!endFlag) {&#10;            Random random = new Random();&#10;            int randomNum = random.nextInt(4);&#10;            if (randomNum == 0) {&#10;                move(Direction.UP);&#10;            } else if (randomNum == 1) {&#10;                move(Direction.DOWN);&#10;            } else if (randomNum == 2) {&#10;                move(Direction.LEFT);&#10;            } else {&#10;                move(Direction.RIGHT);&#10;            }&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(200);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                evaluate();&#10;                move(getDirection());&#10;                upEvaluationScore = 0;&#10;                downEvaluationScore = 0;&#10;                leftEvaluationScore = 0;&#10;                rightEvaluationScore = 0;&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1717034529581</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1717034529581</updated>
    </task>
    <task id="LOCAL-00023" summary="package controller;&#10;&#10;&#10;import ai.AIThread;&#10;import javafx.animation.FadeTransition;&#10;import javafx.animation.ParallelTransition;&#10;import javafx.animation.TranslateTransition;&#10;import javafx.application.Application;&#10;import javafx.application.Platform;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.effect.BoxBlur;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.KeyCode;&#10;import javafx.scene.layout.*;&#10;import javafx.scene.media.MediaPlayer;&#10;import javafx.scene.text.Font;&#10;import javafx.scene.text.Text;&#10;import javafx.stage.Stage;&#10;import javafx.stage.StageStyle;&#10;import javafx.util.Duration;&#10;import model.Save;&#10;import model.Tile;&#10;import model.Grid;&#10;import util.*;&#10;import util.graphic.Paint;&#10;import model.*;&#10;import util.logger.LogType;&#10;import util.logger.Logger;&#10;import util.music.BackgroundMusic;&#10;import ai.AIsolver;&#10;&#10;import java.io.IOException;&#10;import java.util.Map;&#10;import java.util.Objects;&#10;import java.time.LocalDate;&#10;&#10;&#10;public class GameUI extends Application {&#10;&#10;&#10;    public TextField saveName;&#10;    public AnchorPane sidebarPane;&#10;    public GridPane savePane;&#10;    public GridPane exitPane;&#10;    public Text saveText;&#10;    public Button saveConfirm;&#10;    public Text exitText;&#10;    public Button rtmConfirm;&#10;    public Button exitConfirm;&#10;    public GridPane musicPane;&#10;    public ImageView moeState;&#10;    // 节点域&#10;    @FXML&#10;    private AnchorPane gamePane;&#10;    public AnchorPane mainPane;&#10;    @FXML&#10;    private Button restartButton;&#10;    @FXML&#10;    private Button autoButton;&#10;    @FXML&#10;    private AnchorPane gameInterface;&#10;    @FXML&#10;    private Label scoreLabel;&#10;    @FXML&#10;    private Label stepLabel;&#10;    @FXML&#10;    private Label timeLabel;&#10;    private static Scene scene;&#10;&#10;    // 游戏参数&#10;    private static int size;&#10;    private static int mode;&#10;    private static Grid grid;&#10;&#10;    /** 运行时参数 **/&#10;    // 分数&#10;    private static int score = 0;&#10;&#10;    // 是否加载&#10;    private static boolean isLoad = false;&#10;    // 胜利标志&#10;    public static boolean isWin = false;&#10;    // 失败标志&#10;    public static boolean isLose = false;&#10;    // 游戏结束标志&#10;    private static boolean isEnd = false;&#10;    // AI运行标志&#10;    public static boolean isAuto = false;&#10;    // 当前存档&#10;    private static Save currentSave;&#10;    // AI线程&#10;    private static AIThread aiThread;&#10;    private static Timer timer;&#10;    private static Time startTime;&#10;    private static final Duration SAVE_DURATION = Duration.seconds(60); // 自动保存间隔&#10;&#10;    // 游戏资源&#10;    private static User currentUser;&#10;    private static MediaPlayer moveSound;&#10;&#10;    public static int getSize() {&#10;        return size;&#10;    }&#10;&#10;    public static void setSize(int size) {&#10;        GameUI.size = size;&#10;    }&#10;&#10;    public static int getMode() {&#10;        return mode;&#10;    }&#10;&#10;    public static void setMode(int mode) {&#10;        GameUI.mode = mode;&#10;    }&#10;&#10;    public static Grid getBoard() {&#10;        return grid;&#10;    }&#10;&#10;    public static void setBoard(Grid grid) {&#10;        GameUI.grid = grid;&#10;    }&#10;&#10;&#10;    // 游戏界面初始化&#10;    @Override&#10;    public void start(Stage primaryStage) throws Exception {&#10;        Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(&quot;/FXView/GameUI.fxml&quot;)));&#10;        scene = new Scene(root, 1000, 1000);&#10;&#10;        // stage设置&#10;        primaryStage.setTitle(&quot;2048&quot;);&#10;        primaryStage.setResizable(false);&#10;        primaryStage.getIcons().add(new javafx.scene.image.Image(&quot;/assets/titleIcon/favicon-32x32.png&quot;));&#10;        primaryStage.initStyle(StageStyle.UNIFIED);&#10;        primaryStage.setScene(scene);&#10;        primaryStage.show();&#10;&#10;        // 设置焦点&#10;        scene.getRoot().requestFocus();&#10;&#10;        // 获取节点&#10;        gamePane = (AnchorPane) scene.lookup(&quot;#gamePane&quot;);&#10;        scoreLabel = (Label) scene.lookup(&quot;#scoreLabel&quot;);&#10;        stepLabel = (Label) scene.lookup(&quot;#stepLabel&quot;);&#10;        timeLabel = (Label) scene.lookup(&quot;#timeLabel&quot;);&#10;        autoButton = (Button) scene.lookup(&quot;#autoButton&quot;);&#10;        saveName = (TextField) scene.lookup(&quot;#saveName&quot;);&#10;        saveText = (Text) scene.lookup(&quot;#saveText&quot;);&#10;        saveConfirm = (Button) scene.lookup(&quot;#saveConfirm&quot;);&#10;        exitText = (Text) scene.lookup(&quot;#exitText&quot;);&#10;        rtmConfirm = (Button) scene.lookup(&quot;#rtmConfirm&quot;);&#10;        exitConfirm = (Button) scene.lookup(&quot;#exitConfirm&quot;);&#10;        sidebarPane = (AnchorPane) scene.lookup(&quot;#sidebarPane&quot;);&#10;        musicPane = (GridPane) scene.lookup(&quot;#musicPane&quot;);&#10;        mainPane = (AnchorPane) scene.lookup(&quot;#mainPane&quot;);&#10;        moeState = (ImageView) scene.lookup(&quot;#moeState&quot;);&#10;&#10;        // 背景音乐初始化&#10;        BackgroundMusic.initMusicList();&#10;        BackgroundMusic.initMusicView();&#10;        musicPane.add(BackgroundMusic.getMusicView(), 0, 0);&#10;        BackgroundMusic.play();&#10;        // 音效初始化&#10;        if (PublicResource.getResource(&quot;MoveSound&quot;) == null) {&#10;            new Logger(mainPane, &quot;Failed to sound resources&quot;, 720.0, 9.0, LogType.info).show();&#10;        } else {&#10;            moveSound = (MediaPlayer) PublicResource.getResource(&quot;MoveSound&quot;);&#10;        }&#10;        // 字体初始化&#10;        final Font LILITA_18 = Font.loadFont(getClass().getResourceAsStream(&quot;/font/Lilita_One/LilitaOne-Regular.ttf&quot;), 18);&#10;        final Font LILITA_16 = Font.loadFont(getClass().getResourceAsStream(&quot;/font/Lilita_One/LilitaOne-Regular.ttf&quot;), 16);&#10;        saveText.setFont(LILITA_18);&#10;        saveName.setFont(LILITA_16);&#10;        saveConfirm.setFont(LILITA_18);&#10;        exitText.setFont(LILITA_18);&#10;        rtmConfirm.setFont(LILITA_18);&#10;        exitConfirm.setFont(LILITA_18);&#10;&#10;        // 游戏板初始化&#10;        GameUI.initGamePane(gamePane, size);&#10;        if (!isLoad) {&#10;            grid = new Grid(size, mode);&#10;            grid.init(gamePane);&#10;            Paint.draw(grid, gamePane, size, 11, 11);&#10;            PopUpAnimation appear = new PopUpAnimation(grid);&#10;            appear.makeTransition();&#10;            appear.play(Animation.CombineType.GROUP);&#10;        } else {&#10;            grid.load(gamePane);&#10;            Paint.draw(grid, gamePane, size, 11, 11);&#10;&#10;        }&#10;&#10;        // 计时器&#10;        timer = new Timer(startTime, Time.INFINITE);&#10;        timer.begin();&#10;        // 设置定时器结束事件&#10;//        timer.setEndEvent(() -&gt; {&#10;//            isAuto = false;&#10;//            autoButton.setText(&quot;Auto&quot;);&#10;//            winAction();&#10;//        });&#10;        // 若有用户登录，开启定时自动保存任务&#10;        if (currentUser != null) {&#10;            timer.setTimingSession(() -&gt; {&#10;                autoSave();&#10;                System.out.println(&quot;Auto save&quot;);&#10;            }, SAVE_DURATION);&#10;        }&#10;        timeLabel.textProperty().bind(timer.messageProperty());&#10;        updateState();&#10;&#10;        // 初始化输入框&#10;        if (currentSave != null) {&#10;            saveName.setText(currentSave.saveName);&#10;        }&#10;&#10;        // 设置键盘监听&#10;        scene.setOnKeyPressed(event -&gt; {&#10;            if        (event.getCode() == KeyCode.UP    || event.getCode() == KeyCode.W) {&#10;                upAction();&#10;            } else if (event.getCode() == KeyCode.DOWN  || event.getCode() == KeyCode.S) {&#10;                downAction();&#10;            } else if (event.getCode() == KeyCode.LEFT  || event.getCode() == KeyCode.A) {&#10;                leftAction();&#10;            } else if (event.getCode() == KeyCode.RIGHT || event.getCode() == KeyCode.D) {&#10;                rightAction();&#10;            }&#10;        });&#10;&#10;    }&#10;&#10;    // restart按钮事件&#10;    @FXML&#10;    public void restartAction() {&#10;&#10;        if (isAuto) {&#10;            return;&#10;        }&#10;&#10;        grid = new Grid(size, mode);&#10;        grid.init(gamePane);&#10;        Paint.draw(grid, gamePane, size, 11, 11);&#10;        PopUpAnimation appear = new PopUpAnimation(grid);&#10;        appear.makeTransition();&#10;&#10;        appear.play(Animation.CombineType.GROUP);&#10;        upDateScore(scoreLabel, grid);&#10;&#10;        upDateStep(stepLabel, grid);&#10;        scene.getRoot().requestFocus();&#10;&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;        timeLabel.textProperty().bind(timer.messageProperty());&#10;        timer.reset();&#10;&#10;        /* 更新组件 */&#10;        moeState.setImage(new Image(&quot;/assets/moeState/default.png&quot;, 74.33, 110, false, false));&#10;&#10;    }&#10;&#10;    // undo按钮事件&#10;    @FXML&#10;    public void undoAction() {&#10;&#10;        if (isAuto) {&#10;            return;&#10;        }&#10;&#10;        grid.undo();&#10;        Paint.draw(grid, gamePane, size, 11, 11);&#10;        upDateScore(scoreLabel, grid);&#10;&#10;        upDateStep(stepLabel, grid);&#10;        scene.getRoot().requestFocus();&#10;&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;        // 计时器继续&#10;        if (timer != null) {&#10;            timer.continueTimer();&#10;        }&#10;&#10;        /* 更新组件 */&#10;        moeState.setImage(new Image(&quot;/assets/moeState/default.png&quot;, 74.33, 110, false, false));&#10;    }&#10;&#10;    // 按键事件&#10;    @FXML&#10;    public void upAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.UP);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;        makeAnimation(Direction.UP, distanceMap);&#10;//        slide.setOnFinished(event -&gt; {&#10;//&#10;//            GameUI.draw(grid, gamePane, size);&#10;//            updateState();&#10;//        });&#10;//&#10;//        slide.play(CombineType.GROUP);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void downAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.DOWN);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;&#10;        makeAnimation(Direction.DOWN, distanceMap);&#10;&#10;    }&#10;&#10;    private void makeAnimation(Direction down, Map&lt;Tile, Double&gt; distanceMap) {&#10;        // 移除键盘焦点&#10;        isEnd = true;&#10;&#10;        // 播放音效&#10;        if (moveSound != null) {&#10;            moveSound.stop();&#10;            moveSound.play();&#10;        }&#10;&#10;        MoveAnimation slide = new MoveAnimation(down, distanceMap);&#10;        slide.makeTransition();&#10;        slide.setOnFinished(event1 -&gt; {&#10;&#10;            Paint.draw(grid, gamePane, size, 11, 11);&#10;            PopUpAnimation appear = new PopUpAnimation(grid);&#10;            appear.makeTransition();&#10;            BounceAnimation bounce = new BounceAnimation(grid);&#10;            bounce.makeTransition();&#10;            ParallelTransition group1 = new ParallelTransition(bounce.getGroupTransition(), appear.getGroupTransition());&#10;            group1.play();&#10;&#10;            // 恢复键盘焦点&#10;            isEnd = false;&#10;&#10;            updateState();&#10;            scene.getRoot().requestFocus();&#10;&#10;&#10;        });&#10;        slide.play(Animation.CombineType.GROUP);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void leftAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.LEFT);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;&#10;        makeAnimation(Direction.LEFT, distanceMap);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void rightAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.RIGHT);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;&#10;        makeAnimation(Direction.RIGHT, distanceMap);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void hintAction() {&#10;        if (isAuto) {&#10;            return;&#10;        }&#10;        try {&#10;            Direction direction = AIsolver.findBestMove(grid, 5);&#10;            simulateMove(direction);&#10;            new Logger(mainPane, direction + &quot; !&quot;, 720.0, 9.0, LogType.success).show();&#10;        } catch (CloneNotSupportedException e) {&#10;            new Logger(mainPane, &quot;AI failed to find the best move!&quot;, 720.0, 9.0, LogType.error).show();&#10;        }&#10;    }&#10;&#10;    // 获取gamePane参数&#10;    public double getGamePaneWidth() {&#10;        return gamePane.getWidth();&#10;    }&#10;&#10;    public double getLayoutX() {&#10;        return gamePane.getLayoutX();&#10;    }&#10;&#10;    public double getLayoutY() {&#10;        return gamePane.getLayoutY();&#10;    }&#10;&#10;    /**&#10;     * @description: 初始化游戏板方法&#10;     * @param gamePane 游戏板&#10;     * @param size 游戏板大小&#10;     * @return void&#10;     */&#10;    public static void initGamePane(AnchorPane gamePane, int size) {&#10;&#10;        gamePane.getChildren().clear();&#10;&#10;        Paint.drawBackground(gamePane);&#10;        Paint.drawGrid(gamePane, size, 11.0, 11.0);&#10;    }&#10;&#10;    public void updateState() {&#10;        upDateScore(scoreLabel, grid);&#10;&#10;        upDateStep(stepLabel, grid);&#10;&#10;        if (grid.isWin()) {&#10;            isWin = true;&#10;&#10;            isAuto = false;&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/auto.png&quot;, 22.0, 22.0, false, false)));&#10;            timer.stop();&#10;            winAction();&#10;        } else if (grid.isOver()) {&#10;            isLose = true;&#10;&#10;            isAuto = false;&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/auto.png&quot;, 22.0, 22.0, false, false)));&#10;            timer.stop();&#10;            loseAction();&#10;        }&#10;    }&#10;&#10;&#10;    //&#10;    public void simulateMove(Direction direction) {&#10;        switch (direction) {&#10;            case UP:&#10;                upAction();&#10;                break;&#10;            case DOWN:&#10;                downAction();&#10;                break;&#10;            case LEFT:&#10;                leftAction();&#10;                break;&#10;            case RIGHT:&#10;                rightAction();&#10;                break;&#10;            default:&#10;                break;&#10;        }&#10;    }&#10;&#10;    // 更新分数&#10;    private void upDateScore(Label scoreLabel, Grid grid) {&#10;        scoreIncrease(grid.getScore() - score);&#10;        score = grid.getScore();&#10;        scoreLabel.setText(&quot;&quot; + score);&#10;    }&#10;&#10;    // 分数增加事件&#10;    public void scoreIncrease(int incScore) {&#10;        if (incScore &lt;= 0) return;&#10;        /* 分数增加动画 */&#10;        Text text = new Text(&quot;+&quot; + incScore);&#10;        text.setFont(Font.font(&quot;Arial&quot;, 20));&#10;        text.setFill(javafx.scene.paint.Color.rgb(119, 110, 101));&#10;        // 设置位置, x轴自适应居中&#10;        text.setLayoutX(scoreLabel.getLayoutX() + 120 - text.getLayoutBounds().getWidth() / 2);&#10;        text.setLayoutY(scoreLabel.getLayoutY() + 90);&#10;        // 设置动画&#10;        TranslateTransition transition = new TranslateTransition(Duration.millis(500), text);&#10;        transition.setByY(-50);&#10;        // 设置淡出效果&#10;        FadeTransition fade = new FadeTransition(Duration.millis(500), text);&#10;        fade.setFromValue(1.0);&#10;        fade.setToValue(0.0);&#10;        // 串联动画&#10;        ParallelTransition group = new ParallelTransition(transition, fade);&#10;        group.setOnFinished(event -&gt; {&#10;            mainPane.getChildren().remove(text);&#10;        });&#10;        mainPane.getChildren().add(text);&#10;        group.play();&#10;&#10;//        /* 分数增加组件更新 */&#10;//        moeState.setImage(new Image(&quot;/assets/logger/tanoshi.png&quot;, 96.68, 110, false, false));&#10;//        // 记录moeState的默认X坐标&#10;//        double defaultY = moeState.getLayoutY();&#10;//        // 弹跳动画&#10;//        TranslateTransition bounce = new TranslateTransition(Duration.millis(100), moeState);&#10;//        bounce.setByY(-10);&#10;//        bounce.setAutoReverse(true);&#10;//        bounce.setCycleCount(2);&#10;//&#10;//        bounce.setOnFinished(event -&gt; {&#10;//            moeState.setImage(new Image(&quot;/assets/moeState/default.png&quot;, 74.33, 110, false, false));&#10;//            moeState.setLayoutY(defaultY);&#10;//        });&#10;//        bounce.play();&#10;    }&#10;&#10;    // 更新步数&#10;    private static void upDateStep(Label stepLabel, Grid grid) {&#10;        stepLabel.setText(&quot;&quot; + grid.getStep());&#10;    }&#10;&#10;    private void winAction() {&#10;&#10;        isEnd = true;&#10;        // 绘制胜利界面&#10;        StackPane winPane = new StackPane();&#10;        winPane.setLayoutX(0);&#10;        winPane.setLayoutY(0);&#10;        winPane.setPrefSize(gamePane.getWidth(), gamePane.getHeight());&#10;        winPane.setStyle(&quot;&quot;&quot;&#10;                -fx-background-color: rgba(255,220,80,0.73);&#10;                -fx-background-radius: 3px;&#10;                -fx-background-size: cover;&#10;                -fx-background-position: center;&#10;                &quot;&quot;&quot;);&#10;        winPane.toFront();&#10;        winPane.setOpacity(0.6);&#10;&#10;        VBox winBox = new VBox();&#10;        winBox.setAlignment(javafx.geometry.Pos.CENTER);&#10;        // 显示“YOU WIN”标签&#10;        Label winLabel = new Label(&quot;YOU WIN&quot;);&#10;        winLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 50px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #ffffff;&#10;                -fx-effect: dropshadow(three-pass-box, #776e65, 10, 0, 0, 0);&quot;&quot;&quot;);&#10;        // 显示分数&#10;        Label scoreLabel = new Label(&quot;Score: &quot; + score);&#10;        scoreLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 30px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #776e65;&quot;&quot;&quot;);&#10;        // 添加到父节点&#10;        winBox.getChildren().addAll(winLabel, scoreLabel);&#10;        winPane.getChildren().add(winBox);&#10;&#10;        gamePane.getChildren().add(winPane);&#10;&#10;        /* 更新组件 */&#10;        moeState.setImage(new Image(&quot;/assets/logger/win.png&quot;, 96.68, 110, false, false));&#10;    }&#10;&#10;    private void loseAction() {&#10;&#10;        isEnd = true;&#10;        // 绘制失败界面&#10;        StackPane losePane = new StackPane();&#10;        losePane.setLayoutX(0);&#10;        losePane.setLayoutY(0);&#10;        losePane.setPrefSize(gamePane.getWidth(), gamePane.getHeight());&#10;        losePane.setStyle(&quot;&quot;&quot;&#10;                -fx-background-color: rgba(113,113,113,0.94);&#10;                -fx-background-radius: 3px;&#10;                -fx-background-size: cover;&#10;                -fx-background-position: center;&#10;                &quot;&quot;&quot;);&#10;        losePane.toFront();&#10;        losePane.setOpacity(0.6);&#10;&#10;        VBox loseBox = new VBox();&#10;        loseBox.setAlignment(javafx.geometry.Pos.CENTER);&#10;        // 显示“YOU LOSE”标签&#10;        Label loseLabel = new Label(&quot;YOU LOSE&quot;);&#10;        loseLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 50px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #1e1d1d;&#10;                -fx-effect: dropshadow(three-pass-box, #776e65, 10, 0, 0, 0);&quot;&quot;&quot;);&#10;        // 显示分数&#10;        Label scoreLabel = new Label(&quot;Score: &quot; + score);&#10;        scoreLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 30px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #3a3a3a;&#10;                &quot;&quot;&quot;);&#10;        // 添加到父节点&#10;        loseBox.getChildren().addAll(loseLabel, scoreLabel);&#10;        losePane.getChildren().add(loseBox);&#10;&#10;        gamePane.getChildren().add(losePane);&#10;&#10;        /* 更新组件 */&#10;        moeState.setImage(new Image(&quot;/assets/logger/lose.png&quot;, 96.68, 110, false, false));&#10;    }&#10;&#10;    @FXML&#10;    private void manualSave() {&#10;&#10;        if (saveName.getText().isEmpty()) {&#10;            Tooltip tooltip = new Tooltip(&quot;Please enter a save name!&quot;);&#10;            tooltip.setFont(Font.font(&quot;Arial&quot;, 12));&#10;            tooltip.setShowDuration(javafx.util.Duration.millis(2000));&#10;            tooltip.setAutoHide(true);&#10;            tooltip.show(saveName, 1620, 500);&#10;            return;&#10;        }&#10;&#10;        // 保存存档&#10;        // 保存用户信息&#10;        Save.State state;&#10;        if (isWin) {&#10;            state = Save.State.WIN;&#10;        } else if (isLose) {&#10;            state = Save.State.LOSE;&#10;        } else {&#10;            state = Save.State.IN_PROGRESS;&#10;        }&#10;        &#10;        // 保存到User对应存档路径&#10;        currentSave = new Save(saveName.getText(), grid, state, new Time(timeLabel.getText()), new Date(), new Time());&#10;&#10;        try {&#10;            Saver.saveToJson(Saver.buildGson(currentSave), currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;);&#10;            new Logger(sidebarPane, &quot;Save successful! At &quot;, currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;, LogType.success).show();&#10;        } catch (IOException e) {&#10;            new Logger(sidebarPane, &quot;Save failed!&quot; + e.getMessage(), LogType.error).show();&#10;        }&#10;    }&#10;&#10;    private void autoSave() {&#10;        // 保存存档&#10;        // 保存用户信息&#10;        Save.State state;&#10;        if (isWin) {&#10;            state = Save.State.WIN;&#10;        } else if (isLose) {&#10;            state = Save.State.LOSE;&#10;        } else {&#10;            state = Save.State.IN_PROGRESS;&#10;        }&#10;        if (currentSave == null) {&#10;            String saveName = &quot;Auto &quot; + LocalDate.now();&#10;            currentSave = new Save(saveName, grid, state, startTime);&#10;            // 保存到User对应存档路径&#10;            try {&#10;                Saver.saveToJson(Saver.buildGson(currentSave), currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;);&#10;                new Logger(mainPane, &quot;Save successful! At &quot;, currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;, 720.0, 9.0, LogType.success).show();&#10;            } catch (IOException e) {&#10;                new Logger(mainPane, &quot;Save failed!&quot; + e.getMessage(),720.0, 9.0 ,LogType.error).show();&#10;            }&#10;            &#10;        } else {&#10;            currentSave = new Save(currentSave.saveName, grid, state, new Time(timeLabel.getText()));&#10;            // 保存到User对应存档路径&#10;            try {&#10;                Saver.saveToJson(Saver.buildGson(currentSave), currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;);&#10;                new Logger(mainPane, &quot;Save successful! At &quot;, currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;, 720.0, 9.0, LogType.success).show();&#10;            } catch (IOException e) {&#10;                new Logger(mainPane, &quot;Save failed!&quot; + e.getMessage(),720.0, 9.0 ,LogType.error).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    // 初始化GameUI&#10;    public static void init(int size, int mode, User user) {&#10;        GameUI.setSize(size);&#10;        GameUI.setMode(mode);&#10;        GameUI.setBoard(new Grid(size, mode));&#10;        GameUI.setStartTime(Time.ZERO);&#10;        currentUser = user;&#10;        currentSave = null;&#10;        isLoad = false;&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;    }&#10;&#10;    private static void setStartTime(Time startTime) {&#10;        GameUI.startTime = startTime;&#10;    }&#10;&#10;&#10;    public static void init(int mode, int[][] board, Time startTime) {&#10;        GameUI.setSize(board.length);&#10;        GameUI.setMode(mode);&#10;        GameUI.setBoard(new Grid(board, mode));&#10;        GameUI.setStartTime(startTime);&#10;        isLoad = true;&#10;        isEnd = false;&#10;&#10;&#10;    }&#10;&#10;&#10;    // 读取存档时&#10;    public static void init(Grid grid, Time startTime, Save save) {&#10;        GameUI.setBoard(grid);&#10;        GameUI.setSize(grid.getSize());&#10;        GameUI.setMode(grid.getMode());&#10;        GameUI.setStartTime(startTime);&#10;        if (!PublicResource.isEmpty()) {&#10;            currentUser = PublicResource.getLoginUser();&#10;        }&#10;        GameUI.currentSave = save;&#10;        isLoad = true;&#10;        isEnd = false;&#10;&#10;        isWin = false;&#10;        isLose = false;&#10;    }&#10;&#10;    // 运行GameUI&#10;    public static void run() {&#10;        Platform.runLater(() -&gt; {&#10;            GameUI gameUI = new GameUI();&#10;            Stage primaryStage = new Stage();&#10;            try {&#10;                gameUI.start(primaryStage);&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;    }&#10;&#10;    public static void start() {&#10;        launch();&#10;    }&#10;&#10;&#10;    public static Grid getGrid() {&#10;        return grid;&#10;    }&#10;&#10;    public void autoAction() {&#10;&#10;        if (isWin || isLose) {&#10;            return;&#10;        }&#10;&#10;        if (isAuto) {&#10;            isAuto = false;&#10;            aiThread.endFlag = true;&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/auto.png&quot;, 22.0, 22.0, false, false)));&#10;            scene.getRoot().requestFocus();&#10;&#10;        } else {&#10;            isAuto = true;&#10;            aiThread = new AIThread(grid, this);&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/pause.png&quot;, 22.0, 22.0, false, false)));&#10;            new Thread(aiThread).start();&#10;&#10;        }&#10;    }&#10;&#10;    public void exitAction() {&#10;        if (isAuto) return;&#10;        timer.stop();&#10;        isEnd = true;&#10;        SlipToSidebarAnimation slip = new SlipToSidebarAnimation(mainPane,sidebarPane);&#10;        slip.makeTransition();&#10;        slip.play(Animation.CombineType.GROUP);&#10;        // 为mainPane添加毛玻璃效果&#10;        BoxBlur blur = new BoxBlur(10, 10, 3);&#10;        mainPane.setEffect(blur);&#10;&#10;        exitPane.setVisible(true);&#10;        try {&#10;            AnchorPane mask = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(&quot;/FXView/MaskPane.fxml&quot;)));&#10;            gameInterface.getChildren().add(mask);&#10;            scene.lookup(&quot;#arrow&quot;).setOnMousePressed(event -&gt; {&#10;                slipReform();&#10;                gameInterface.getChildren().remove(mask);&#10;            });&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public void returnToMain() {&#10;        MainUI.init(null);&#10;        MainUI.run();&#10;        exitGame();&#10;    }&#10;&#10;    public void exitGame() {&#10;        BackgroundMusic.pause();&#10;        // 弹出确认窗口 TODO&#10;        Stage stage = (Stage) gamePane.getScene().getWindow();&#10;        stage.close();&#10;    }&#10;&#10;    public void slipReform() {&#10;        SlipToSidebarAnimation slip = new SlipToSidebarAnimation(mainPane,sidebarPane,true);&#10;        slip.makeTransition();&#10;        slip.play(Animation.CombineType.GROUP);&#10;        mainPane.setEffect(null);&#10;        exitPane.setVisible(false);&#10;        savePane.setVisible(false);&#10;        isEnd = false;&#10;        if (!isWin &amp;&amp; !isLose) timer.continueTimer();&#10;    }&#10;&#10;    public void saveAction() {&#10;        if (isAuto) return;&#10;        if (currentUser == null) {&#10;            new Logger(mainPane, &quot;Please login first!&quot;,720.0,9.0,LogType.warn).show();&#10;            return;&#10;        }&#10;        timer.stop();&#10;        isEnd = true;&#10;        SlipToSidebarAnimation slip = new SlipToSidebarAnimation(mainPane,sidebarPane);&#10;        slip.makeTransition();&#10;        slip.play(Animation.CombineType.GROUP);&#10;        // 为mainPane添加毛玻璃效果&#10;        BoxBlur blur = new BoxBlur(10, 10, 3);&#10;        mainPane.setEffect(blur);&#10;&#10;        savePane.setVisible(true);&#10;        try {&#10;            AnchorPane mask = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(&quot;/FXView/MaskPane.fxml&quot;)));&#10;            gameInterface.getChildren().add(mask);&#10;            if (currentSave != null) {&#10;                saveName.setText(currentSave.saveName);&#10;            }&#10;            scene.lookup(&quot;#arrow&quot;).setOnMousePressed(event -&gt; {&#10;                slipReform();&#10;                gameInterface.getChildren().remove(mask);&#10;            });&#10;        } catch (IOException e) {&#10;            new Logger(mainPane, e.getMessage(),720.0, 9.0, LogType.error).show();&#10;        }&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1717034585078</created>
      <option name="number" value="00023" />
      <option name="presentableId" value="LOCAL-00023" />
      <option name="project" value="LOCAL" />
      <updated>1717034585078</updated>
    </task>
    <task id="LOCAL-00024" summary="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project version=&quot;4&quot;&gt;&#10;  &lt;component name=&quot;AutoImportSettings&quot;&gt;&#10;    &lt;option name=&quot;autoReloadType&quot; value=&quot;SELECTIVE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ChangeListManager&quot;&gt;&#10;    &lt;list default=&quot;true&quot; id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; afterDir=&quot;false&quot; /&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&quot; afterDir=&quot;false&quot; /&gt;&#10;    &lt;/list&gt;&#10;    &lt;option name=&quot;SHOW_DIALOG&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_CONFLICTS&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;LAST_RESOLUTION&quot; value=&quot;IGNORE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;FileTemplateManagerImpl&quot;&gt;&#10;    &lt;option name=&quot;RECENT_TEMPLATES&quot;&gt;&#10;      &lt;list&gt;&#10;        &lt;option value=&quot;FxmlFile&quot; /&gt;&#10;        &lt;option value=&quot;Interface&quot; /&gt;&#10;        &lt;option value=&quot;Class&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Git.Settings&quot;&gt;&#10;    &lt;option name=&quot;RECENT_BRANCH_BY_REPOSITORY&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;D:/IdeaProjects/Gaming2048&quot; value=&quot;dev&quot; /&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;    &lt;option name=&quot;RECENT_GIT_ROOT_PATH&quot; value=&quot;D:/IdeaProjects/Gaming2048&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;GitHubPullRequestSearchHistory&quot;&gt;&lt;![CDATA[{&#10;  &quot;lastFilter&quot;: {&#10;    &quot;state&quot;: &quot;OPEN&quot;,&#10;    &quot;assignee&quot;: &quot;SUSTechCJK2023&quot;&#10;  }&#10;}]]&gt;&lt;/component&gt;&#10;  &lt;component name=&quot;GithubPullRequestsUISettings&quot;&gt;&#10;    &lt;option name=&quot;selectedUrlAndAccountId&quot;&gt;&#10;      &lt;UrlAndAccount&gt;&#10;        &lt;option name=&quot;accountId&quot; value=&quot;8dc58497-80d5-4549-a909-aef707eb60dd&quot; /&gt;&#10;        &lt;option name=&quot;url&quot; value=&quot;https://github.com/zaddle55/Gaming2048.git&quot; /&gt;&#10;      &lt;/UrlAndAccount&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;MarkdownSettingsMigration&quot;&gt;&#10;    &lt;option name=&quot;stateVersion&quot; value=&quot;1&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectColorInfo&quot;&gt;{&#10;  &amp;quot;associatedIndex&amp;quot;: 3&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;ProjectId&quot; id=&quot;2gtu7oicMVlC4ncjClqNBKWrEOa&quot; /&gt;&#10;  &lt;component name=&quot;ProjectLevelVcsManager&quot; settingsEditedManually=&quot;true&quot;&gt;&#10;    &lt;ConfirmationsSetting value=&quot;2&quot; id=&quot;Add&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectViewState&quot;&gt;&#10;    &lt;option name=&quot;hideEmptyMiddlePackages&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;openDirectoriesWithSingleClick&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;showLibraryContents&quot; value=&quot;true&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;PropertiesComponent&quot;&gt;{&#10;  &amp;quot;keyToString&amp;quot;: {&#10;    &amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;git-widget-placeholder&amp;quot;: &amp;quot;CJKProject__202405&amp;quot;,&#10;    &amp;quot;kotlin-language-version-configured&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.detected.package.eslint&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.selected.package.eslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;node.js.selected.package.tslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;nodejs_package_manager_path&amp;quot;: &amp;quot;npm&amp;quot;,&#10;    &amp;quot;settings.editor.selected.configurable&amp;quot;: &amp;quot;preferences.pluginManager&amp;quot;,&#10;    &amp;quot;vue.rearranger.settings.migration&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;应用程序.GameApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.Main.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.TestMainUIApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;&#10;  }&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;RunManager&quot;&gt;&#10;    &lt;configuration name=&quot;TestMainUIApplication&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot;&gt;&#10;      &lt;option name=&quot;ALTERNATIVE_JRE_PATH&quot; value=&quot;21&quot; /&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;Main&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;PROGRAM_PARAMETERS&quot; value=&quot;--module-path     &amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;recent_temporary&gt;&#10;      &lt;list&gt;&#10;        &lt;item itemvalue=&quot;应用程序.TestMainUIApplication&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/recent_temporary&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;SpellCheckerSettings&quot; RuntimeDictionaries=&quot;0&quot; Folders=&quot;0&quot; CustomDictionaries=&quot;0&quot; DefaultDictionary=&quot;项目级&quot; UseSingleDictionary=&quot;true&quot; transferred=&quot;true&quot; /&gt;&#10;  &lt;component name=&quot;TaskManager&quot;&gt;&#10;    &lt;task id=&quot;LOCAL-00001&quot; summary=&quot;Implement multiple player management and save function&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716480870818&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00001&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00001&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716480870818&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task active=&quot;true&quot; id=&quot;Default&quot; summary=&quot;默认任务&quot;&gt;&#10;      &lt;changelist id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;Implement multiple player management and save function&quot; /&gt;&#10;      &lt;created&gt;1716529031291&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;updated&gt;1716529031291&lt;/updated&gt;&#10;      &lt;workItem from=&quot;1716529033750&quot; duration=&quot;10429000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716611936691&quot; duration=&quot;178000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716612124380&quot; duration=&quot;25412000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716702297487&quot; duration=&quot;11293000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716713611578&quot; duration=&quot;244000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716717775841&quot; duration=&quot;4053000&quot; /&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00002&quot; summary=&quot;Modify GameUI&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716632335330&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00002&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00002&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716632335331&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00003&quot; summary=&quot;Modify GameUI with sidebar&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716650344770&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00003&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00003&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716650344770&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00004&quot; summary=&quot;Modify Game Runtime logic&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716711603420&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00004&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00004&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716711603420&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00005&quot; summary=&quot;Apply auto save func&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716713655208&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00005&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00005&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716713655208&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00006&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716717860221&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00006&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00006&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716717860221&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00007&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716721663720&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00007&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00007&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716721663720&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00008&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983228635&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00008&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00008&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983228635&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00009&quot; summary=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983259273&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00009&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00009&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983259273&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00010&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot; selected=&amp;quot;应用程序.TestMainUIApplication&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;GameApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;Main&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;list&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;216&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;59&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;212&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;61&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;330&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;66&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;132&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;68&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983305328&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00010&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00010&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983305328&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00011&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    protected static double evaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static double evaluate(Direction d) {&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles = 0;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                for (int a=0; j+a &amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;#10;                }&amp;#10;                for (int b=0; i+b &amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyD += 1;&amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyU += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        int emptyTile = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;#10;                    emptyTile += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        return evaluationScore;&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluate(Direction.DOWN) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluate(Direction.LEFT) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluate(Direction.RIGHT) &amp;gt; evaluate(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716985108246&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00011&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00011&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716985108246&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00012&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        Random random = new Random();&amp;#10;        int randomNum = random.nextInt(4);&amp;#10;        if (randomNum == 0) {&amp;#10;            move(Direction.UP);&amp;#10;        } else if (randomNum == 1) {&amp;#10;            move(Direction.DOWN);&amp;#10;        } else if (randomNum == 2) {&amp;#10;            move(Direction.LEFT);&amp;#10;        } else {&amp;#10;            move(Direction.RIGHT);&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716988945401&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00012&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00012&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716988945401&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00013&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716990905746&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00013&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00013&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716990905746&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00014&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716991858020&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00014&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00014&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716991858020&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00015&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716995533105&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00015&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00015&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716995533105&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00016&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717031088690&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00016&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00016&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717031088690&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00017&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717031151193&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00017&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00017&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717031151193&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00018&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032087165&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00018&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00018&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032087165&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00019&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_BRANCH_BY_REPOSITORY&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; value=&amp;quot;dev&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GitHubPullRequestSearchHistory&amp;quot;&amp;gt;&amp;lt;![CDATA[{&amp;#10;  &amp;quot;lastFilter&amp;quot;: {&amp;#10;    &amp;quot;state&amp;quot;: &amp;quot;OPEN&amp;quot;,&amp;#10;    &amp;quot;assignee&amp;quot;: &amp;quot;SUSTechCJK2023&amp;quot;&amp;#10;  }&amp;#10;}]]&amp;gt;&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GithubPullRequestsUISettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;selectedUrlAndAccountId&amp;quot;&amp;gt;&amp;#10;      &amp;lt;UrlAndAccount&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;accountId&amp;quot; value=&amp;quot;8dc58497-80d5-4549-a909-aef707eb60dd&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;url&amp;quot; value=&amp;quot;https://github.com/zaddle55/Gaming2048.git&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/UrlAndAccount&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;ALTERNATIVE_JRE_PATH&amp;quot; value=&amp;quot;21&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;PROGRAM_PARAMETERS&amp;quot; value=&amp;quot;--module-path     &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00010&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983305328&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983305328&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00011&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716985108246&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716985108246&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00012&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716988945401&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716988945401&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00013&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716990905746&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716990905746&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00014&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716991858020&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716991858020&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00015&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716995533105&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716995533105&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00016&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031088690&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031088690&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00017&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031151193&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031151193&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00018&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717032087165&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717032087165&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;19&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;evaluateDirection(direction)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;getDirection()&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032118536&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00019&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00019&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032118536&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00020&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    // 为每种移动方向“评分”，哪种方向评分最高，采取哪种方向移动&amp;#10;    protected static double upEvaluationScore = 0;&amp;#10;    protected static double downEvaluationScore = 0;&amp;#10;    protected static double leftEvaluationScore = 0;&amp;#10;    protected static double rightEvaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.5; // 单调性权重&amp;#10;    protected static final double smoothWeight = -0.2; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.5; // 总空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static void evaluate() {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        // 1. 单调性评估&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j+1 &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyR += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyL += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (monotonyL * monotonyWeight);&amp;#10;        rightEvaluationScore += (monotonyR * monotonyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i+1 &amp;lt; GameUI.getGrid().getSize(); i += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;lt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyD += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;gt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyU += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (monotonyU * monotonyWeight);&amp;#10;        downEvaluationScore += (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        // 2. 平滑性评估&amp;#10;        int smoothU = 0;&amp;#10;        int smoothD = 0;&amp;#10;        int smoothL = 0;&amp;#10;        int smoothR = 0;&amp;#10;        for (int i=1; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i-1][j] != 0)) {&amp;#10;                    smoothU += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize() - 1; i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+1][j] != 0)) {&amp;#10;                    smoothD += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=1; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j-1] != 0)) {&amp;#10;                    smoothL += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize() - 1; j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+1] != 0)) {&amp;#10;                    smoothR += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += smoothU * smoothWeight;&amp;#10;        downEvaluationScore += smoothD * smoothWeight;&amp;#10;        leftEvaluationScore += smoothL * smoothWeight;&amp;#10;        rightEvaluationScore += smoothR * smoothWeight;&amp;#10;        // 找连续的同数值格子个数&amp;#10;        int numOfEqualTiles;&amp;#10;        int equalU = 0;&amp;#10;        int equalD = 0;&amp;#10;        int equalL = 0;&amp;#10;        int equalR = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a+1] == GameUI.getGrid().getBoard()[i][j+a])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalL += 1;&amp;#10;                        equalR += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (equalL * smoothWeight * (-10));&amp;#10;        rightEvaluationScore += (equalR * smoothWeight * (-10));&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a+1][j] == GameUI.getGrid().getBoard()[i+a][j])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalU += 1;&amp;#10;                        equalD += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (equalU * smoothWeight * (-10));&amp;#10;        downEvaluationScore += (equalD * smoothWeight * (-10));&amp;#10;&amp;#10;        // 3. 总空格数评估&amp;#10;        int numOfEmptyTiles;&amp;#10;        int emptyRow = 0;&amp;#10;        int emptyColumn = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i][j+a] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyRow += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        rightEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; i+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+a][j] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyColumn += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;        downEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;    }&amp;#10;    protected static double evaluateDirection(Direction d) {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        evaluate();&amp;#10;        if (d == Direction.UP) {&amp;#10;            return upEvaluationScore;&amp;#10;        } else if (d == Direction.DOWN) {&amp;#10;            return downEvaluationScore;&amp;#10;        } else if (d == Direction.LEFT) {&amp;#10;            return leftEvaluationScore;&amp;#10;        } else if (d == Direction.RIGHT) {&amp;#10;            return rightEvaluationScore;&amp;#10;        } else {&amp;#10;            return 0;&amp;#10;        }&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluateDirection(Direction.DOWN) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.LEFT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.RIGHT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032140325&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00020&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00020&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032140325&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00021&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717034510817&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00021&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00021&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717034510817&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00022&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717034529581&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00022&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00022&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717034529581&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;option name=&quot;localTasksCounter&quot; value=&quot;23&quot; /&gt;&#10;    &lt;servers /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;TypeScriptGeneratedFilesManager&quot;&gt;&#10;    &lt;option name=&quot;version&quot; value=&quot;3&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Vcs.Log.Tabs.Properties&quot;&gt;&#10;    &lt;option name=&quot;TAB_STATES&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;MAIN&quot;&gt;&#10;          &lt;value&gt;&#10;            &lt;State /&gt;&#10;          &lt;/value&gt;&#10;        &lt;/entry&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;VcsManagerConfiguration&quot;&gt;&#10;    &lt;MESSAGE value=&quot;Merge branch 'dev' into zaddle&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Add move sound effect and apply custom font&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Implement multiple player management and save function&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI with sidebar&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify Game Runtime logic&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Apply auto save func&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Version:1.0.0&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot; selected=&amp;quot;应用程序.TestMainUIApplication&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;GameApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;Main&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;list&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;216&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;59&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;212&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;61&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;330&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;66&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;132&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;68&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    protected static double evaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static double evaluate(Direction d) {&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles = 0;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                for (int a=0; j+a &amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;#10;                }&amp;#10;                for (int b=0; i+b &amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyD += 1;&amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyU += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        int emptyTile = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;#10;                    emptyTile += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        return evaluationScore;&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluate(Direction.DOWN) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluate(Direction.LEFT) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluate(Direction.RIGHT) &amp;gt; evaluate(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        Random random = new Random();&amp;#10;        int randomNum = random.nextInt(4);&amp;#10;        if (randomNum == 0) {&amp;#10;            move(Direction.UP);&amp;#10;        } else if (randomNum == 1) {&amp;#10;            move(Direction.DOWN);&amp;#10;        } else if (randomNum == 2) {&amp;#10;            move(Direction.LEFT);&amp;#10;        } else {&amp;#10;            move(Direction.RIGHT);&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_BRANCH_BY_REPOSITORY&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; value=&amp;quot;dev&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GitHubPullRequestSearchHistory&amp;quot;&amp;gt;&amp;lt;![CDATA[{&amp;#10;  &amp;quot;lastFilter&amp;quot;: {&amp;#10;    &amp;quot;state&amp;quot;: &amp;quot;OPEN&amp;quot;,&amp;#10;    &amp;quot;assignee&amp;quot;: &amp;quot;SUSTechCJK2023&amp;quot;&amp;#10;  }&amp;#10;}]]&amp;gt;&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GithubPullRequestsUISettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;selectedUrlAndAccountId&amp;quot;&amp;gt;&amp;#10;      &amp;lt;UrlAndAccount&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;accountId&amp;quot; value=&amp;quot;8dc58497-80d5-4549-a909-aef707eb60dd&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;url&amp;quot; value=&amp;quot;https://github.com/zaddle55/Gaming2048.git&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/UrlAndAccount&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;ALTERNATIVE_JRE_PATH&amp;quot; value=&amp;quot;21&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;PROGRAM_PARAMETERS&amp;quot; value=&amp;quot;--module-path     &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00010&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983305328&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983305328&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00011&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716985108246&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716985108246&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00012&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716988945401&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716988945401&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00013&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716990905746&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716990905746&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00014&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716991858020&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716991858020&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00015&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716995533105&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716995533105&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00016&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031088690&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031088690&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00017&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031151193&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031151193&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00018&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717032087165&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717032087165&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;19&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;evaluateDirection(direction)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;getDirection()&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    // 为每种移动方向“评分”，哪种方向评分最高，采取哪种方向移动&amp;#10;    protected static double upEvaluationScore = 0;&amp;#10;    protected static double downEvaluationScore = 0;&amp;#10;    protected static double leftEvaluationScore = 0;&amp;#10;    protected static double rightEvaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.5; // 单调性权重&amp;#10;    protected static final double smoothWeight = -0.2; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.5; // 总空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static void evaluate() {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        // 1. 单调性评估&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j+1 &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyR += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyL += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (monotonyL * monotonyWeight);&amp;#10;        rightEvaluationScore += (monotonyR * monotonyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i+1 &amp;lt; GameUI.getGrid().getSize(); i += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;lt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyD += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;gt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyU += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (monotonyU * monotonyWeight);&amp;#10;        downEvaluationScore += (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        // 2. 平滑性评估&amp;#10;        int smoothU = 0;&amp;#10;        int smoothD = 0;&amp;#10;        int smoothL = 0;&amp;#10;        int smoothR = 0;&amp;#10;        for (int i=1; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i-1][j] != 0)) {&amp;#10;                    smoothU += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize() - 1; i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+1][j] != 0)) {&amp;#10;                    smoothD += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=1; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j-1] != 0)) {&amp;#10;                    smoothL += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize() - 1; j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+1] != 0)) {&amp;#10;                    smoothR += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += smoothU * smoothWeight;&amp;#10;        downEvaluationScore += smoothD * smoothWeight;&amp;#10;        leftEvaluationScore += smoothL * smoothWeight;&amp;#10;        rightEvaluationScore += smoothR * smoothWeight;&amp;#10;        // 找连续的同数值格子个数&amp;#10;        int numOfEqualTiles;&amp;#10;        int equalU = 0;&amp;#10;        int equalD = 0;&amp;#10;        int equalL = 0;&amp;#10;        int equalR = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a+1] == GameUI.getGrid().getBoard()[i][j+a])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalL += 1;&amp;#10;                        equalR += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (equalL * smoothWeight * (-10));&amp;#10;        rightEvaluationScore += (equalR * smoothWeight * (-10));&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a+1][j] == GameUI.getGrid().getBoard()[i+a][j])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalU += 1;&amp;#10;                        equalD += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (equalU * smoothWeight * (-10));&amp;#10;        downEvaluationScore += (equalD * smoothWeight * (-10));&amp;#10;&amp;#10;        // 3. 总空格数评估&amp;#10;        int numOfEmptyTiles;&amp;#10;        int emptyRow = 0;&amp;#10;        int emptyColumn = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i][j+a] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyRow += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        rightEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; i+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+a][j] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyColumn += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;        downEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;    }&amp;#10;    protected static double evaluateDirection(Direction d) {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        evaluate();&amp;#10;        if (d == Direction.UP) {&amp;#10;            return upEvaluationScore;&amp;#10;        } else if (d == Direction.DOWN) {&amp;#10;            return downEvaluationScore;&amp;#10;        } else if (d == Direction.LEFT) {&amp;#10;            return leftEvaluationScore;&amp;#10;        } else if (d == Direction.RIGHT) {&amp;#10;            return rightEvaluationScore;&amp;#10;        } else {&amp;#10;            return 0;&amp;#10;        }&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluateDirection(Direction.DOWN) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.LEFT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.RIGHT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;option name=&quot;LAST_COMMIT_MESSAGE&quot; value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;XDebuggerManager&quot;&gt;&#10;    &lt;breakpoint-manager&gt;&#10;      &lt;breakpoints&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&lt;/url&gt;&#10;          &lt;line&gt;34&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;42&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;218&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;58&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;214&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;60&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;550&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;62&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-method&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&lt;/url&gt;&#10;          &lt;line&gt;64&lt;/line&gt;&#10;          &lt;properties class=&quot;controller.MainUI&quot;&gt;&#10;            &lt;option name=&quot;EMULATED&quot; value=&quot;true&quot; /&gt;&#10;            &lt;option name=&quot;WATCH_EXIT&quot; value=&quot;false&quot; /&gt;&#10;          &lt;/properties&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;47&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;      &lt;/breakpoints&gt;&#10;    &lt;/breakpoint-manager&gt;&#10;    &lt;watches-manager&gt;&#10;      &lt;configuration name=&quot;Application&quot;&gt;&#10;        &lt;watch expression=&quot;Saver.makeDir(savePath)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;currentIndex&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;MainUI.downPanes&quot; language=&quot;JAVA&quot; custom=&quot;controller.MainUI&quot; /&gt;&#10;        &lt;watch expression=&quot;evaluateDirection(direction)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;getDirection()&quot; language=&quot;JAVA&quot; /&gt;&#10;      &lt;/configuration&gt;&#10;    &lt;/watches-manager&gt;&#10;  &lt;/component&gt;&#10;&lt;/project&gt;">
      <option name="closed" value="true" />
      <created>1717034608623</created>
      <option name="number" value="00024" />
      <option name="presentableId" value="LOCAL-00024" />
      <option name="project" value="LOCAL" />
      <updated>1717034608623</updated>
    </task>
    <option name="localTasksCounter" value="25" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Merge branch 'dev' into zaddle" />
    <MESSAGE value="Add move sound effect and apply custom font" />
    <MESSAGE value="Implement multiple player management and save function" />
    <MESSAGE value="Modify GameUI" />
    <MESSAGE value="Modify GameUI with sidebar" />
    <MESSAGE value="Modify Game Runtime logic" />
    <MESSAGE value="Apply auto save func" />
    <MESSAGE value="Version:1.0.0" />
    <MESSAGE value="package model;&#10;&#10;import util.Saver;&#10;import java.io.IOException;&#10;import java.util.*;&#10;&#10;public class UserManager {&#10;    private List&lt;User&gt; userList;&#10;    private static final String savePath = &quot;src/main/resources/general&quot;;&#10;&#10;    public UserManager() {&#10;        try {&#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        userList = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public User register(String name, String password) throws IOException {&#10;        User user = null;&#10;        if (hasUser(name)) { // 检查用户是否已存在&#10;            throw new IllegalArgumentException(&quot;This user has existed!&quot;);&#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&#10;            throw new IllegalArgumentException(&quot;Invalid password! Your password should contain at least 8 characters.&quot;);&#10;        } else if (name.equals(&quot;&quot;) || password.equals(&quot;&quot;)) { // 检查用户名和密码是否为空&#10;            throw new IllegalArgumentException(&quot;Username or password cannot be empty!&quot;);&#10;        } else {&#10;            user = new User(name, password, &quot;src/main/resources/savedata/&quot; + name);&#10;            Saver.makeDir(user.getPath());&#10;            userList.add(user);&#10;            // 保存用户信息&#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &quot;/userInfo.json&quot;);&#10;        }&#10;        return user;&#10;    }&#10;    public User login(String name, String password) {&#10;        if (userList.isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        } else {&#10;            for (int i = 0; i &lt; userList.size(); i++) {&#10;                if (userList.get(i).getName().equals(name)) {&#10;                    if (!userList.get(i).getPassword().equals(password)) {&#10;                        throw new IllegalArgumentException(&quot;Incorrect password!&quot;);&#10;                    } else {&#10;                        return userList.get(i);&#10;                    }&#10;                }&#10;            }&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        }&#10;    }&#10;    public void deleteUser(User user) throws IOException {&#10;        userList.remove(user);&#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&#10;    }&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length() &gt;= 8) {&#10;            isPasswordValid = true;&#10;        }&#10;        return isPasswordValid;&#10;    }&#10;}" />
    <MESSAGE value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project version=&quot;4&quot;&gt;&#10;  &lt;component name=&quot;AutoImportSettings&quot;&gt;&#10;    &lt;option name=&quot;autoReloadType&quot; value=&quot;SELECTIVE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ChangeListManager&quot;&gt;&#10;    &lt;list default=&quot;true&quot; id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; afterDir=&quot;false&quot; /&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&quot; afterDir=&quot;false&quot; /&gt;&#10;    &lt;/list&gt;&#10;    &lt;option name=&quot;SHOW_DIALOG&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_CONFLICTS&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;LAST_RESOLUTION&quot; value=&quot;IGNORE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;FileTemplateManagerImpl&quot;&gt;&#10;    &lt;option name=&quot;RECENT_TEMPLATES&quot;&gt;&#10;      &lt;list&gt;&#10;        &lt;option value=&quot;FxmlFile&quot; /&gt;&#10;        &lt;option value=&quot;Interface&quot; /&gt;&#10;        &lt;option value=&quot;Class&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Git.Settings&quot;&gt;&#10;    &lt;option name=&quot;RECENT_GIT_ROOT_PATH&quot; value=&quot;D:/IdeaProjects/Gaming2048&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;MarkdownSettingsMigration&quot;&gt;&#10;    &lt;option name=&quot;stateVersion&quot; value=&quot;1&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectColorInfo&quot;&gt;{&#10;  &amp;quot;associatedIndex&amp;quot;: 3&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;ProjectId&quot; id=&quot;2gtu7oicMVlC4ncjClqNBKWrEOa&quot; /&gt;&#10;  &lt;component name=&quot;ProjectLevelVcsManager&quot; settingsEditedManually=&quot;true&quot;&gt;&#10;    &lt;ConfirmationsSetting value=&quot;2&quot; id=&quot;Add&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectViewState&quot;&gt;&#10;    &lt;option name=&quot;hideEmptyMiddlePackages&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;openDirectoriesWithSingleClick&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;showLibraryContents&quot; value=&quot;true&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;PropertiesComponent&quot;&gt;{&#10;  &amp;quot;keyToString&amp;quot;: {&#10;    &amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;git-widget-placeholder&amp;quot;: &amp;quot;CJKProject__202405&amp;quot;,&#10;    &amp;quot;kotlin-language-version-configured&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.detected.package.eslint&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.selected.package.eslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;node.js.selected.package.tslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;nodejs_package_manager_path&amp;quot;: &amp;quot;npm&amp;quot;,&#10;    &amp;quot;settings.editor.selected.configurable&amp;quot;: &amp;quot;preferences.pluginManager&amp;quot;,&#10;    &amp;quot;vue.rearranger.settings.migration&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;应用程序.GameApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.Main.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.TestMainUIApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;&#10;  }&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;RunManager&quot; selected=&quot;应用程序.TestMainUIApplication&quot;&gt;&#10;    &lt;configuration name=&quot;GameApplication&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot; temporary=&quot;true&quot; nameIsGenerated=&quot;true&quot;&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;GameApplication&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;VM_PARAMETERS&quot; value=&quot;--module-path &amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;configuration name=&quot;Main&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot; temporary=&quot;true&quot; nameIsGenerated=&quot;true&quot;&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;Main&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;VM_PARAMETERS&quot; value=&quot;--module-path &amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;configuration name=&quot;TestMainUIApplication&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot; temporary=&quot;true&quot; nameIsGenerated=&quot;true&quot;&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;TestMainUIApplication&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;VM_PARAMETERS&quot; value=&quot;--module-path &amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;list&gt;&#10;      &lt;item itemvalue=&quot;应用程序.Main&quot; /&gt;&#10;      &lt;item itemvalue=&quot;应用程序.GameApplication&quot; /&gt;&#10;      &lt;item itemvalue=&quot;应用程序.TestMainUIApplication&quot; /&gt;&#10;    &lt;/list&gt;&#10;    &lt;recent_temporary&gt;&#10;      &lt;list&gt;&#10;        &lt;item itemvalue=&quot;应用程序.TestMainUIApplication&quot; /&gt;&#10;        &lt;item itemvalue=&quot;应用程序.Main&quot; /&gt;&#10;        &lt;item itemvalue=&quot;应用程序.GameApplication&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/recent_temporary&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;SpellCheckerSettings&quot; RuntimeDictionaries=&quot;0&quot; Folders=&quot;0&quot; CustomDictionaries=&quot;0&quot; DefaultDictionary=&quot;项目级&quot; UseSingleDictionary=&quot;true&quot; transferred=&quot;true&quot; /&gt;&#10;  &lt;component name=&quot;TaskManager&quot;&gt;&#10;    &lt;task id=&quot;LOCAL-00001&quot; summary=&quot;Implement multiple player management and save function&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716480870818&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00001&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00001&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716480870818&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task active=&quot;true&quot; id=&quot;Default&quot; summary=&quot;默认任务&quot;&gt;&#10;      &lt;changelist id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;Implement multiple player management and save function&quot; /&gt;&#10;      &lt;created&gt;1716529031291&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;updated&gt;1716529031291&lt;/updated&gt;&#10;      &lt;workItem from=&quot;1716529033750&quot; duration=&quot;10429000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716611936691&quot; duration=&quot;178000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716612124380&quot; duration=&quot;25412000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716702297487&quot; duration=&quot;11293000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716713611578&quot; duration=&quot;244000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716717775841&quot; duration=&quot;4053000&quot; /&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00002&quot; summary=&quot;Modify GameUI&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716632335330&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00002&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00002&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716632335331&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00003&quot; summary=&quot;Modify GameUI with sidebar&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716650344770&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00003&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00003&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716650344770&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00004&quot; summary=&quot;Modify Game Runtime logic&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716711603420&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00004&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00004&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716711603420&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00005&quot; summary=&quot;Apply auto save func&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716713655208&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00005&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00005&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716713655208&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00006&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716717860221&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00006&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00006&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716717860221&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00007&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716721663720&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00007&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00007&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716721663720&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00008&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983228635&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00008&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00008&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983228635&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00009&quot; summary=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983259273&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00009&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00009&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983259273&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;option name=&quot;localTasksCounter&quot; value=&quot;10&quot; /&gt;&#10;    &lt;servers /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;TypeScriptGeneratedFilesManager&quot;&gt;&#10;    &lt;option name=&quot;version&quot; value=&quot;3&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Vcs.Log.Tabs.Properties&quot;&gt;&#10;    &lt;option name=&quot;TAB_STATES&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;MAIN&quot;&gt;&#10;          &lt;value&gt;&#10;            &lt;State /&gt;&#10;          &lt;/value&gt;&#10;        &lt;/entry&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;VcsManagerConfiguration&quot;&gt;&#10;    &lt;MESSAGE value=&quot;Merge branch 'dev' into zaddle&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Add move sound effect and apply custom font&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Implement multiple player management and save function&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI with sidebar&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify Game Runtime logic&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Apply auto save func&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Version:1.0.0&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;option name=&quot;LAST_COMMIT_MESSAGE&quot; value=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;XDebuggerManager&quot;&gt;&#10;    &lt;breakpoint-manager&gt;&#10;      &lt;breakpoints&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&lt;/url&gt;&#10;          &lt;line&gt;34&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;42&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;218&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;58&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;216&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;59&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;214&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;60&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;212&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;61&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;551&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;62&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;330&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;66&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&lt;/url&gt;&#10;          &lt;line&gt;132&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;68&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-method&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&lt;/url&gt;&#10;          &lt;line&gt;64&lt;/line&gt;&#10;          &lt;properties class=&quot;controller.MainUI&quot;&gt;&#10;            &lt;option name=&quot;EMULATED&quot; value=&quot;true&quot; /&gt;&#10;            &lt;option name=&quot;WATCH_EXIT&quot; value=&quot;false&quot; /&gt;&#10;          &lt;/properties&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;47&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;      &lt;/breakpoints&gt;&#10;    &lt;/breakpoint-manager&gt;&#10;    &lt;watches-manager&gt;&#10;      &lt;configuration name=&quot;Application&quot;&gt;&#10;        &lt;watch expression=&quot;Saver.makeDir(savePath)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;currentIndex&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;MainUI.downPanes&quot; language=&quot;JAVA&quot; custom=&quot;controller.MainUI&quot; /&gt;&#10;      &lt;/configuration&gt;&#10;    &lt;/watches-manager&gt;&#10;  &lt;/component&gt;&#10;&lt;/project&gt;" />
    <MESSAGE value="package ai;&#10;&#10;import controller.GameUI;&#10;import util.*;&#10;&#10;/**&#10; * AlphaDuo&#10; * @version: 1.0.0&#10; * @description: AlphaDuo is a class that represents the AI of the game, &quot;duo&quot; means two, which means that the AI is designed for 2048 which uses &quot;2&quot; grids to make larger binary numbers.&#10; * @function: Used to play the game automatically or to provide hints to the player.&#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&#10; */&#10;public class AlphaDuo {&#10;    protected static double evaluationScore = 0;&#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&#10;    protected static int directionNum = 0;&#10;&#10;    protected static double evaluate(Direction d) {&#10;        boolean isIncrease = false;&#10;        int numOfMonotonyTiles = 0;&#10;        int monotonyL = 0;&#10;        int monotonyR = 0;&#10;        int monotonyU = 0;&#10;        int monotonyD = 0;&#10;        for (int i=0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j=0; j &lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&#10;                if ((GameUI.getGrid().getBoard()[i][j] &lt; GameUI.getGrid().getBoard()[i][j+1])) {&#10;                    isIncrease = true;&#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &gt; GameUI.getGrid().getBoard()[i][j+1])) {&#10;                    isIncrease = false;&#10;                }&#10;                if (isIncrease) {&#10;                    for (int a=1; j+a &lt; GameUI.getGrid().getSize(); a++) {&#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&#10;                            numOfMonotonyTiles += 1;&#10;                        } else {&#10;                            isIncrease = false;&#10;                            break;&#10;                        }&#10;                    }&#10;                } else if (!isIncrease) {&#10;                    for (int a=1; j+a &lt; GameUI.getGrid().getSize(); a++) {&#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&#10;                            numOfMonotonyTiles += 1;&#10;                        } else {&#10;                            isIncrease = true;&#10;                            break;&#10;                        }&#10;                    }&#10;                }&#10;                for (int a=0; j+a &lt; GameUI.getGrid().getSize()-1; a++) {&#10;                }&#10;                for (int b=0; i+b &lt; GameUI.getGrid().getSize() - 1; b++) {&#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&#10;                        monotonyD += 1;&#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&#10;                        monotonyU += 1;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&#10;&#10;        int emptyTile = 0;&#10;        for (int i=0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j=0; j &lt; GameUI.getGrid().getSize(); j++) {&#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&#10;                    emptyTile += 1;&#10;                }&#10;            }&#10;        }&#10;        evaluationScore += emptyTile * emptyWeight;&#10;&#10;&#10;&#10;&#10;        return evaluationScore;&#10;    }&#10;    protected static int setDirection() {&#10;        Direction direction = Direction.UP;&#10;        if (evaluate(Direction.DOWN) &gt; evaluate(direction)) {&#10;            direction = Direction.DOWN;&#10;            directionNum = 1;&#10;        }&#10;        if (evaluate(Direction.LEFT) &gt; evaluate(direction)) {&#10;            direction = Direction.LEFT;&#10;            directionNum = 2;&#10;        }&#10;        if (evaluate(Direction.RIGHT) &gt; evaluate(direction)) {&#10;            directionNum = 3;&#10;        }&#10;        return directionNum;&#10;    }&#10;}" />
    <MESSAGE value="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.setDirection;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        Random random = new Random();&#10;        int randomNum = random.nextInt(4);&#10;        if (randomNum == 0) {&#10;            move(Direction.UP);&#10;        } else if (randomNum == 1) {&#10;            move(Direction.DOWN);&#10;        } else if (randomNum == 2) {&#10;            move(Direction.LEFT);&#10;        } else {&#10;            move(Direction.RIGHT);&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(200);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                move(getDirection());&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}" />
    <MESSAGE value="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.setDirection;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        if (!endFlag) {&#10;            Random random = new Random();&#10;            int randomNum = random.nextInt(4);&#10;            if (randomNum == 0) {&#10;                move(Direction.UP);&#10;            } else if (randomNum == 1) {&#10;                move(Direction.DOWN);&#10;            } else if (randomNum == 2) {&#10;                move(Direction.LEFT);&#10;            } else {&#10;                move(Direction.RIGHT);&#10;            }&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(200);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                move(getDirection());&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}" />
    <MESSAGE value="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.*;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        if (!endFlag) {&#10;            Random random = new Random();&#10;            int randomNum = random.nextInt(4);&#10;            if (randomNum == 0) {&#10;                move(Direction.UP);&#10;            } else if (randomNum == 1) {&#10;                move(Direction.DOWN);&#10;            } else if (randomNum == 2) {&#10;                move(Direction.LEFT);&#10;            } else {&#10;                move(Direction.RIGHT);&#10;            }&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(200);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                move(getDirection());&#10;                upEvaluationScore = 0;&#10;                downEvaluationScore = 0;&#10;                leftEvaluationScore = 0;&#10;                rightEvaluationScore = 0;&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}" />
    <MESSAGE value="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.*;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        if (!endFlag) {&#10;            Random random = new Random();&#10;            int randomNum = random.nextInt(4);&#10;            if (randomNum == 0) {&#10;                move(Direction.UP);&#10;            } else if (randomNum == 1) {&#10;                move(Direction.DOWN);&#10;            } else if (randomNum == 2) {&#10;                move(Direction.LEFT);&#10;            } else {&#10;                move(Direction.RIGHT);&#10;            }&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(1000);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                evaluate();&#10;                move(getDirection());&#10;                upEvaluationScore = 0;&#10;                downEvaluationScore = 0;&#10;                leftEvaluationScore = 0;&#10;                rightEvaluationScore = 0;&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}" />
    <MESSAGE value="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.*;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    protected Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        if (!endFlag) {&#10;            Random random = new Random();&#10;            int randomNum = random.nextInt(4);&#10;            if (randomNum == 0) {&#10;                move(Direction.UP);&#10;            } else if (randomNum == 1) {&#10;                move(Direction.DOWN);&#10;            } else if (randomNum == 2) {&#10;                move(Direction.LEFT);&#10;            } else {&#10;                move(Direction.RIGHT);&#10;            }&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(200);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                evaluate();&#10;                move(getDirection());&#10;                upEvaluationScore = 0;&#10;                downEvaluationScore = 0;&#10;                leftEvaluationScore = 0;&#10;                rightEvaluationScore = 0;&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}" />
    <MESSAGE value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project version=&quot;4&quot;&gt;&#10;  &lt;component name=&quot;ExternalStorageConfigurationManager&quot; enabled=&quot;true&quot; /&gt;&#10;  &lt;component name=&quot;MavenProjectsManager&quot;&gt;&#10;    &lt;option name=&quot;originalFiles&quot;&gt;&#10;      &lt;list&gt;&#10;        &lt;option value=&quot;D:/IdeaProjects/Gaming2048/src/pom.xml&quot; /&gt;&#10;        &lt;option value=&quot;D:/IdeaProjects/Gaming2048/pom.xml&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectRootManager&quot; version=&quot;2&quot; languageLevel=&quot;JDK_17&quot; default=&quot;true&quot; project-jdk-name=&quot;21&quot; project-jdk-type=&quot;JavaSDK&quot;&gt;&#10;    &lt;output url=&quot;file://D:/IdeaProjects/Gaming2048/out&quot; /&gt;&#10;  &lt;/component&gt;&#10;&lt;/project&gt;" />
    <MESSAGE value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project version=&quot;4&quot;&gt;&#10;  &lt;component name=&quot;AutoImportSettings&quot;&gt;&#10;    &lt;option name=&quot;autoReloadType&quot; value=&quot;SELECTIVE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ChangeListManager&quot;&gt;&#10;    &lt;list default=&quot;true&quot; id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&quot; afterDir=&quot;false&quot; /&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; afterDir=&quot;false&quot; /&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&quot; afterDir=&quot;false&quot; /&gt;&#10;    &lt;/list&gt;&#10;    &lt;option name=&quot;SHOW_DIALOG&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_CONFLICTS&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;LAST_RESOLUTION&quot; value=&quot;IGNORE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;FileTemplateManagerImpl&quot;&gt;&#10;    &lt;option name=&quot;RECENT_TEMPLATES&quot;&gt;&#10;      &lt;list&gt;&#10;        &lt;option value=&quot;FxmlFile&quot; /&gt;&#10;        &lt;option value=&quot;Interface&quot; /&gt;&#10;        &lt;option value=&quot;Class&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Git.Settings&quot;&gt;&#10;    &lt;option name=&quot;RECENT_BRANCH_BY_REPOSITORY&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;D:/IdeaProjects/Gaming2048&quot; value=&quot;dev&quot; /&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;    &lt;option name=&quot;RECENT_GIT_ROOT_PATH&quot; value=&quot;D:/IdeaProjects/Gaming2048&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;GitHubPullRequestSearchHistory&quot;&gt;&lt;![CDATA[{&#10;  &quot;lastFilter&quot;: {&#10;    &quot;state&quot;: &quot;OPEN&quot;,&#10;    &quot;assignee&quot;: &quot;SUSTechCJK2023&quot;&#10;  }&#10;}]]&gt;&lt;/component&gt;&#10;  &lt;component name=&quot;GithubPullRequestsUISettings&quot;&gt;&#10;    &lt;option name=&quot;selectedUrlAndAccountId&quot;&gt;&#10;      &lt;UrlAndAccount&gt;&#10;        &lt;option name=&quot;accountId&quot; value=&quot;8dc58497-80d5-4549-a909-aef707eb60dd&quot; /&gt;&#10;        &lt;option name=&quot;url&quot; value=&quot;https://github.com/zaddle55/Gaming2048.git&quot; /&gt;&#10;      &lt;/UrlAndAccount&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;MarkdownSettingsMigration&quot;&gt;&#10;    &lt;option name=&quot;stateVersion&quot; value=&quot;1&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectColorInfo&quot;&gt;{&#10;  &amp;quot;associatedIndex&amp;quot;: 3&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;ProjectId&quot; id=&quot;2gtu7oicMVlC4ncjClqNBKWrEOa&quot; /&gt;&#10;  &lt;component name=&quot;ProjectLevelVcsManager&quot; settingsEditedManually=&quot;true&quot;&gt;&#10;    &lt;ConfirmationsSetting value=&quot;2&quot; id=&quot;Add&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectViewState&quot;&gt;&#10;    &lt;option name=&quot;hideEmptyMiddlePackages&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;openDirectoriesWithSingleClick&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;showLibraryContents&quot; value=&quot;true&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;PropertiesComponent&quot;&gt;{&#10;  &amp;quot;keyToString&amp;quot;: {&#10;    &amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;git-widget-placeholder&amp;quot;: &amp;quot;CJKProject__202405&amp;quot;,&#10;    &amp;quot;kotlin-language-version-configured&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.detected.package.eslint&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.selected.package.eslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;node.js.selected.package.tslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;nodejs_package_manager_path&amp;quot;: &amp;quot;npm&amp;quot;,&#10;    &amp;quot;settings.editor.selected.configurable&amp;quot;: &amp;quot;preferences.pluginManager&amp;quot;,&#10;    &amp;quot;vue.rearranger.settings.migration&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;应用程序.GameApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.Main.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.TestMainUIApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;&#10;  }&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;RunManager&quot;&gt;&#10;    &lt;configuration name=&quot;TestMainUIApplication&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot;&gt;&#10;      &lt;option name=&quot;ALTERNATIVE_JRE_PATH&quot; value=&quot;21&quot; /&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;Main&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;PROGRAM_PARAMETERS&quot; value=&quot;--module-path     &amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;recent_temporary&gt;&#10;      &lt;list&gt;&#10;        &lt;item itemvalue=&quot;应用程序.TestMainUIApplication&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/recent_temporary&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;SpellCheckerSettings&quot; RuntimeDictionaries=&quot;0&quot; Folders=&quot;0&quot; CustomDictionaries=&quot;0&quot; DefaultDictionary=&quot;项目级&quot; UseSingleDictionary=&quot;true&quot; transferred=&quot;true&quot; /&gt;&#10;  &lt;component name=&quot;TaskManager&quot;&gt;&#10;    &lt;task id=&quot;LOCAL-00001&quot; summary=&quot;Implement multiple player management and save function&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716480870818&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00001&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00001&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716480870818&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task active=&quot;true&quot; id=&quot;Default&quot; summary=&quot;默认任务&quot;&gt;&#10;      &lt;changelist id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;Implement multiple player management and save function&quot; /&gt;&#10;      &lt;created&gt;1716529031291&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;updated&gt;1716529031291&lt;/updated&gt;&#10;      &lt;workItem from=&quot;1716529033750&quot; duration=&quot;10429000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716611936691&quot; duration=&quot;178000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716612124380&quot; duration=&quot;25412000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716702297487&quot; duration=&quot;11293000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716713611578&quot; duration=&quot;244000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716717775841&quot; duration=&quot;4053000&quot; /&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00002&quot; summary=&quot;Modify GameUI&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716632335330&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00002&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00002&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716632335331&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00003&quot; summary=&quot;Modify GameUI with sidebar&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716650344770&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00003&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00003&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716650344770&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00004&quot; summary=&quot;Modify Game Runtime logic&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716711603420&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00004&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00004&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716711603420&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00005&quot; summary=&quot;Apply auto save func&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716713655208&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00005&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00005&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716713655208&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00006&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716717860221&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00006&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00006&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716717860221&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00007&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716721663720&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00007&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00007&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716721663720&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00008&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983228635&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00008&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00008&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983228635&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00009&quot; summary=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983259273&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00009&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00009&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983259273&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00010&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot; selected=&amp;quot;应用程序.TestMainUIApplication&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;GameApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;Main&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;list&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;216&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;59&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;212&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;61&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;330&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;66&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;132&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;68&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983305328&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00010&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00010&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983305328&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00011&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    protected static double evaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static double evaluate(Direction d) {&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles = 0;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                for (int a=0; j+a &amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;#10;                }&amp;#10;                for (int b=0; i+b &amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyD += 1;&amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyU += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        int emptyTile = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;#10;                    emptyTile += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        return evaluationScore;&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluate(Direction.DOWN) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluate(Direction.LEFT) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluate(Direction.RIGHT) &amp;gt; evaluate(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716985108246&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00011&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00011&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716985108246&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00012&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        Random random = new Random();&amp;#10;        int randomNum = random.nextInt(4);&amp;#10;        if (randomNum == 0) {&amp;#10;            move(Direction.UP);&amp;#10;        } else if (randomNum == 1) {&amp;#10;            move(Direction.DOWN);&amp;#10;        } else if (randomNum == 2) {&amp;#10;            move(Direction.LEFT);&amp;#10;        } else {&amp;#10;            move(Direction.RIGHT);&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716988945401&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00012&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00012&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716988945401&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00013&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716990905746&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00013&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00013&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716990905746&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00014&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716991858020&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00014&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00014&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716991858020&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00015&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716995533105&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00015&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00015&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716995533105&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00016&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717031088690&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00016&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00016&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717031088690&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00017&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717031151193&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00017&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00017&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717031151193&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00018&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032087165&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00018&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00018&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032087165&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;option name=&quot;localTasksCounter&quot; value=&quot;19&quot; /&gt;&#10;    &lt;servers /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;TypeScriptGeneratedFilesManager&quot;&gt;&#10;    &lt;option name=&quot;version&quot; value=&quot;3&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Vcs.Log.Tabs.Properties&quot;&gt;&#10;    &lt;option name=&quot;TAB_STATES&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;MAIN&quot;&gt;&#10;          &lt;value&gt;&#10;            &lt;State /&gt;&#10;          &lt;/value&gt;&#10;        &lt;/entry&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;VcsManagerConfiguration&quot;&gt;&#10;    &lt;MESSAGE value=&quot;Merge branch 'dev' into zaddle&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Add move sound effect and apply custom font&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Implement multiple player management and save function&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI with sidebar&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify Game Runtime logic&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Apply auto save func&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Version:1.0.0&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot; selected=&amp;quot;应用程序.TestMainUIApplication&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;GameApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;Main&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;list&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;216&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;59&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;212&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;61&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;330&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;66&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;132&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;68&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    protected static double evaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static double evaluate(Direction d) {&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles = 0;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                for (int a=0; j+a &amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;#10;                }&amp;#10;                for (int b=0; i+b &amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyD += 1;&amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyU += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        int emptyTile = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;#10;                    emptyTile += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        return evaluationScore;&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluate(Direction.DOWN) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluate(Direction.LEFT) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluate(Direction.RIGHT) &amp;gt; evaluate(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        Random random = new Random();&amp;#10;        int randomNum = random.nextInt(4);&amp;#10;        if (randomNum == 0) {&amp;#10;            move(Direction.UP);&amp;#10;        } else if (randomNum == 1) {&amp;#10;            move(Direction.DOWN);&amp;#10;        } else if (randomNum == 2) {&amp;#10;            move(Direction.LEFT);&amp;#10;        } else {&amp;#10;            move(Direction.RIGHT);&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;option name=&quot;LAST_COMMIT_MESSAGE&quot; value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;XDebuggerManager&quot;&gt;&#10;    &lt;breakpoint-manager&gt;&#10;      &lt;breakpoints&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&lt;/url&gt;&#10;          &lt;line&gt;34&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;42&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;218&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;58&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;214&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;60&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;551&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;62&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-method&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&lt;/url&gt;&#10;          &lt;line&gt;64&lt;/line&gt;&#10;          &lt;properties class=&quot;controller.MainUI&quot;&gt;&#10;            &lt;option name=&quot;EMULATED&quot; value=&quot;true&quot; /&gt;&#10;            &lt;option name=&quot;WATCH_EXIT&quot; value=&quot;false&quot; /&gt;&#10;          &lt;/properties&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;47&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;      &lt;/breakpoints&gt;&#10;    &lt;/breakpoint-manager&gt;&#10;    &lt;watches-manager&gt;&#10;      &lt;configuration name=&quot;Application&quot;&gt;&#10;        &lt;watch expression=&quot;Saver.makeDir(savePath)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;currentIndex&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;MainUI.downPanes&quot; language=&quot;JAVA&quot; custom=&quot;controller.MainUI&quot; /&gt;&#10;        &lt;watch expression=&quot;evaluateDirection(direction)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;getDirection()&quot; language=&quot;JAVA&quot; /&gt;&#10;      &lt;/configuration&gt;&#10;    &lt;/watches-manager&gt;&#10;  &lt;/component&gt;&#10;&lt;/project&gt;" />
    <MESSAGE value="package ai;&#10;&#10;import controller.GameUI;&#10;import util.*;&#10;&#10;/**&#10; * AlphaDuo&#10; * @version: 1.0.0&#10; * @description: AlphaDuo is a class that represents the AI of the game, &quot;duo&quot; means two, which means that the AI is designed for 2048 which uses &quot;2&quot; grids to make larger binary numbers.&#10; * @function: Used to play the game automatically or to provide hints to the player.&#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&#10; */&#10;public class AlphaDuo {&#10;    // 为每种移动方向“评分”，哪种方向评分最高，采取哪种方向移动&#10;    protected static double upEvaluationScore = 0;&#10;    protected static double downEvaluationScore = 0;&#10;    protected static double leftEvaluationScore = 0;&#10;    protected static double rightEvaluationScore = 0;&#10;    protected static final double monotonyWeight = 0.5; // 单调性权重&#10;    protected static final double smoothWeight = -0.2; // 平滑性权重&#10;    protected static final double emptyWeight = 0.5; // 总空格数权重&#10;    protected static int directionNum = 0;&#10;&#10;    protected static void evaluate() {&#10;        upEvaluationScore = 0;&#10;        downEvaluationScore = 0;&#10;        leftEvaluationScore = 0;&#10;        rightEvaluationScore = 0;&#10;        // 1. 单调性评估&#10;        boolean isIncrease = false;&#10;        int numOfMonotonyTiles;&#10;        int monotonyL = 0;&#10;        int monotonyR = 0;&#10;        int monotonyU = 0;&#10;        int monotonyD = 0;&#10;        for (int i = 0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j = 0; j+1 &lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&#10;                numOfMonotonyTiles = 0;&#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j] &lt; GameUI.getGrid().getBoard()[i][j+1])) {&#10;                    isIncrease = true;&#10;                } else if ((GameUI.getGrid().getBoard()[i][j+1] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j] &gt; GameUI.getGrid().getBoard()[i][j+1])) {&#10;                    isIncrease = false;&#10;                }&#10;                if (isIncrease) {&#10;                    for (int a = 1; j+a+1 &lt; GameUI.getGrid().getSize(); a++) {&#10;                        if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j+a] &lt; GameUI.getGrid().getBoard()[i][j+a+1])) {&#10;                            numOfMonotonyTiles += 1;&#10;                            monotonyR += 1;&#10;                        } else {&#10;                            isIncrease = false;&#10;                            break;&#10;                        }&#10;                    }&#10;                } else if (!isIncrease) {&#10;                    for (int a = 1; j+a+1 &lt; GameUI.getGrid().getSize(); a++) {&#10;                        if ((GameUI.getGrid().getBoard()[i][j+a+1] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j+a] &gt; GameUI.getGrid().getBoard()[i][j+a+1])) {&#10;                            numOfMonotonyTiles += 1;&#10;                            monotonyL += 1;&#10;                        } else {&#10;                            isIncrease = true;&#10;                            break;&#10;                        }&#10;                    }&#10;                }&#10;                if (numOfMonotonyTiles == 0) {&#10;                    numOfMonotonyTiles += 1;&#10;                }&#10;            }&#10;        }&#10;        leftEvaluationScore += (monotonyL * monotonyWeight);&#10;        rightEvaluationScore += (monotonyR * monotonyWeight);&#10;        for (int j = 0; j &lt; GameUI.getGrid().getSize(); j++) {&#10;            for (int i = 0; i+1 &lt; GameUI.getGrid().getSize(); i += numOfMonotonyTiles) {&#10;                numOfMonotonyTiles = 0;&#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j] &lt; GameUI.getGrid().getBoard()[i+1][j])) {&#10;                    isIncrease = true;&#10;                } else if ((GameUI.getGrid().getBoard()[i+1][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j] &gt; GameUI.getGrid().getBoard()[i+1][j])) {&#10;                    isIncrease = false;&#10;                }&#10;                if (isIncrease) {&#10;                    for (int a = 1; i+a+1 &lt; GameUI.getGrid().getSize(); a++) {&#10;                        if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i+a][j] &lt; GameUI.getGrid().getBoard()[i+a+1][j])) {&#10;                            numOfMonotonyTiles += 1;&#10;                            monotonyD += 1;&#10;                        } else {&#10;                            isIncrease = false;&#10;                            break;&#10;                        }&#10;                    }&#10;                } else if (!isIncrease) {&#10;                    for (int a = 1; i+a+1 &lt; GameUI.getGrid().getSize(); a++) {&#10;                        if ((GameUI.getGrid().getBoard()[i+a+1][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i+a][j] &gt; GameUI.getGrid().getBoard()[i+a+1][j])) {&#10;                            numOfMonotonyTiles += 1;&#10;                            monotonyU += 1;&#10;                        } else {&#10;                            isIncrease = true;&#10;                            break;&#10;                        }&#10;                    }&#10;                }&#10;                if (numOfMonotonyTiles == 0) {&#10;                    numOfMonotonyTiles += 1;&#10;                }&#10;            }&#10;        }&#10;        upEvaluationScore += (monotonyU * monotonyWeight);&#10;        downEvaluationScore += (monotonyD * monotonyWeight);&#10;&#10;        // 2. 平滑性评估&#10;        int smoothU = 0;&#10;        int smoothD = 0;&#10;        int smoothL = 0;&#10;        int smoothR = 0;&#10;        for (int i=1; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j=0; j &lt; GameUI.getGrid().getSize(); j++) {&#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i-1][j] != 0)) {&#10;                    smoothU += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) / GameUI.getGrid().getSize());&#10;                }&#10;            }&#10;        }&#10;        for (int i=0; i &lt; GameUI.getGrid().getSize() - 1; i++) {&#10;            for (int j=0; j &lt; GameUI.getGrid().getSize(); j++) {&#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i+1][j] != 0)) {&#10;                    smoothD += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) / GameUI.getGrid().getSize());&#10;                }&#10;            }&#10;        }&#10;        for (int i=0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j=1; j &lt; GameUI.getGrid().getSize(); j++) {&#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j-1] != 0)) {&#10;                    smoothL += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) / GameUI.getGrid().getSize());&#10;                }&#10;            }&#10;        }&#10;        for (int i=0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j=0; j &lt; GameUI.getGrid().getSize() - 1; j++) {&#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j+1] != 0)) {&#10;                    smoothR += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) / GameUI.getGrid().getSize());&#10;                }&#10;            }&#10;        }&#10;        upEvaluationScore += smoothU * smoothWeight;&#10;        downEvaluationScore += smoothD * smoothWeight;&#10;        leftEvaluationScore += smoothL * smoothWeight;&#10;        rightEvaluationScore += smoothR * smoothWeight;&#10;        // 找连续的同数值格子个数&#10;        int numOfEqualTiles;&#10;        int equalU = 0;&#10;        int equalD = 0;&#10;        int equalL = 0;&#10;        int equalR = 0;&#10;        for (int i = 0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j = 0; j &lt; GameUI.getGrid().getSize(); j += numOfEqualTiles) {&#10;                numOfEqualTiles = 0;&#10;                for (int a = 0; j+a+1 &lt; GameUI.getGrid().getSize(); a++) {&#10;                    if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i][j+a+1] == GameUI.getGrid().getBoard()[i][j+a])) {&#10;                        numOfEqualTiles += 1;&#10;                        equalL += 1;&#10;                        equalR += 1;&#10;                    } else {&#10;                        break;&#10;                    }&#10;                }&#10;                if (numOfEqualTiles == 0) {&#10;                    numOfEqualTiles += 1;&#10;                }&#10;            }&#10;        }&#10;        leftEvaluationScore += (equalL * smoothWeight * (-10));&#10;        rightEvaluationScore += (equalR * smoothWeight * (-10));&#10;        for (int j = 0; j &lt; GameUI.getGrid().getSize(); j++) {&#10;            for (int i = 0; i &lt; GameUI.getGrid().getSize(); i += numOfEqualTiles) {&#10;                numOfEqualTiles = 0;&#10;                for (int a = 0; i+a+1 &lt; GameUI.getGrid().getSize(); a++) {&#10;                    if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;&amp; (GameUI.getGrid().getBoard()[i+a+1][j] == GameUI.getGrid().getBoard()[i+a][j])) {&#10;                        numOfEqualTiles += 1;&#10;                        equalU += 1;&#10;                        equalD += 1;&#10;                    } else {&#10;                        break;&#10;                    }&#10;                }&#10;                if (numOfEqualTiles == 0) {&#10;                    numOfEqualTiles += 1;&#10;                }&#10;            }&#10;        }&#10;        upEvaluationScore += (equalU * smoothWeight * (-10));&#10;        downEvaluationScore += (equalD * smoothWeight * (-10));&#10;&#10;        // 3. 总空格数评估&#10;        int numOfEmptyTiles;&#10;        int emptyRow = 0;&#10;        int emptyColumn = 0;&#10;        for (int i = 0; i &lt; GameUI.getGrid().getSize(); i++) {&#10;            for (int j = 0; j &lt; GameUI.getGrid().getSize(); j += numOfEmptyTiles) {&#10;                numOfEmptyTiles = 0;&#10;                for (int a = 0; j+a &lt; GameUI.getGrid().getSize(); a++) {&#10;                    if (GameUI.getGrid().getBoard()[i][j+a] == 0) {&#10;                        numOfEmptyTiles += 1;&#10;                        emptyRow += 1;&#10;                    } else {&#10;                        break;&#10;                    }&#10;                }&#10;                if (numOfEmptyTiles == 0) {&#10;                    numOfEmptyTiles += 1;&#10;                }&#10;            }&#10;        }&#10;        leftEvaluationScore += (emptyRow * emptyWeight);&#10;        rightEvaluationScore += (emptyRow * emptyWeight);&#10;        for (int j = 0; j &lt; GameUI.getGrid().getSize(); j++) {&#10;            for (int i = 0; i &lt; GameUI.getGrid().getSize(); i += numOfEmptyTiles) {&#10;                numOfEmptyTiles = 0;&#10;                for (int a = 0; i+a &lt; GameUI.getGrid().getSize(); a++) {&#10;                    if (GameUI.getGrid().getBoard()[i+a][j] == 0) {&#10;                        numOfEmptyTiles += 1;&#10;                        emptyColumn += 1;&#10;                    } else {&#10;                        break;&#10;                    }&#10;                }&#10;                if (numOfEmptyTiles == 0) {&#10;                    numOfEmptyTiles += 1;&#10;                }&#10;            }&#10;        }&#10;        upEvaluationScore += (emptyColumn * emptyWeight);&#10;        downEvaluationScore += (emptyColumn * emptyWeight);&#10;    }&#10;    protected static double evaluateDirection(Direction d) {&#10;        upEvaluationScore = 0;&#10;        downEvaluationScore = 0;&#10;        leftEvaluationScore = 0;&#10;        rightEvaluationScore = 0;&#10;        evaluate();&#10;        if (d == Direction.UP) {&#10;            return upEvaluationScore;&#10;        } else if (d == Direction.DOWN) {&#10;            return downEvaluationScore;&#10;        } else if (d == Direction.LEFT) {&#10;            return leftEvaluationScore;&#10;        } else if (d == Direction.RIGHT) {&#10;            return rightEvaluationScore;&#10;        } else {&#10;            return 0;&#10;        }&#10;    }&#10;    protected static int setDirection() {&#10;        Direction direction = Direction.UP;&#10;        if (evaluateDirection(Direction.DOWN) &gt;= evaluateDirection(direction)) {&#10;            direction = Direction.DOWN;&#10;            directionNum = 1;&#10;        }&#10;        if (evaluateDirection(Direction.LEFT) &gt;= evaluateDirection(direction)) {&#10;            direction = Direction.LEFT;&#10;            directionNum = 2;&#10;        }&#10;        if (evaluateDirection(Direction.RIGHT) &gt;= evaluateDirection(direction)) {&#10;            directionNum = 3;&#10;        }&#10;        return directionNum;&#10;    }&#10;}" />
    <MESSAGE value="package ai;&#10;&#10;import controller.GameUI;&#10;import model.Grid;&#10;import org.jetbrains.annotations.Nullable;&#10;import util.Direction;&#10;import java.util.Random;&#10;&#10;import static ai.AlphaDuo.*;&#10;import static java.lang.Thread.sleep;&#10;&#10;public class AIThread implements Runnable {&#10;    protected Grid grid;&#10;    protected GameUI gameThread;&#10;    public boolean endFlag = false;&#10;&#10;    public AIThread(Grid grid, GameUI gameThread) {&#10;        this.grid = grid;&#10;        this.gameThread = gameThread;&#10;    }&#10;&#10;    @Nullable&#10;    public static Direction getDirection() {&#10;        if (setDirection() == 0) {&#10;            return Direction.UP;&#10;        } else if (setDirection() == 1) {&#10;            return Direction.DOWN;&#10;        } else if (setDirection() == 2) {&#10;            return Direction.LEFT;&#10;        } else if (setDirection() == 3) {&#10;            return Direction.RIGHT;&#10;        } else {&#10;            return null;&#10;        }&#10;    }&#10;    protected void move(Direction direction) {&#10;        gameThread.simulateMove(direction);&#10;    }&#10;    protected void updateGrid() {&#10;        grid = gameThread.getGrid();&#10;    }&#10;    protected void updateEndFlag() {&#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&#10;    }&#10;    @Override&#10;    public void run() {&#10;        if (!endFlag) {&#10;            Random random = new Random();&#10;            int randomNum = random.nextInt(4);&#10;            if (randomNum == 0) {&#10;                move(Direction.UP);&#10;            } else if (randomNum == 1) {&#10;                move(Direction.DOWN);&#10;            } else if (randomNum == 2) {&#10;                move(Direction.LEFT);&#10;            } else {&#10;                move(Direction.RIGHT);&#10;            }&#10;        }&#10;        while (!endFlag) {&#10;            try {&#10;                sleep(200);&#10;                updateGrid();&#10;                updateEndFlag();&#10;                evaluate();&#10;                move(getDirection());&#10;                upEvaluationScore = 0;&#10;                downEvaluationScore = 0;&#10;                leftEvaluationScore = 0;&#10;                rightEvaluationScore = 0;&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        }&#10;    }&#10;}" />
    <MESSAGE value="package controller;&#10;&#10;&#10;import ai.AIThread;&#10;import javafx.animation.FadeTransition;&#10;import javafx.animation.ParallelTransition;&#10;import javafx.animation.TranslateTransition;&#10;import javafx.application.Application;&#10;import javafx.application.Platform;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.effect.BoxBlur;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.input.KeyCode;&#10;import javafx.scene.layout.*;&#10;import javafx.scene.media.MediaPlayer;&#10;import javafx.scene.text.Font;&#10;import javafx.scene.text.Text;&#10;import javafx.stage.Stage;&#10;import javafx.stage.StageStyle;&#10;import javafx.util.Duration;&#10;import model.Save;&#10;import model.Tile;&#10;import model.Grid;&#10;import util.*;&#10;import util.graphic.Paint;&#10;import model.*;&#10;import util.logger.LogType;&#10;import util.logger.Logger;&#10;import util.music.BackgroundMusic;&#10;import ai.AIsolver;&#10;&#10;import java.io.IOException;&#10;import java.util.Map;&#10;import java.util.Objects;&#10;import java.time.LocalDate;&#10;&#10;&#10;public class GameUI extends Application {&#10;&#10;&#10;    public TextField saveName;&#10;    public AnchorPane sidebarPane;&#10;    public GridPane savePane;&#10;    public GridPane exitPane;&#10;    public Text saveText;&#10;    public Button saveConfirm;&#10;    public Text exitText;&#10;    public Button rtmConfirm;&#10;    public Button exitConfirm;&#10;    public GridPane musicPane;&#10;    public ImageView moeState;&#10;    // 节点域&#10;    @FXML&#10;    private AnchorPane gamePane;&#10;    public AnchorPane mainPane;&#10;    @FXML&#10;    private Button restartButton;&#10;    @FXML&#10;    private Button autoButton;&#10;    @FXML&#10;    private AnchorPane gameInterface;&#10;    @FXML&#10;    private Label scoreLabel;&#10;    @FXML&#10;    private Label stepLabel;&#10;    @FXML&#10;    private Label timeLabel;&#10;    private static Scene scene;&#10;&#10;    // 游戏参数&#10;    private static int size;&#10;    private static int mode;&#10;    private static Grid grid;&#10;&#10;    /** 运行时参数 **/&#10;    // 分数&#10;    private static int score = 0;&#10;&#10;    // 是否加载&#10;    private static boolean isLoad = false;&#10;    // 胜利标志&#10;    public static boolean isWin = false;&#10;    // 失败标志&#10;    public static boolean isLose = false;&#10;    // 游戏结束标志&#10;    private static boolean isEnd = false;&#10;    // AI运行标志&#10;    public static boolean isAuto = false;&#10;    // 当前存档&#10;    private static Save currentSave;&#10;    // AI线程&#10;    private static AIThread aiThread;&#10;    private static Timer timer;&#10;    private static Time startTime;&#10;    private static final Duration SAVE_DURATION = Duration.seconds(60); // 自动保存间隔&#10;&#10;    // 游戏资源&#10;    private static User currentUser;&#10;    private static MediaPlayer moveSound;&#10;&#10;    public static int getSize() {&#10;        return size;&#10;    }&#10;&#10;    public static void setSize(int size) {&#10;        GameUI.size = size;&#10;    }&#10;&#10;    public static int getMode() {&#10;        return mode;&#10;    }&#10;&#10;    public static void setMode(int mode) {&#10;        GameUI.mode = mode;&#10;    }&#10;&#10;    public static Grid getBoard() {&#10;        return grid;&#10;    }&#10;&#10;    public static void setBoard(Grid grid) {&#10;        GameUI.grid = grid;&#10;    }&#10;&#10;&#10;    // 游戏界面初始化&#10;    @Override&#10;    public void start(Stage primaryStage) throws Exception {&#10;        Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(&quot;/FXView/GameUI.fxml&quot;)));&#10;        scene = new Scene(root, 1000, 1000);&#10;&#10;        // stage设置&#10;        primaryStage.setTitle(&quot;2048&quot;);&#10;        primaryStage.setResizable(false);&#10;        primaryStage.getIcons().add(new javafx.scene.image.Image(&quot;/assets/titleIcon/favicon-32x32.png&quot;));&#10;        primaryStage.initStyle(StageStyle.UNIFIED);&#10;        primaryStage.setScene(scene);&#10;        primaryStage.show();&#10;&#10;        // 设置焦点&#10;        scene.getRoot().requestFocus();&#10;&#10;        // 获取节点&#10;        gamePane = (AnchorPane) scene.lookup(&quot;#gamePane&quot;);&#10;        scoreLabel = (Label) scene.lookup(&quot;#scoreLabel&quot;);&#10;        stepLabel = (Label) scene.lookup(&quot;#stepLabel&quot;);&#10;        timeLabel = (Label) scene.lookup(&quot;#timeLabel&quot;);&#10;        autoButton = (Button) scene.lookup(&quot;#autoButton&quot;);&#10;        saveName = (TextField) scene.lookup(&quot;#saveName&quot;);&#10;        saveText = (Text) scene.lookup(&quot;#saveText&quot;);&#10;        saveConfirm = (Button) scene.lookup(&quot;#saveConfirm&quot;);&#10;        exitText = (Text) scene.lookup(&quot;#exitText&quot;);&#10;        rtmConfirm = (Button) scene.lookup(&quot;#rtmConfirm&quot;);&#10;        exitConfirm = (Button) scene.lookup(&quot;#exitConfirm&quot;);&#10;        sidebarPane = (AnchorPane) scene.lookup(&quot;#sidebarPane&quot;);&#10;        musicPane = (GridPane) scene.lookup(&quot;#musicPane&quot;);&#10;        mainPane = (AnchorPane) scene.lookup(&quot;#mainPane&quot;);&#10;        moeState = (ImageView) scene.lookup(&quot;#moeState&quot;);&#10;&#10;        // 背景音乐初始化&#10;        BackgroundMusic.initMusicList();&#10;        BackgroundMusic.initMusicView();&#10;        musicPane.add(BackgroundMusic.getMusicView(), 0, 0);&#10;        BackgroundMusic.play();&#10;        // 音效初始化&#10;        if (PublicResource.getResource(&quot;MoveSound&quot;) == null) {&#10;            new Logger(mainPane, &quot;Failed to sound resources&quot;, 720.0, 9.0, LogType.info).show();&#10;        } else {&#10;            moveSound = (MediaPlayer) PublicResource.getResource(&quot;MoveSound&quot;);&#10;        }&#10;        // 字体初始化&#10;        final Font LILITA_18 = Font.loadFont(getClass().getResourceAsStream(&quot;/font/Lilita_One/LilitaOne-Regular.ttf&quot;), 18);&#10;        final Font LILITA_16 = Font.loadFont(getClass().getResourceAsStream(&quot;/font/Lilita_One/LilitaOne-Regular.ttf&quot;), 16);&#10;        saveText.setFont(LILITA_18);&#10;        saveName.setFont(LILITA_16);&#10;        saveConfirm.setFont(LILITA_18);&#10;        exitText.setFont(LILITA_18);&#10;        rtmConfirm.setFont(LILITA_18);&#10;        exitConfirm.setFont(LILITA_18);&#10;&#10;        // 游戏板初始化&#10;        GameUI.initGamePane(gamePane, size);&#10;        if (!isLoad) {&#10;            grid = new Grid(size, mode);&#10;            grid.init(gamePane);&#10;            Paint.draw(grid, gamePane, size, 11, 11);&#10;            PopUpAnimation appear = new PopUpAnimation(grid);&#10;            appear.makeTransition();&#10;            appear.play(Animation.CombineType.GROUP);&#10;        } else {&#10;            grid.load(gamePane);&#10;            Paint.draw(grid, gamePane, size, 11, 11);&#10;&#10;        }&#10;&#10;        // 计时器&#10;        timer = new Timer(startTime, Time.INFINITE);&#10;        timer.begin();&#10;        // 设置定时器结束事件&#10;//        timer.setEndEvent(() -&gt; {&#10;//            isAuto = false;&#10;//            autoButton.setText(&quot;Auto&quot;);&#10;//            winAction();&#10;//        });&#10;        // 若有用户登录，开启定时自动保存任务&#10;        if (currentUser != null) {&#10;            timer.setTimingSession(() -&gt; {&#10;                autoSave();&#10;                System.out.println(&quot;Auto save&quot;);&#10;            }, SAVE_DURATION);&#10;        }&#10;        timeLabel.textProperty().bind(timer.messageProperty());&#10;        updateState();&#10;&#10;        // 初始化输入框&#10;        if (currentSave != null) {&#10;            saveName.setText(currentSave.saveName);&#10;        }&#10;&#10;        // 设置键盘监听&#10;        scene.setOnKeyPressed(event -&gt; {&#10;            if        (event.getCode() == KeyCode.UP    || event.getCode() == KeyCode.W) {&#10;                upAction();&#10;            } else if (event.getCode() == KeyCode.DOWN  || event.getCode() == KeyCode.S) {&#10;                downAction();&#10;            } else if (event.getCode() == KeyCode.LEFT  || event.getCode() == KeyCode.A) {&#10;                leftAction();&#10;            } else if (event.getCode() == KeyCode.RIGHT || event.getCode() == KeyCode.D) {&#10;                rightAction();&#10;            }&#10;        });&#10;&#10;    }&#10;&#10;    // restart按钮事件&#10;    @FXML&#10;    public void restartAction() {&#10;&#10;        if (isAuto) {&#10;            return;&#10;        }&#10;&#10;        grid = new Grid(size, mode);&#10;        grid.init(gamePane);&#10;        Paint.draw(grid, gamePane, size, 11, 11);&#10;        PopUpAnimation appear = new PopUpAnimation(grid);&#10;        appear.makeTransition();&#10;&#10;        appear.play(Animation.CombineType.GROUP);&#10;        upDateScore(scoreLabel, grid);&#10;&#10;        upDateStep(stepLabel, grid);&#10;        scene.getRoot().requestFocus();&#10;&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;        timeLabel.textProperty().bind(timer.messageProperty());&#10;        timer.reset();&#10;&#10;        /* 更新组件 */&#10;        moeState.setImage(new Image(&quot;/assets/moeState/default.png&quot;, 74.33, 110, false, false));&#10;&#10;    }&#10;&#10;    // undo按钮事件&#10;    @FXML&#10;    public void undoAction() {&#10;&#10;        if (isAuto) {&#10;            return;&#10;        }&#10;&#10;        grid.undo();&#10;        Paint.draw(grid, gamePane, size, 11, 11);&#10;        upDateScore(scoreLabel, grid);&#10;&#10;        upDateStep(stepLabel, grid);&#10;        scene.getRoot().requestFocus();&#10;&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;        // 计时器继续&#10;        if (timer != null) {&#10;            timer.continueTimer();&#10;        }&#10;&#10;        /* 更新组件 */&#10;        moeState.setImage(new Image(&quot;/assets/moeState/default.png&quot;, 74.33, 110, false, false));&#10;    }&#10;&#10;    // 按键事件&#10;    @FXML&#10;    public void upAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.UP);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;        makeAnimation(Direction.UP, distanceMap);&#10;//        slide.setOnFinished(event -&gt; {&#10;//&#10;//            GameUI.draw(grid, gamePane, size);&#10;//            updateState();&#10;//        });&#10;//&#10;//        slide.play(CombineType.GROUP);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void downAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.DOWN);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;&#10;        makeAnimation(Direction.DOWN, distanceMap);&#10;&#10;    }&#10;&#10;    private void makeAnimation(Direction down, Map&lt;Tile, Double&gt; distanceMap) {&#10;        // 移除键盘焦点&#10;        isEnd = true;&#10;&#10;        // 播放音效&#10;        if (moveSound != null) {&#10;            moveSound.stop();&#10;            moveSound.play();&#10;        }&#10;&#10;        MoveAnimation slide = new MoveAnimation(down, distanceMap);&#10;        slide.makeTransition();&#10;        slide.setOnFinished(event1 -&gt; {&#10;&#10;            Paint.draw(grid, gamePane, size, 11, 11);&#10;            PopUpAnimation appear = new PopUpAnimation(grid);&#10;            appear.makeTransition();&#10;            BounceAnimation bounce = new BounceAnimation(grid);&#10;            bounce.makeTransition();&#10;            ParallelTransition group1 = new ParallelTransition(bounce.getGroupTransition(), appear.getGroupTransition());&#10;            group1.play();&#10;&#10;            // 恢复键盘焦点&#10;            isEnd = false;&#10;&#10;            updateState();&#10;            scene.getRoot().requestFocus();&#10;&#10;&#10;        });&#10;        slide.play(Animation.CombineType.GROUP);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void leftAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.LEFT);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;&#10;        makeAnimation(Direction.LEFT, distanceMap);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void rightAction() {&#10;&#10;        if (isEnd) {&#10;            return;&#10;        }&#10;&#10;        Map&lt;Tile, Double&gt; distanceMap = grid.move(Direction.RIGHT);&#10;&#10;        if (distanceMap == null) {&#10;            return;&#10;        }&#10;&#10;        makeAnimation(Direction.RIGHT, distanceMap);&#10;&#10;    }&#10;&#10;    @FXML&#10;    public void hintAction() {&#10;        if (isAuto) {&#10;            return;&#10;        }&#10;        try {&#10;            Direction direction = AIsolver.findBestMove(grid, 5);&#10;            simulateMove(direction);&#10;            new Logger(mainPane, direction + &quot; !&quot;, 720.0, 9.0, LogType.success).show();&#10;        } catch (CloneNotSupportedException e) {&#10;            new Logger(mainPane, &quot;AI failed to find the best move!&quot;, 720.0, 9.0, LogType.error).show();&#10;        }&#10;    }&#10;&#10;    // 获取gamePane参数&#10;    public double getGamePaneWidth() {&#10;        return gamePane.getWidth();&#10;    }&#10;&#10;    public double getLayoutX() {&#10;        return gamePane.getLayoutX();&#10;    }&#10;&#10;    public double getLayoutY() {&#10;        return gamePane.getLayoutY();&#10;    }&#10;&#10;    /**&#10;     * @description: 初始化游戏板方法&#10;     * @param gamePane 游戏板&#10;     * @param size 游戏板大小&#10;     * @return void&#10;     */&#10;    public static void initGamePane(AnchorPane gamePane, int size) {&#10;&#10;        gamePane.getChildren().clear();&#10;&#10;        Paint.drawBackground(gamePane);&#10;        Paint.drawGrid(gamePane, size, 11.0, 11.0);&#10;    }&#10;&#10;    public void updateState() {&#10;        upDateScore(scoreLabel, grid);&#10;&#10;        upDateStep(stepLabel, grid);&#10;&#10;        if (grid.isWin()) {&#10;            isWin = true;&#10;&#10;            isAuto = false;&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/auto.png&quot;, 22.0, 22.0, false, false)));&#10;            timer.stop();&#10;            winAction();&#10;        } else if (grid.isOver()) {&#10;            isLose = true;&#10;&#10;            isAuto = false;&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/auto.png&quot;, 22.0, 22.0, false, false)));&#10;            timer.stop();&#10;            loseAction();&#10;        }&#10;    }&#10;&#10;&#10;    //&#10;    public void simulateMove(Direction direction) {&#10;        switch (direction) {&#10;            case UP:&#10;                upAction();&#10;                break;&#10;            case DOWN:&#10;                downAction();&#10;                break;&#10;            case LEFT:&#10;                leftAction();&#10;                break;&#10;            case RIGHT:&#10;                rightAction();&#10;                break;&#10;            default:&#10;                break;&#10;        }&#10;    }&#10;&#10;    // 更新分数&#10;    private void upDateScore(Label scoreLabel, Grid grid) {&#10;        scoreIncrease(grid.getScore() - score);&#10;        score = grid.getScore();&#10;        scoreLabel.setText(&quot;&quot; + score);&#10;    }&#10;&#10;    // 分数增加事件&#10;    public void scoreIncrease(int incScore) {&#10;        if (incScore &lt;= 0) return;&#10;        /* 分数增加动画 */&#10;        Text text = new Text(&quot;+&quot; + incScore);&#10;        text.setFont(Font.font(&quot;Arial&quot;, 20));&#10;        text.setFill(javafx.scene.paint.Color.rgb(119, 110, 101));&#10;        // 设置位置, x轴自适应居中&#10;        text.setLayoutX(scoreLabel.getLayoutX() + 120 - text.getLayoutBounds().getWidth() / 2);&#10;        text.setLayoutY(scoreLabel.getLayoutY() + 90);&#10;        // 设置动画&#10;        TranslateTransition transition = new TranslateTransition(Duration.millis(500), text);&#10;        transition.setByY(-50);&#10;        // 设置淡出效果&#10;        FadeTransition fade = new FadeTransition(Duration.millis(500), text);&#10;        fade.setFromValue(1.0);&#10;        fade.setToValue(0.0);&#10;        // 串联动画&#10;        ParallelTransition group = new ParallelTransition(transition, fade);&#10;        group.setOnFinished(event -&gt; {&#10;            mainPane.getChildren().remove(text);&#10;        });&#10;        mainPane.getChildren().add(text);&#10;        group.play();&#10;&#10;//        /* 分数增加组件更新 */&#10;//        moeState.setImage(new Image(&quot;/assets/logger/tanoshi.png&quot;, 96.68, 110, false, false));&#10;//        // 记录moeState的默认X坐标&#10;//        double defaultY = moeState.getLayoutY();&#10;//        // 弹跳动画&#10;//        TranslateTransition bounce = new TranslateTransition(Duration.millis(100), moeState);&#10;//        bounce.setByY(-10);&#10;//        bounce.setAutoReverse(true);&#10;//        bounce.setCycleCount(2);&#10;//&#10;//        bounce.setOnFinished(event -&gt; {&#10;//            moeState.setImage(new Image(&quot;/assets/moeState/default.png&quot;, 74.33, 110, false, false));&#10;//            moeState.setLayoutY(defaultY);&#10;//        });&#10;//        bounce.play();&#10;    }&#10;&#10;    // 更新步数&#10;    private static void upDateStep(Label stepLabel, Grid grid) {&#10;        stepLabel.setText(&quot;&quot; + grid.getStep());&#10;    }&#10;&#10;    private void winAction() {&#10;&#10;        isEnd = true;&#10;        // 绘制胜利界面&#10;        StackPane winPane = new StackPane();&#10;        winPane.setLayoutX(0);&#10;        winPane.setLayoutY(0);&#10;        winPane.setPrefSize(gamePane.getWidth(), gamePane.getHeight());&#10;        winPane.setStyle(&quot;&quot;&quot;&#10;                -fx-background-color: rgba(255,220,80,0.73);&#10;                -fx-background-radius: 3px;&#10;                -fx-background-size: cover;&#10;                -fx-background-position: center;&#10;                &quot;&quot;&quot;);&#10;        winPane.toFront();&#10;        winPane.setOpacity(0.6);&#10;&#10;        VBox winBox = new VBox();&#10;        winBox.setAlignment(javafx.geometry.Pos.CENTER);&#10;        // 显示“YOU WIN”标签&#10;        Label winLabel = new Label(&quot;YOU WIN&quot;);&#10;        winLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 50px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #ffffff;&#10;                -fx-effect: dropshadow(three-pass-box, #776e65, 10, 0, 0, 0);&quot;&quot;&quot;);&#10;        // 显示分数&#10;        Label scoreLabel = new Label(&quot;Score: &quot; + score);&#10;        scoreLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 30px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #776e65;&quot;&quot;&quot;);&#10;        // 添加到父节点&#10;        winBox.getChildren().addAll(winLabel, scoreLabel);&#10;        winPane.getChildren().add(winBox);&#10;&#10;        gamePane.getChildren().add(winPane);&#10;&#10;        /* 更新组件 */&#10;        moeState.setImage(new Image(&quot;/assets/logger/win.png&quot;, 96.68, 110, false, false));&#10;    }&#10;&#10;    private void loseAction() {&#10;&#10;        isEnd = true;&#10;        // 绘制失败界面&#10;        StackPane losePane = new StackPane();&#10;        losePane.setLayoutX(0);&#10;        losePane.setLayoutY(0);&#10;        losePane.setPrefSize(gamePane.getWidth(), gamePane.getHeight());&#10;        losePane.setStyle(&quot;&quot;&quot;&#10;                -fx-background-color: rgba(113,113,113,0.94);&#10;                -fx-background-radius: 3px;&#10;                -fx-background-size: cover;&#10;                -fx-background-position: center;&#10;                &quot;&quot;&quot;);&#10;        losePane.toFront();&#10;        losePane.setOpacity(0.6);&#10;&#10;        VBox loseBox = new VBox();&#10;        loseBox.setAlignment(javafx.geometry.Pos.CENTER);&#10;        // 显示“YOU LOSE”标签&#10;        Label loseLabel = new Label(&quot;YOU LOSE&quot;);&#10;        loseLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 50px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #1e1d1d;&#10;                -fx-effect: dropshadow(three-pass-box, #776e65, 10, 0, 0, 0);&quot;&quot;&quot;);&#10;        // 显示分数&#10;        Label scoreLabel = new Label(&quot;Score: &quot; + score);&#10;        scoreLabel.setStyle(&quot;&quot;&quot;&#10;                -fx-font-size: 30px;&#10;                -fx-font-weight: bold;&#10;                -fx-text-fill: #3a3a3a;&#10;                &quot;&quot;&quot;);&#10;        // 添加到父节点&#10;        loseBox.getChildren().addAll(loseLabel, scoreLabel);&#10;        losePane.getChildren().add(loseBox);&#10;&#10;        gamePane.getChildren().add(losePane);&#10;&#10;        /* 更新组件 */&#10;        moeState.setImage(new Image(&quot;/assets/logger/lose.png&quot;, 96.68, 110, false, false));&#10;    }&#10;&#10;    @FXML&#10;    private void manualSave() {&#10;&#10;        if (saveName.getText().isEmpty()) {&#10;            Tooltip tooltip = new Tooltip(&quot;Please enter a save name!&quot;);&#10;            tooltip.setFont(Font.font(&quot;Arial&quot;, 12));&#10;            tooltip.setShowDuration(javafx.util.Duration.millis(2000));&#10;            tooltip.setAutoHide(true);&#10;            tooltip.show(saveName, 1620, 500);&#10;            return;&#10;        }&#10;&#10;        // 保存存档&#10;        // 保存用户信息&#10;        Save.State state;&#10;        if (isWin) {&#10;            state = Save.State.WIN;&#10;        } else if (isLose) {&#10;            state = Save.State.LOSE;&#10;        } else {&#10;            state = Save.State.IN_PROGRESS;&#10;        }&#10;        &#10;        // 保存到User对应存档路径&#10;        currentSave = new Save(saveName.getText(), grid, state, new Time(timeLabel.getText()), new Date(), new Time());&#10;&#10;        try {&#10;            Saver.saveToJson(Saver.buildGson(currentSave), currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;);&#10;            new Logger(sidebarPane, &quot;Save successful! At &quot;, currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;, LogType.success).show();&#10;        } catch (IOException e) {&#10;            new Logger(sidebarPane, &quot;Save failed!&quot; + e.getMessage(), LogType.error).show();&#10;        }&#10;    }&#10;&#10;    private void autoSave() {&#10;        // 保存存档&#10;        // 保存用户信息&#10;        Save.State state;&#10;        if (isWin) {&#10;            state = Save.State.WIN;&#10;        } else if (isLose) {&#10;            state = Save.State.LOSE;&#10;        } else {&#10;            state = Save.State.IN_PROGRESS;&#10;        }&#10;        if (currentSave == null) {&#10;            String saveName = &quot;Auto &quot; + LocalDate.now();&#10;            currentSave = new Save(saveName, grid, state, startTime);&#10;            // 保存到User对应存档路径&#10;            try {&#10;                Saver.saveToJson(Saver.buildGson(currentSave), currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;);&#10;                new Logger(mainPane, &quot;Save successful! At &quot;, currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;, 720.0, 9.0, LogType.success).show();&#10;            } catch (IOException e) {&#10;                new Logger(mainPane, &quot;Save failed!&quot; + e.getMessage(),720.0, 9.0 ,LogType.error).show();&#10;            }&#10;            &#10;        } else {&#10;            currentSave = new Save(currentSave.saveName, grid, state, new Time(timeLabel.getText()));&#10;            // 保存到User对应存档路径&#10;            try {&#10;                Saver.saveToJson(Saver.buildGson(currentSave), currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;);&#10;                new Logger(mainPane, &quot;Save successful! At &quot;, currentUser.getPath() + &quot;/&quot; + currentSave.saveName + &quot;.json&quot;, 720.0, 9.0, LogType.success).show();&#10;            } catch (IOException e) {&#10;                new Logger(mainPane, &quot;Save failed!&quot; + e.getMessage(),720.0, 9.0 ,LogType.error).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    // 初始化GameUI&#10;    public static void init(int size, int mode, User user) {&#10;        GameUI.setSize(size);&#10;        GameUI.setMode(mode);&#10;        GameUI.setBoard(new Grid(size, mode));&#10;        GameUI.setStartTime(Time.ZERO);&#10;        currentUser = user;&#10;        currentSave = null;&#10;        isLoad = false;&#10;        isEnd = false;&#10;        isWin = false;&#10;        isLose = false;&#10;    }&#10;&#10;    private static void setStartTime(Time startTime) {&#10;        GameUI.startTime = startTime;&#10;    }&#10;&#10;&#10;    public static void init(int mode, int[][] board, Time startTime) {&#10;        GameUI.setSize(board.length);&#10;        GameUI.setMode(mode);&#10;        GameUI.setBoard(new Grid(board, mode));&#10;        GameUI.setStartTime(startTime);&#10;        isLoad = true;&#10;        isEnd = false;&#10;&#10;&#10;    }&#10;&#10;&#10;    // 读取存档时&#10;    public static void init(Grid grid, Time startTime, Save save) {&#10;        GameUI.setBoard(grid);&#10;        GameUI.setSize(grid.getSize());&#10;        GameUI.setMode(grid.getMode());&#10;        GameUI.setStartTime(startTime);&#10;        if (!PublicResource.isEmpty()) {&#10;            currentUser = PublicResource.getLoginUser();&#10;        }&#10;        GameUI.currentSave = save;&#10;        isLoad = true;&#10;        isEnd = false;&#10;&#10;        isWin = false;&#10;        isLose = false;&#10;    }&#10;&#10;    // 运行GameUI&#10;    public static void run() {&#10;        Platform.runLater(() -&gt; {&#10;            GameUI gameUI = new GameUI();&#10;            Stage primaryStage = new Stage();&#10;            try {&#10;                gameUI.start(primaryStage);&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;        });&#10;    }&#10;&#10;    public static void start() {&#10;        launch();&#10;    }&#10;&#10;&#10;    public static Grid getGrid() {&#10;        return grid;&#10;    }&#10;&#10;    public void autoAction() {&#10;&#10;        if (isWin || isLose) {&#10;            return;&#10;        }&#10;&#10;        if (isAuto) {&#10;            isAuto = false;&#10;            aiThread.endFlag = true;&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/auto.png&quot;, 22.0, 22.0, false, false)));&#10;            scene.getRoot().requestFocus();&#10;&#10;        } else {&#10;            isAuto = true;&#10;            aiThread = new AIThread(grid, this);&#10;            autoButton.setGraphic(new ImageView(new Image(&quot;/assets/buttonIcon/pause.png&quot;, 22.0, 22.0, false, false)));&#10;            new Thread(aiThread).start();&#10;&#10;        }&#10;    }&#10;&#10;    public void exitAction() {&#10;        if (isAuto) return;&#10;        timer.stop();&#10;        isEnd = true;&#10;        SlipToSidebarAnimation slip = new SlipToSidebarAnimation(mainPane,sidebarPane);&#10;        slip.makeTransition();&#10;        slip.play(Animation.CombineType.GROUP);&#10;        // 为mainPane添加毛玻璃效果&#10;        BoxBlur blur = new BoxBlur(10, 10, 3);&#10;        mainPane.setEffect(blur);&#10;&#10;        exitPane.setVisible(true);&#10;        try {&#10;            AnchorPane mask = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(&quot;/FXView/MaskPane.fxml&quot;)));&#10;            gameInterface.getChildren().add(mask);&#10;            scene.lookup(&quot;#arrow&quot;).setOnMousePressed(event -&gt; {&#10;                slipReform();&#10;                gameInterface.getChildren().remove(mask);&#10;            });&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public void returnToMain() {&#10;        MainUI.init(null);&#10;        MainUI.run();&#10;        exitGame();&#10;    }&#10;&#10;    public void exitGame() {&#10;        BackgroundMusic.pause();&#10;        // 弹出确认窗口 TODO&#10;        Stage stage = (Stage) gamePane.getScene().getWindow();&#10;        stage.close();&#10;    }&#10;&#10;    public void slipReform() {&#10;        SlipToSidebarAnimation slip = new SlipToSidebarAnimation(mainPane,sidebarPane,true);&#10;        slip.makeTransition();&#10;        slip.play(Animation.CombineType.GROUP);&#10;        mainPane.setEffect(null);&#10;        exitPane.setVisible(false);&#10;        savePane.setVisible(false);&#10;        isEnd = false;&#10;        if (!isWin &amp;&amp; !isLose) timer.continueTimer();&#10;    }&#10;&#10;    public void saveAction() {&#10;        if (isAuto) return;&#10;        if (currentUser == null) {&#10;            new Logger(mainPane, &quot;Please login first!&quot;,720.0,9.0,LogType.warn).show();&#10;            return;&#10;        }&#10;        timer.stop();&#10;        isEnd = true;&#10;        SlipToSidebarAnimation slip = new SlipToSidebarAnimation(mainPane,sidebarPane);&#10;        slip.makeTransition();&#10;        slip.play(Animation.CombineType.GROUP);&#10;        // 为mainPane添加毛玻璃效果&#10;        BoxBlur blur = new BoxBlur(10, 10, 3);&#10;        mainPane.setEffect(blur);&#10;&#10;        savePane.setVisible(true);&#10;        try {&#10;            AnchorPane mask = FXMLLoader.load(Objects.requireNonNull(getClass().getResource(&quot;/FXView/MaskPane.fxml&quot;)));&#10;            gameInterface.getChildren().add(mask);&#10;            if (currentSave != null) {&#10;                saveName.setText(currentSave.saveName);&#10;            }&#10;            scene.lookup(&quot;#arrow&quot;).setOnMousePressed(event -&gt; {&#10;                slipReform();&#10;                gameInterface.getChildren().remove(mask);&#10;            });&#10;        } catch (IOException e) {&#10;            new Logger(mainPane, e.getMessage(),720.0, 9.0, LogType.error).show();&#10;        }&#10;    }&#10;}" />
    <MESSAGE value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project version=&quot;4&quot;&gt;&#10;  &lt;component name=&quot;AutoImportSettings&quot;&gt;&#10;    &lt;option name=&quot;autoReloadType&quot; value=&quot;SELECTIVE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ChangeListManager&quot;&gt;&#10;    &lt;list default=&quot;true&quot; id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; afterDir=&quot;false&quot; /&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&quot; afterDir=&quot;false&quot; /&gt;&#10;    &lt;/list&gt;&#10;    &lt;option name=&quot;SHOW_DIALOG&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_CONFLICTS&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;LAST_RESOLUTION&quot; value=&quot;IGNORE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;FileTemplateManagerImpl&quot;&gt;&#10;    &lt;option name=&quot;RECENT_TEMPLATES&quot;&gt;&#10;      &lt;list&gt;&#10;        &lt;option value=&quot;FxmlFile&quot; /&gt;&#10;        &lt;option value=&quot;Interface&quot; /&gt;&#10;        &lt;option value=&quot;Class&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Git.Settings&quot;&gt;&#10;    &lt;option name=&quot;RECENT_BRANCH_BY_REPOSITORY&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;D:/IdeaProjects/Gaming2048&quot; value=&quot;dev&quot; /&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;    &lt;option name=&quot;RECENT_GIT_ROOT_PATH&quot; value=&quot;D:/IdeaProjects/Gaming2048&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;GitHubPullRequestSearchHistory&quot;&gt;&lt;![CDATA[{&#10;  &quot;lastFilter&quot;: {&#10;    &quot;state&quot;: &quot;OPEN&quot;,&#10;    &quot;assignee&quot;: &quot;SUSTechCJK2023&quot;&#10;  }&#10;}]]&gt;&lt;/component&gt;&#10;  &lt;component name=&quot;GithubPullRequestsUISettings&quot;&gt;&#10;    &lt;option name=&quot;selectedUrlAndAccountId&quot;&gt;&#10;      &lt;UrlAndAccount&gt;&#10;        &lt;option name=&quot;accountId&quot; value=&quot;8dc58497-80d5-4549-a909-aef707eb60dd&quot; /&gt;&#10;        &lt;option name=&quot;url&quot; value=&quot;https://github.com/zaddle55/Gaming2048.git&quot; /&gt;&#10;      &lt;/UrlAndAccount&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;MarkdownSettingsMigration&quot;&gt;&#10;    &lt;option name=&quot;stateVersion&quot; value=&quot;1&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectColorInfo&quot;&gt;{&#10;  &amp;quot;associatedIndex&amp;quot;: 3&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;ProjectId&quot; id=&quot;2gtu7oicMVlC4ncjClqNBKWrEOa&quot; /&gt;&#10;  &lt;component name=&quot;ProjectLevelVcsManager&quot; settingsEditedManually=&quot;true&quot;&gt;&#10;    &lt;ConfirmationsSetting value=&quot;2&quot; id=&quot;Add&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectViewState&quot;&gt;&#10;    &lt;option name=&quot;hideEmptyMiddlePackages&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;openDirectoriesWithSingleClick&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;showLibraryContents&quot; value=&quot;true&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;PropertiesComponent&quot;&gt;{&#10;  &amp;quot;keyToString&amp;quot;: {&#10;    &amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;git-widget-placeholder&amp;quot;: &amp;quot;CJKProject__202405&amp;quot;,&#10;    &amp;quot;kotlin-language-version-configured&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.detected.package.eslint&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.selected.package.eslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;node.js.selected.package.tslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;nodejs_package_manager_path&amp;quot;: &amp;quot;npm&amp;quot;,&#10;    &amp;quot;settings.editor.selected.configurable&amp;quot;: &amp;quot;preferences.pluginManager&amp;quot;,&#10;    &amp;quot;vue.rearranger.settings.migration&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;应用程序.GameApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.Main.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.TestMainUIApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;&#10;  }&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;RunManager&quot;&gt;&#10;    &lt;configuration name=&quot;TestMainUIApplication&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot;&gt;&#10;      &lt;option name=&quot;ALTERNATIVE_JRE_PATH&quot; value=&quot;21&quot; /&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;Main&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;PROGRAM_PARAMETERS&quot; value=&quot;--module-path     &amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;recent_temporary&gt;&#10;      &lt;list&gt;&#10;        &lt;item itemvalue=&quot;应用程序.TestMainUIApplication&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/recent_temporary&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;SpellCheckerSettings&quot; RuntimeDictionaries=&quot;0&quot; Folders=&quot;0&quot; CustomDictionaries=&quot;0&quot; DefaultDictionary=&quot;项目级&quot; UseSingleDictionary=&quot;true&quot; transferred=&quot;true&quot; /&gt;&#10;  &lt;component name=&quot;TaskManager&quot;&gt;&#10;    &lt;task id=&quot;LOCAL-00001&quot; summary=&quot;Implement multiple player management and save function&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716480870818&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00001&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00001&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716480870818&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task active=&quot;true&quot; id=&quot;Default&quot; summary=&quot;默认任务&quot;&gt;&#10;      &lt;changelist id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;Implement multiple player management and save function&quot; /&gt;&#10;      &lt;created&gt;1716529031291&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;updated&gt;1716529031291&lt;/updated&gt;&#10;      &lt;workItem from=&quot;1716529033750&quot; duration=&quot;10429000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716611936691&quot; duration=&quot;178000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716612124380&quot; duration=&quot;25412000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716702297487&quot; duration=&quot;11293000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716713611578&quot; duration=&quot;244000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716717775841&quot; duration=&quot;4053000&quot; /&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00002&quot; summary=&quot;Modify GameUI&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716632335330&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00002&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00002&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716632335331&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00003&quot; summary=&quot;Modify GameUI with sidebar&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716650344770&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00003&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00003&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716650344770&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00004&quot; summary=&quot;Modify Game Runtime logic&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716711603420&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00004&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00004&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716711603420&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00005&quot; summary=&quot;Apply auto save func&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716713655208&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00005&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00005&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716713655208&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00006&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716717860221&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00006&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00006&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716717860221&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00007&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716721663720&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00007&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00007&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716721663720&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00008&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983228635&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00008&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00008&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983228635&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00009&quot; summary=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983259273&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00009&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00009&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983259273&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00010&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot; selected=&amp;quot;应用程序.TestMainUIApplication&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;GameApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;Main&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;list&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;216&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;59&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;212&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;61&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;330&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;66&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;132&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;68&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983305328&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00010&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00010&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983305328&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00011&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    protected static double evaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static double evaluate(Direction d) {&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles = 0;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                for (int a=0; j+a &amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;#10;                }&amp;#10;                for (int b=0; i+b &amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyD += 1;&amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyU += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        int emptyTile = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;#10;                    emptyTile += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        return evaluationScore;&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluate(Direction.DOWN) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluate(Direction.LEFT) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluate(Direction.RIGHT) &amp;gt; evaluate(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716985108246&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00011&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00011&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716985108246&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00012&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        Random random = new Random();&amp;#10;        int randomNum = random.nextInt(4);&amp;#10;        if (randomNum == 0) {&amp;#10;            move(Direction.UP);&amp;#10;        } else if (randomNum == 1) {&amp;#10;            move(Direction.DOWN);&amp;#10;        } else if (randomNum == 2) {&amp;#10;            move(Direction.LEFT);&amp;#10;        } else {&amp;#10;            move(Direction.RIGHT);&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716988945401&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00012&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00012&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716988945401&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00013&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716990905746&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00013&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00013&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716990905746&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00014&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716991858020&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00014&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00014&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716991858020&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00015&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716995533105&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00015&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00015&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716995533105&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00016&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717031088690&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00016&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00016&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717031088690&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00017&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717031151193&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00017&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00017&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717031151193&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00018&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032087165&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00018&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00018&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032087165&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00019&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_BRANCH_BY_REPOSITORY&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; value=&amp;quot;dev&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GitHubPullRequestSearchHistory&amp;quot;&amp;gt;&amp;lt;![CDATA[{&amp;#10;  &amp;quot;lastFilter&amp;quot;: {&amp;#10;    &amp;quot;state&amp;quot;: &amp;quot;OPEN&amp;quot;,&amp;#10;    &amp;quot;assignee&amp;quot;: &amp;quot;SUSTechCJK2023&amp;quot;&amp;#10;  }&amp;#10;}]]&amp;gt;&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GithubPullRequestsUISettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;selectedUrlAndAccountId&amp;quot;&amp;gt;&amp;#10;      &amp;lt;UrlAndAccount&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;accountId&amp;quot; value=&amp;quot;8dc58497-80d5-4549-a909-aef707eb60dd&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;url&amp;quot; value=&amp;quot;https://github.com/zaddle55/Gaming2048.git&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/UrlAndAccount&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;ALTERNATIVE_JRE_PATH&amp;quot; value=&amp;quot;21&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;PROGRAM_PARAMETERS&amp;quot; value=&amp;quot;--module-path     &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00010&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983305328&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983305328&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00011&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716985108246&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716985108246&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00012&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716988945401&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716988945401&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00013&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716990905746&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716990905746&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00014&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716991858020&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716991858020&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00015&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716995533105&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716995533105&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00016&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031088690&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031088690&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00017&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031151193&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031151193&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00018&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717032087165&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717032087165&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;19&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;evaluateDirection(direction)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;getDirection()&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032118536&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00019&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00019&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032118536&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00020&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    // 为每种移动方向“评分”，哪种方向评分最高，采取哪种方向移动&amp;#10;    protected static double upEvaluationScore = 0;&amp;#10;    protected static double downEvaluationScore = 0;&amp;#10;    protected static double leftEvaluationScore = 0;&amp;#10;    protected static double rightEvaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.5; // 单调性权重&amp;#10;    protected static final double smoothWeight = -0.2; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.5; // 总空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static void evaluate() {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        // 1. 单调性评估&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j+1 &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyR += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyL += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (monotonyL * monotonyWeight);&amp;#10;        rightEvaluationScore += (monotonyR * monotonyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i+1 &amp;lt; GameUI.getGrid().getSize(); i += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;lt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyD += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;gt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyU += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (monotonyU * monotonyWeight);&amp;#10;        downEvaluationScore += (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        // 2. 平滑性评估&amp;#10;        int smoothU = 0;&amp;#10;        int smoothD = 0;&amp;#10;        int smoothL = 0;&amp;#10;        int smoothR = 0;&amp;#10;        for (int i=1; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i-1][j] != 0)) {&amp;#10;                    smoothU += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize() - 1; i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+1][j] != 0)) {&amp;#10;                    smoothD += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=1; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j-1] != 0)) {&amp;#10;                    smoothL += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize() - 1; j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+1] != 0)) {&amp;#10;                    smoothR += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += smoothU * smoothWeight;&amp;#10;        downEvaluationScore += smoothD * smoothWeight;&amp;#10;        leftEvaluationScore += smoothL * smoothWeight;&amp;#10;        rightEvaluationScore += smoothR * smoothWeight;&amp;#10;        // 找连续的同数值格子个数&amp;#10;        int numOfEqualTiles;&amp;#10;        int equalU = 0;&amp;#10;        int equalD = 0;&amp;#10;        int equalL = 0;&amp;#10;        int equalR = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a+1] == GameUI.getGrid().getBoard()[i][j+a])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalL += 1;&amp;#10;                        equalR += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (equalL * smoothWeight * (-10));&amp;#10;        rightEvaluationScore += (equalR * smoothWeight * (-10));&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a+1][j] == GameUI.getGrid().getBoard()[i+a][j])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalU += 1;&amp;#10;                        equalD += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (equalU * smoothWeight * (-10));&amp;#10;        downEvaluationScore += (equalD * smoothWeight * (-10));&amp;#10;&amp;#10;        // 3. 总空格数评估&amp;#10;        int numOfEmptyTiles;&amp;#10;        int emptyRow = 0;&amp;#10;        int emptyColumn = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i][j+a] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyRow += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        rightEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; i+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+a][j] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyColumn += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;        downEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;    }&amp;#10;    protected static double evaluateDirection(Direction d) {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        evaluate();&amp;#10;        if (d == Direction.UP) {&amp;#10;            return upEvaluationScore;&amp;#10;        } else if (d == Direction.DOWN) {&amp;#10;            return downEvaluationScore;&amp;#10;        } else if (d == Direction.LEFT) {&amp;#10;            return leftEvaluationScore;&amp;#10;        } else if (d == Direction.RIGHT) {&amp;#10;            return rightEvaluationScore;&amp;#10;        } else {&amp;#10;            return 0;&amp;#10;        }&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluateDirection(Direction.DOWN) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.LEFT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.RIGHT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032140325&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00020&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00020&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032140325&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00021&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717034510817&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00021&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00021&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717034510817&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00022&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717034529581&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00022&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00022&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717034529581&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;option name=&quot;localTasksCounter&quot; value=&quot;23&quot; /&gt;&#10;    &lt;servers /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;TypeScriptGeneratedFilesManager&quot;&gt;&#10;    &lt;option name=&quot;version&quot; value=&quot;3&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Vcs.Log.Tabs.Properties&quot;&gt;&#10;    &lt;option name=&quot;TAB_STATES&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;MAIN&quot;&gt;&#10;          &lt;value&gt;&#10;            &lt;State /&gt;&#10;          &lt;/value&gt;&#10;        &lt;/entry&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;VcsManagerConfiguration&quot;&gt;&#10;    &lt;MESSAGE value=&quot;Merge branch 'dev' into zaddle&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Add move sound effect and apply custom font&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Implement multiple player management and save function&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI with sidebar&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify Game Runtime logic&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Apply auto save func&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Version:1.0.0&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot; selected=&amp;quot;应用程序.TestMainUIApplication&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;GameApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;Main&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;list&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;216&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;59&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;212&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;61&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;330&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;66&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;132&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;68&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    protected static double evaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static double evaluate(Direction d) {&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles = 0;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                for (int a=0; j+a &amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;#10;                }&amp;#10;                for (int b=0; i+b &amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyD += 1;&amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyU += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        int emptyTile = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;#10;                    emptyTile += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        return evaluationScore;&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluate(Direction.DOWN) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluate(Direction.LEFT) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluate(Direction.RIGHT) &amp;gt; evaluate(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        Random random = new Random();&amp;#10;        int randomNum = random.nextInt(4);&amp;#10;        if (randomNum == 0) {&amp;#10;            move(Direction.UP);&amp;#10;        } else if (randomNum == 1) {&amp;#10;            move(Direction.DOWN);&amp;#10;        } else if (randomNum == 2) {&amp;#10;            move(Direction.LEFT);&amp;#10;        } else {&amp;#10;            move(Direction.RIGHT);&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_BRANCH_BY_REPOSITORY&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; value=&amp;quot;dev&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GitHubPullRequestSearchHistory&amp;quot;&amp;gt;&amp;lt;![CDATA[{&amp;#10;  &amp;quot;lastFilter&amp;quot;: {&amp;#10;    &amp;quot;state&amp;quot;: &amp;quot;OPEN&amp;quot;,&amp;#10;    &amp;quot;assignee&amp;quot;: &amp;quot;SUSTechCJK2023&amp;quot;&amp;#10;  }&amp;#10;}]]&amp;gt;&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GithubPullRequestsUISettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;selectedUrlAndAccountId&amp;quot;&amp;gt;&amp;#10;      &amp;lt;UrlAndAccount&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;accountId&amp;quot; value=&amp;quot;8dc58497-80d5-4549-a909-aef707eb60dd&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;url&amp;quot; value=&amp;quot;https://github.com/zaddle55/Gaming2048.git&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/UrlAndAccount&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;ALTERNATIVE_JRE_PATH&amp;quot; value=&amp;quot;21&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;PROGRAM_PARAMETERS&amp;quot; value=&amp;quot;--module-path     &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00010&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983305328&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983305328&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00011&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716985108246&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716985108246&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00012&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716988945401&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716988945401&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00013&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716990905746&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716990905746&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00014&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716991858020&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716991858020&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00015&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716995533105&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716995533105&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00016&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031088690&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031088690&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00017&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031151193&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031151193&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00018&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717032087165&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717032087165&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;19&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;evaluateDirection(direction)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;getDirection()&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    // 为每种移动方向“评分”，哪种方向评分最高，采取哪种方向移动&amp;#10;    protected static double upEvaluationScore = 0;&amp;#10;    protected static double downEvaluationScore = 0;&amp;#10;    protected static double leftEvaluationScore = 0;&amp;#10;    protected static double rightEvaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.5; // 单调性权重&amp;#10;    protected static final double smoothWeight = -0.2; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.5; // 总空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static void evaluate() {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        // 1. 单调性评估&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j+1 &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyR += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyL += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (monotonyL * monotonyWeight);&amp;#10;        rightEvaluationScore += (monotonyR * monotonyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i+1 &amp;lt; GameUI.getGrid().getSize(); i += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;lt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyD += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;gt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyU += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (monotonyU * monotonyWeight);&amp;#10;        downEvaluationScore += (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        // 2. 平滑性评估&amp;#10;        int smoothU = 0;&amp;#10;        int smoothD = 0;&amp;#10;        int smoothL = 0;&amp;#10;        int smoothR = 0;&amp;#10;        for (int i=1; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i-1][j] != 0)) {&amp;#10;                    smoothU += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize() - 1; i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+1][j] != 0)) {&amp;#10;                    smoothD += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=1; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j-1] != 0)) {&amp;#10;                    smoothL += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize() - 1; j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+1] != 0)) {&amp;#10;                    smoothR += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += smoothU * smoothWeight;&amp;#10;        downEvaluationScore += smoothD * smoothWeight;&amp;#10;        leftEvaluationScore += smoothL * smoothWeight;&amp;#10;        rightEvaluationScore += smoothR * smoothWeight;&amp;#10;        // 找连续的同数值格子个数&amp;#10;        int numOfEqualTiles;&amp;#10;        int equalU = 0;&amp;#10;        int equalD = 0;&amp;#10;        int equalL = 0;&amp;#10;        int equalR = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a+1] == GameUI.getGrid().getBoard()[i][j+a])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalL += 1;&amp;#10;                        equalR += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (equalL * smoothWeight * (-10));&amp;#10;        rightEvaluationScore += (equalR * smoothWeight * (-10));&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a+1][j] == GameUI.getGrid().getBoard()[i+a][j])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalU += 1;&amp;#10;                        equalD += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (equalU * smoothWeight * (-10));&amp;#10;        downEvaluationScore += (equalD * smoothWeight * (-10));&amp;#10;&amp;#10;        // 3. 总空格数评估&amp;#10;        int numOfEmptyTiles;&amp;#10;        int emptyRow = 0;&amp;#10;        int emptyColumn = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i][j+a] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyRow += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        rightEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; i+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+a][j] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyColumn += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;        downEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;    }&amp;#10;    protected static double evaluateDirection(Direction d) {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        evaluate();&amp;#10;        if (d == Direction.UP) {&amp;#10;            return upEvaluationScore;&amp;#10;        } else if (d == Direction.DOWN) {&amp;#10;            return downEvaluationScore;&amp;#10;        } else if (d == Direction.LEFT) {&amp;#10;            return leftEvaluationScore;&amp;#10;        } else if (d == Direction.RIGHT) {&amp;#10;            return rightEvaluationScore;&amp;#10;        } else {&amp;#10;            return 0;&amp;#10;        }&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluateDirection(Direction.DOWN) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.LEFT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.RIGHT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;option name=&quot;LAST_COMMIT_MESSAGE&quot; value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;XDebuggerManager&quot;&gt;&#10;    &lt;breakpoint-manager&gt;&#10;      &lt;breakpoints&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&lt;/url&gt;&#10;          &lt;line&gt;34&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;42&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;218&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;58&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;214&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;60&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;550&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;62&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-method&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&lt;/url&gt;&#10;          &lt;line&gt;64&lt;/line&gt;&#10;          &lt;properties class=&quot;controller.MainUI&quot;&gt;&#10;            &lt;option name=&quot;EMULATED&quot; value=&quot;true&quot; /&gt;&#10;            &lt;option name=&quot;WATCH_EXIT&quot; value=&quot;false&quot; /&gt;&#10;          &lt;/properties&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;47&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;      &lt;/breakpoints&gt;&#10;    &lt;/breakpoint-manager&gt;&#10;    &lt;watches-manager&gt;&#10;      &lt;configuration name=&quot;Application&quot;&gt;&#10;        &lt;watch expression=&quot;Saver.makeDir(savePath)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;currentIndex&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;MainUI.downPanes&quot; language=&quot;JAVA&quot; custom=&quot;controller.MainUI&quot; /&gt;&#10;        &lt;watch expression=&quot;evaluateDirection(direction)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;getDirection()&quot; language=&quot;JAVA&quot; /&gt;&#10;      &lt;/configuration&gt;&#10;    &lt;/watches-manager&gt;&#10;  &lt;/component&gt;&#10;&lt;/project&gt;" />
    <option name="LAST_COMMIT_MESSAGE" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project version=&quot;4&quot;&gt;&#10;  &lt;component name=&quot;AutoImportSettings&quot;&gt;&#10;    &lt;option name=&quot;autoReloadType&quot; value=&quot;SELECTIVE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ChangeListManager&quot;&gt;&#10;    &lt;list default=&quot;true&quot; id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&quot; afterDir=&quot;false&quot; /&gt;&#10;      &lt;change beforePath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&quot; beforeDir=&quot;false&quot; afterPath=&quot;D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&quot; afterDir=&quot;false&quot; /&gt;&#10;    &lt;/list&gt;&#10;    &lt;option name=&quot;SHOW_DIALOG&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_CONFLICTS&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&quot; value=&quot;false&quot; /&gt;&#10;    &lt;option name=&quot;LAST_RESOLUTION&quot; value=&quot;IGNORE&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;FileTemplateManagerImpl&quot;&gt;&#10;    &lt;option name=&quot;RECENT_TEMPLATES&quot;&gt;&#10;      &lt;list&gt;&#10;        &lt;option value=&quot;FxmlFile&quot; /&gt;&#10;        &lt;option value=&quot;Interface&quot; /&gt;&#10;        &lt;option value=&quot;Class&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Git.Settings&quot;&gt;&#10;    &lt;option name=&quot;RECENT_BRANCH_BY_REPOSITORY&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;D:/IdeaProjects/Gaming2048&quot; value=&quot;dev&quot; /&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;    &lt;option name=&quot;RECENT_GIT_ROOT_PATH&quot; value=&quot;D:/IdeaProjects/Gaming2048&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;GitHubPullRequestSearchHistory&quot;&gt;&lt;![CDATA[{&#10;  &quot;lastFilter&quot;: {&#10;    &quot;state&quot;: &quot;OPEN&quot;,&#10;    &quot;assignee&quot;: &quot;SUSTechCJK2023&quot;&#10;  }&#10;}]]&gt;&lt;/component&gt;&#10;  &lt;component name=&quot;GithubPullRequestsUISettings&quot;&gt;&#10;    &lt;option name=&quot;selectedUrlAndAccountId&quot;&gt;&#10;      &lt;UrlAndAccount&gt;&#10;        &lt;option name=&quot;accountId&quot; value=&quot;8dc58497-80d5-4549-a909-aef707eb60dd&quot; /&gt;&#10;        &lt;option name=&quot;url&quot; value=&quot;https://github.com/zaddle55/Gaming2048.git&quot; /&gt;&#10;      &lt;/UrlAndAccount&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;MarkdownSettingsMigration&quot;&gt;&#10;    &lt;option name=&quot;stateVersion&quot; value=&quot;1&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectColorInfo&quot;&gt;{&#10;  &amp;quot;associatedIndex&amp;quot;: 3&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;ProjectId&quot; id=&quot;2gtu7oicMVlC4ncjClqNBKWrEOa&quot; /&gt;&#10;  &lt;component name=&quot;ProjectLevelVcsManager&quot; settingsEditedManually=&quot;true&quot;&gt;&#10;    &lt;ConfirmationsSetting value=&quot;2&quot; id=&quot;Add&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;ProjectViewState&quot;&gt;&#10;    &lt;option name=&quot;hideEmptyMiddlePackages&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;openDirectoriesWithSingleClick&quot; value=&quot;true&quot; /&gt;&#10;    &lt;option name=&quot;showLibraryContents&quot; value=&quot;true&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;PropertiesComponent&quot;&gt;{&#10;  &amp;quot;keyToString&amp;quot;: {&#10;    &amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;git-widget-placeholder&amp;quot;: &amp;quot;CJKProject__202405&amp;quot;,&#10;    &amp;quot;kotlin-language-version-configured&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.detected.package.eslint&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;node.js.selected.package.eslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;node.js.selected.package.tslint&amp;quot;: &amp;quot;(autodetect)&amp;quot;,&#10;    &amp;quot;nodejs_package_manager_path&amp;quot;: &amp;quot;npm&amp;quot;,&#10;    &amp;quot;settings.editor.selected.configurable&amp;quot;: &amp;quot;preferences.pluginManager&amp;quot;,&#10;    &amp;quot;vue.rearranger.settings.migration&amp;quot;: &amp;quot;true&amp;quot;,&#10;    &amp;quot;应用程序.GameApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.Main.executor&amp;quot;: &amp;quot;Run&amp;quot;,&#10;    &amp;quot;应用程序.TestMainUIApplication.executor&amp;quot;: &amp;quot;Run&amp;quot;&#10;  }&#10;}&lt;/component&gt;&#10;  &lt;component name=&quot;RunManager&quot;&gt;&#10;    &lt;configuration name=&quot;TestMainUIApplication&quot; type=&quot;Application&quot; factoryName=&quot;Application&quot;&gt;&#10;      &lt;option name=&quot;ALTERNATIVE_JRE_PATH&quot; value=&quot;21&quot; /&gt;&#10;      &lt;option name=&quot;MAIN_CLASS_NAME&quot; value=&quot;Main&quot; /&gt;&#10;      &lt;module name=&quot;Reach2048&quot; /&gt;&#10;      &lt;option name=&quot;PROGRAM_PARAMETERS&quot; value=&quot;--module-path     &amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&quot; /&gt;&#10;      &lt;method v=&quot;2&quot;&gt;&#10;        &lt;option name=&quot;Make&quot; enabled=&quot;true&quot; /&gt;&#10;      &lt;/method&gt;&#10;    &lt;/configuration&gt;&#10;    &lt;recent_temporary&gt;&#10;      &lt;list&gt;&#10;        &lt;item itemvalue=&quot;应用程序.TestMainUIApplication&quot; /&gt;&#10;      &lt;/list&gt;&#10;    &lt;/recent_temporary&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;SpellCheckerSettings&quot; RuntimeDictionaries=&quot;0&quot; Folders=&quot;0&quot; CustomDictionaries=&quot;0&quot; DefaultDictionary=&quot;项目级&quot; UseSingleDictionary=&quot;true&quot; transferred=&quot;true&quot; /&gt;&#10;  &lt;component name=&quot;TaskManager&quot;&gt;&#10;    &lt;task id=&quot;LOCAL-00001&quot; summary=&quot;Implement multiple player management and save function&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716480870818&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00001&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00001&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716480870818&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task active=&quot;true&quot; id=&quot;Default&quot; summary=&quot;默认任务&quot;&gt;&#10;      &lt;changelist id=&quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&quot; name=&quot;更改&quot; comment=&quot;Implement multiple player management and save function&quot; /&gt;&#10;      &lt;created&gt;1716529031291&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;Default&quot; /&gt;&#10;      &lt;updated&gt;1716529031291&lt;/updated&gt;&#10;      &lt;workItem from=&quot;1716529033750&quot; duration=&quot;10429000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716611936691&quot; duration=&quot;178000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716612124380&quot; duration=&quot;25412000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716702297487&quot; duration=&quot;11293000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716713611578&quot; duration=&quot;244000&quot; /&gt;&#10;      &lt;workItem from=&quot;1716717775841&quot; duration=&quot;4053000&quot; /&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00002&quot; summary=&quot;Modify GameUI&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716632335330&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00002&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00002&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716632335331&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00003&quot; summary=&quot;Modify GameUI with sidebar&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716650344770&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00003&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00003&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716650344770&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00004&quot; summary=&quot;Modify Game Runtime logic&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716711603420&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00004&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00004&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716711603420&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00005&quot; summary=&quot;Apply auto save func&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716713655208&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00005&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00005&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716713655208&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00006&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716717860221&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00006&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00006&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716717860221&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00007&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716721663720&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00007&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00007&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716721663720&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00008&quot; summary=&quot;Version:1.0.0&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983228635&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00008&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00008&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983228635&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00009&quot; summary=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983259273&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00009&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00009&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983259273&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00010&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot; selected=&amp;quot;应用程序.TestMainUIApplication&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;GameApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;Main&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;list&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;216&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;59&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;212&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;61&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;330&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;66&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;132&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;68&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716983305328&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00010&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00010&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716983305328&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00011&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    protected static double evaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static double evaluate(Direction d) {&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles = 0;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                for (int a=0; j+a &amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;#10;                }&amp;#10;                for (int b=0; i+b &amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyD += 1;&amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyU += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        int emptyTile = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;#10;                    emptyTile += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        return evaluationScore;&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluate(Direction.DOWN) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluate(Direction.LEFT) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluate(Direction.RIGHT) &amp;gt; evaluate(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716985108246&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00011&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00011&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716985108246&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00012&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        Random random = new Random();&amp;#10;        int randomNum = random.nextInt(4);&amp;#10;        if (randomNum == 0) {&amp;#10;            move(Direction.UP);&amp;#10;        } else if (randomNum == 1) {&amp;#10;            move(Direction.DOWN);&amp;#10;        } else if (randomNum == 2) {&amp;#10;            move(Direction.LEFT);&amp;#10;        } else {&amp;#10;            move(Direction.RIGHT);&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716988945401&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00012&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00012&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716988945401&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00013&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716990905746&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00013&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00013&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716990905746&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00014&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716991858020&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00014&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00014&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716991858020&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00015&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1716995533105&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00015&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00015&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1716995533105&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00016&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717031088690&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00016&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00016&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717031088690&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00017&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717031151193&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00017&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00017&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717031151193&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00018&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032087165&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00018&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00018&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032087165&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00019&quot; summary=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_BRANCH_BY_REPOSITORY&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; value=&amp;quot;dev&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GitHubPullRequestSearchHistory&amp;quot;&amp;gt;&amp;lt;![CDATA[{&amp;#10;  &amp;quot;lastFilter&amp;quot;: {&amp;#10;    &amp;quot;state&amp;quot;: &amp;quot;OPEN&amp;quot;,&amp;#10;    &amp;quot;assignee&amp;quot;: &amp;quot;SUSTechCJK2023&amp;quot;&amp;#10;  }&amp;#10;}]]&amp;gt;&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GithubPullRequestsUISettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;selectedUrlAndAccountId&amp;quot;&amp;gt;&amp;#10;      &amp;lt;UrlAndAccount&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;accountId&amp;quot; value=&amp;quot;8dc58497-80d5-4549-a909-aef707eb60dd&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;url&amp;quot; value=&amp;quot;https://github.com/zaddle55/Gaming2048.git&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/UrlAndAccount&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;ALTERNATIVE_JRE_PATH&amp;quot; value=&amp;quot;21&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;PROGRAM_PARAMETERS&amp;quot; value=&amp;quot;--module-path     &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00010&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983305328&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983305328&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00011&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716985108246&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716985108246&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00012&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716988945401&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716988945401&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00013&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716990905746&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716990905746&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00014&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716991858020&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716991858020&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00015&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716995533105&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716995533105&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00016&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031088690&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031088690&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00017&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031151193&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031151193&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00018&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717032087165&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717032087165&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;19&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;evaluateDirection(direction)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;getDirection()&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032118536&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00019&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00019&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032118536&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00020&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    // 为每种移动方向“评分”，哪种方向评分最高，采取哪种方向移动&amp;#10;    protected static double upEvaluationScore = 0;&amp;#10;    protected static double downEvaluationScore = 0;&amp;#10;    protected static double leftEvaluationScore = 0;&amp;#10;    protected static double rightEvaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.5; // 单调性权重&amp;#10;    protected static final double smoothWeight = -0.2; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.5; // 总空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static void evaluate() {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        // 1. 单调性评估&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j+1 &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyR += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyL += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (monotonyL * monotonyWeight);&amp;#10;        rightEvaluationScore += (monotonyR * monotonyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i+1 &amp;lt; GameUI.getGrid().getSize(); i += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;lt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyD += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;gt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyU += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (monotonyU * monotonyWeight);&amp;#10;        downEvaluationScore += (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        // 2. 平滑性评估&amp;#10;        int smoothU = 0;&amp;#10;        int smoothD = 0;&amp;#10;        int smoothL = 0;&amp;#10;        int smoothR = 0;&amp;#10;        for (int i=1; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i-1][j] != 0)) {&amp;#10;                    smoothU += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize() - 1; i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+1][j] != 0)) {&amp;#10;                    smoothD += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=1; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j-1] != 0)) {&amp;#10;                    smoothL += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize() - 1; j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+1] != 0)) {&amp;#10;                    smoothR += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += smoothU * smoothWeight;&amp;#10;        downEvaluationScore += smoothD * smoothWeight;&amp;#10;        leftEvaluationScore += smoothL * smoothWeight;&amp;#10;        rightEvaluationScore += smoothR * smoothWeight;&amp;#10;        // 找连续的同数值格子个数&amp;#10;        int numOfEqualTiles;&amp;#10;        int equalU = 0;&amp;#10;        int equalD = 0;&amp;#10;        int equalL = 0;&amp;#10;        int equalR = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a+1] == GameUI.getGrid().getBoard()[i][j+a])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalL += 1;&amp;#10;                        equalR += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (equalL * smoothWeight * (-10));&amp;#10;        rightEvaluationScore += (equalR * smoothWeight * (-10));&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a+1][j] == GameUI.getGrid().getBoard()[i+a][j])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalU += 1;&amp;#10;                        equalD += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (equalU * smoothWeight * (-10));&amp;#10;        downEvaluationScore += (equalD * smoothWeight * (-10));&amp;#10;&amp;#10;        // 3. 总空格数评估&amp;#10;        int numOfEmptyTiles;&amp;#10;        int emptyRow = 0;&amp;#10;        int emptyColumn = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i][j+a] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyRow += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        rightEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; i+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+a][j] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyColumn += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;        downEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;    }&amp;#10;    protected static double evaluateDirection(Direction d) {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        evaluate();&amp;#10;        if (d == Direction.UP) {&amp;#10;            return upEvaluationScore;&amp;#10;        } else if (d == Direction.DOWN) {&amp;#10;            return downEvaluationScore;&amp;#10;        } else if (d == Direction.LEFT) {&amp;#10;            return leftEvaluationScore;&amp;#10;        } else if (d == Direction.RIGHT) {&amp;#10;            return rightEvaluationScore;&amp;#10;        } else {&amp;#10;            return 0;&amp;#10;        }&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluateDirection(Direction.DOWN) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.LEFT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.RIGHT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717032140325&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00020&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00020&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717032140325&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00021&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717034510817&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00021&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00021&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717034510817&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;task id=&quot;LOCAL-00022&quot; summary=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot;&gt;&#10;      &lt;option name=&quot;closed&quot; value=&quot;true&quot; /&gt;&#10;      &lt;created&gt;1717034529581&lt;/created&gt;&#10;      &lt;option name=&quot;number&quot; value=&quot;00022&quot; /&gt;&#10;      &lt;option name=&quot;presentableId&quot; value=&quot;LOCAL-00022&quot; /&gt;&#10;      &lt;option name=&quot;project&quot; value=&quot;LOCAL&quot; /&gt;&#10;      &lt;updated&gt;1717034529581&lt;/updated&gt;&#10;    &lt;/task&gt;&#10;    &lt;option name=&quot;localTasksCounter&quot; value=&quot;23&quot; /&gt;&#10;    &lt;servers /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;TypeScriptGeneratedFilesManager&quot;&gt;&#10;    &lt;option name=&quot;version&quot; value=&quot;3&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;Vcs.Log.Tabs.Properties&quot;&gt;&#10;    &lt;option name=&quot;TAB_STATES&quot;&gt;&#10;      &lt;map&gt;&#10;        &lt;entry key=&quot;MAIN&quot;&gt;&#10;          &lt;value&gt;&#10;            &lt;State /&gt;&#10;          &lt;/value&gt;&#10;        &lt;/entry&gt;&#10;      &lt;/map&gt;&#10;    &lt;/option&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;VcsManagerConfiguration&quot;&gt;&#10;    &lt;MESSAGE value=&quot;Merge branch 'dev' into zaddle&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Add move sound effect and apply custom font&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Implement multiple player management and save function&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify GameUI with sidebar&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Modify Game Runtime logic&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Apply auto save func&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;Version:1.0.0&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package model;&amp;#10;&amp;#10;import util.Saver;&amp;#10;import java.io.IOException;&amp;#10;import java.util.*;&amp;#10;&amp;#10;public class UserManager {&amp;#10;    private List&amp;lt;User&amp;gt; userList;&amp;#10;    private static final String savePath = &amp;quot;src/main/resources/general&amp;quot;;&amp;#10;&amp;#10;    public UserManager() {&amp;#10;        try {&amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;#10;        } catch (Exception e) {&amp;#10;            e.printStackTrace();&amp;#10;        }&amp;#10;        userList = new ArrayList&amp;lt;&amp;gt;();&amp;#10;    }&amp;#10;&amp;#10;    public User register(String name, String password) throws IOException {&amp;#10;        User user = null;&amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user has existed!&amp;quot;);&amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;#10;            throw new IllegalArgumentException(&amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;quot;);&amp;#10;        } else if (name.equals(&amp;quot;&amp;quot;) || password.equals(&amp;quot;&amp;quot;)) { // 检查用户名和密码是否为空&amp;#10;            throw new IllegalArgumentException(&amp;quot;Username or password cannot be empty!&amp;quot;);&amp;#10;        } else {&amp;#10;            user = new User(name, password, &amp;quot;src/main/resources/savedata/&amp;quot; + name);&amp;#10;            Saver.makeDir(user.getPath());&amp;#10;            userList.add(user);&amp;#10;            // 保存用户信息&amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;quot;/userInfo.json&amp;quot;);&amp;#10;        }&amp;#10;        return user;&amp;#10;    }&amp;#10;    public User login(String name, String password) {&amp;#10;        if (userList.isEmpty()) {&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        } else {&amp;#10;            for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;#10;                        throw new IllegalArgumentException(&amp;quot;Incorrect password!&amp;quot;);&amp;#10;                    } else {&amp;#10;                        return userList.get(i);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            throw new IllegalArgumentException(&amp;quot;This user doesn't exist!&amp;quot;);&amp;#10;        }&amp;#10;    }&amp;#10;    public void deleteUser(User user) throws IOException {&amp;#10;        userList.remove(user);&amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;#10;    }&amp;#10;    public boolean hasUser(String name) {&amp;#10;        boolean hasUser = false;&amp;#10;        for (int i = 0; i &amp;lt; userList.size(); i++) {&amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;#10;                hasUser = true;&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        return hasUser;&amp;#10;    }&amp;#10;    public boolean isPasswordValid(String password) {&amp;#10;        boolean isPasswordValid = false;&amp;#10;        if (password.length() &amp;gt;= 8) {&amp;#10;            isPasswordValid = true;&amp;#10;        }&amp;#10;        return isPasswordValid;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot; selected=&amp;quot;应用程序.TestMainUIApplication&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;GameApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;Main&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot; temporary=&amp;quot;true&amp;quot; nameIsGenerated=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;VM_PARAMETERS&amp;quot; value=&amp;quot;--module-path &amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;list&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.Main&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.GameApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;216&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;59&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;212&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;61&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;330&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;66&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;132&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;68&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    protected static double evaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static double evaluate(Direction d) {&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles = 0;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a=1; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                for (int a=0; j+a &amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;#10;                }&amp;#10;                for (int b=0; i+b &amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyD += 1;&amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;#10;                        monotonyU += 1;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        int emptyTile = 0;&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;#10;                    emptyTile += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;        return evaluationScore;&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluate(Direction.DOWN) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluate(Direction.LEFT) &amp;gt; evaluate(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluate(Direction.RIGHT) &amp;gt; evaluate(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        Random random = new Random();&amp;#10;        int randomNum = random.nextInt(4);&amp;#10;        if (randomNum == 0) {&amp;#10;            move(Direction.UP);&amp;#10;        } else if (randomNum == 1) {&amp;#10;            move(Direction.DOWN);&amp;#10;        } else if (randomNum == 2) {&amp;#10;            move(Direction.LEFT);&amp;#10;        } else {&amp;#10;            move(Direction.RIGHT);&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.setDirection;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(1000);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    protected Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ExternalStorageConfigurationManager&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MavenProjectsManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;originalFiles&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectRootManager&amp;quot; version=&amp;quot;2&amp;quot; languageLevel=&amp;quot;JDK_17&amp;quot; default=&amp;quot;true&amp;quot; project-jdk-name=&amp;quot;21&amp;quot; project-jdk-type=&amp;quot;JavaSDK&amp;quot;&amp;gt;&amp;#10;    &amp;lt;output url=&amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&amp;#10;&amp;lt;project version=&amp;quot;4&amp;quot;&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;AutoImportSettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;autoReloadType&amp;quot; value=&amp;quot;SELECTIVE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ChangeListManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;list default=&amp;quot;true&amp;quot; id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/misc.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;change beforePath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; beforeDir=&amp;quot;false&amp;quot; afterPath=&amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;quot; afterDir=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;SHOW_DIALOG&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_CONFLICTS&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_RESOLUTION&amp;quot; value=&amp;quot;IGNORE&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;FileTemplateManagerImpl&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_TEMPLATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;FxmlFile&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Interface&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option value=&amp;quot;Class&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Git.Settings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_BRANCH_BY_REPOSITORY&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; value=&amp;quot;dev&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;RECENT_GIT_ROOT_PATH&amp;quot; value=&amp;quot;D:/IdeaProjects/Gaming2048&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GitHubPullRequestSearchHistory&amp;quot;&amp;gt;&amp;lt;![CDATA[{&amp;#10;  &amp;quot;lastFilter&amp;quot;: {&amp;#10;    &amp;quot;state&amp;quot;: &amp;quot;OPEN&amp;quot;,&amp;#10;    &amp;quot;assignee&amp;quot;: &amp;quot;SUSTechCJK2023&amp;quot;&amp;#10;  }&amp;#10;}]]&amp;gt;&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;GithubPullRequestsUISettings&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;selectedUrlAndAccountId&amp;quot;&amp;gt;&amp;#10;      &amp;lt;UrlAndAccount&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;accountId&amp;quot; value=&amp;quot;8dc58497-80d5-4549-a909-aef707eb60dd&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;url&amp;quot; value=&amp;quot;https://github.com/zaddle55/Gaming2048.git&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/UrlAndAccount&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;MarkdownSettingsMigration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;stateVersion&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectColorInfo&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;associatedIndex&amp;amp;quot;: 3&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectId&amp;quot; id=&amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectLevelVcsManager&amp;quot; settingsEditedManually=&amp;quot;true&amp;quot;&amp;gt;&amp;#10;    &amp;lt;ConfirmationsSetting value=&amp;quot;2&amp;quot; id=&amp;quot;Add&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;ProjectViewState&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;hideEmptyMiddlePackages&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;openDirectoriesWithSingleClick&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;showLibraryContents&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;PropertiesComponent&amp;quot;&amp;gt;{&amp;#10;  &amp;amp;quot;keyToString&amp;amp;quot;: {&amp;#10;    &amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;git-widget-placeholder&amp;amp;quot;: &amp;amp;quot;CJKProject__202405&amp;amp;quot;,&amp;#10;    &amp;amp;quot;kotlin-language-version-configured&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.detected.package.eslint&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.eslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;node.js.selected.package.tslint&amp;amp;quot;: &amp;amp;quot;(autodetect)&amp;amp;quot;,&amp;#10;    &amp;amp;quot;nodejs_package_manager_path&amp;amp;quot;: &amp;amp;quot;npm&amp;amp;quot;,&amp;#10;    &amp;amp;quot;settings.editor.selected.configurable&amp;amp;quot;: &amp;amp;quot;preferences.pluginManager&amp;amp;quot;,&amp;#10;    &amp;amp;quot;vue.rearranger.settings.migration&amp;amp;quot;: &amp;amp;quot;true&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.GameApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.Main.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;,&amp;#10;    &amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;quot;: &amp;amp;quot;Run&amp;amp;quot;&amp;#10;  }&amp;#10;}&amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;RunManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;configuration name=&amp;quot;TestMainUIApplication&amp;quot; type=&amp;quot;Application&amp;quot; factoryName=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;ALTERNATIVE_JRE_PATH&amp;quot; value=&amp;quot;21&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;MAIN_CLASS_NAME&amp;quot; value=&amp;quot;Main&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;module name=&amp;quot;Reach2048&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;PROGRAM_PARAMETERS&amp;quot; value=&amp;quot;--module-path     &amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;quot;     --add-modules     javafx.controls,javafx.fxml     --add-modules     javafx.controls,javafx.media     --add-exports     javafx.graphics/com.sun.glass.utils=ALL-UNNAMED     --add-exports     javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;method v=&amp;quot;2&amp;quot;&amp;gt;&amp;#10;        &amp;lt;option name=&amp;quot;Make&amp;quot; enabled=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/method&amp;gt;&amp;#10;    &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;recent_temporary&amp;gt;&amp;#10;      &amp;lt;list&amp;gt;&amp;#10;        &amp;lt;item itemvalue=&amp;quot;应用程序.TestMainUIApplication&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/list&amp;gt;&amp;#10;    &amp;lt;/recent_temporary&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;SpellCheckerSettings&amp;quot; RuntimeDictionaries=&amp;quot;0&amp;quot; Folders=&amp;quot;0&amp;quot; CustomDictionaries=&amp;quot;0&amp;quot; DefaultDictionary=&amp;quot;项目级&amp;quot; UseSingleDictionary=&amp;quot;true&amp;quot; transferred=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TaskManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00001&amp;quot; summary=&amp;quot;Implement multiple player management and save function&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716480870818&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00001&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716480870818&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task active=&amp;quot;true&amp;quot; id=&amp;quot;Default&amp;quot; summary=&amp;quot;默认任务&amp;quot;&amp;gt;&amp;#10;      &amp;lt;changelist id=&amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;quot; name=&amp;quot;更改&amp;quot; comment=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716529031291&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;Default&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716529031291&amp;lt;/updated&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716529033750&amp;quot; duration=&amp;quot;10429000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716611936691&amp;quot; duration=&amp;quot;178000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716612124380&amp;quot; duration=&amp;quot;25412000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716702297487&amp;quot; duration=&amp;quot;11293000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716713611578&amp;quot; duration=&amp;quot;244000&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;workItem from=&amp;quot;1716717775841&amp;quot; duration=&amp;quot;4053000&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00002&amp;quot; summary=&amp;quot;Modify GameUI&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716632335330&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00002&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716632335331&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00003&amp;quot; summary=&amp;quot;Modify GameUI with sidebar&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716650344770&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00003&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716650344770&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00004&amp;quot; summary=&amp;quot;Modify Game Runtime logic&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716711603420&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00004&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716711603420&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00005&amp;quot; summary=&amp;quot;Apply auto save func&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716713655208&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00005&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716713655208&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00006&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716717860221&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00006&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716717860221&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00007&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716721663720&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00007&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716721663720&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00008&amp;quot; summary=&amp;quot;Version:1.0.0&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983228635&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00008&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983228635&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00009&amp;quot; summary=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983259273&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00009&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983259273&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00010&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716983305328&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00010&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716983305328&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00011&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716985108246&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00011&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716985108246&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00012&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716988945401&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00012&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716988945401&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00013&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716990905746&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00013&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716990905746&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00014&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716991858020&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00014&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716991858020&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00015&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1716995533105&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00015&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1716995533105&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00016&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031088690&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00016&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031088690&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00017&amp;quot; summary=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717031151193&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00017&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717031151193&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;task id=&amp;quot;LOCAL-00018&amp;quot; summary=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot;&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;closed&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;created&amp;gt;1717032087165&amp;lt;/created&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;number&amp;quot; value=&amp;quot;00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;presentableId&amp;quot; value=&amp;quot;LOCAL-00018&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;option name=&amp;quot;project&amp;quot; value=&amp;quot;LOCAL&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;updated&amp;gt;1717032087165&amp;lt;/updated&amp;gt;&amp;#10;    &amp;lt;/task&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;localTasksCounter&amp;quot; value=&amp;quot;19&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;servers /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;TypeScriptGeneratedFilesManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;version&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;Vcs.Log.Tabs.Properties&amp;quot;&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;TAB_STATES&amp;quot;&amp;gt;&amp;#10;      &amp;lt;map&amp;gt;&amp;#10;        &amp;lt;entry key=&amp;quot;MAIN&amp;quot;&amp;gt;&amp;#10;          &amp;lt;value&amp;gt;&amp;#10;            &amp;lt;State /&amp;gt;&amp;#10;          &amp;lt;/value&amp;gt;&amp;#10;        &amp;lt;/entry&amp;gt;&amp;#10;      &amp;lt;/map&amp;gt;&amp;#10;    &amp;lt;/option&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;VcsManagerConfiguration&amp;quot;&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Merge branch 'dev' into zaddle&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Add move sound effect and apply custom font&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Implement multiple player management and save function&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify GameUI with sidebar&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Modify Game Runtime logic&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Apply auto save func&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;Version:1.0.0&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package model;&amp;amp;#10;&amp;amp;#10;import util.Saver;&amp;amp;#10;import java.io.IOException;&amp;amp;#10;import java.util.*;&amp;amp;#10;&amp;amp;#10;public class UserManager {&amp;amp;#10;    private List&amp;amp;lt;User&amp;amp;gt; userList;&amp;amp;#10;    private static final String savePath = &amp;amp;quot;src/main/resources/general&amp;amp;quot;;&amp;amp;#10;&amp;amp;#10;    public UserManager() {&amp;amp;#10;        try {&amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;#10;        } catch (Exception e) {&amp;amp;#10;            e.printStackTrace();&amp;amp;#10;        }&amp;amp;#10;        userList = new ArrayList&amp;amp;lt;&amp;amp;gt;();&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;#10;        User user = null;&amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user has existed!&amp;amp;quot;);&amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;quot;);&amp;amp;#10;        } else if (name.equals(&amp;amp;quot;&amp;amp;quot;) || password.equals(&amp;amp;quot;&amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;Username or password cannot be empty!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            user = new User(name, password, &amp;amp;quot;src/main/resources/savedata/&amp;amp;quot; + name);&amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;#10;            userList.add(user);&amp;amp;#10;            // 保存用户信息&amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;quot;/userInfo.json&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;        return user;&amp;amp;#10;    }&amp;amp;#10;    public User login(String name, String password) {&amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        } else {&amp;amp;#10;            for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;quot;Incorrect password!&amp;amp;quot;);&amp;amp;#10;                    } else {&amp;amp;#10;                        return userList.get(i);&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;quot;This user doesn't exist!&amp;amp;quot;);&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;#10;        userList.remove(user);&amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;#10;    }&amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;#10;        boolean hasUser = false;&amp;amp;#10;        for (int i = 0; i &amp;amp;lt; userList.size(); i++) {&amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;#10;                hasUser = true;&amp;amp;#10;                break;&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        return hasUser;&amp;amp;#10;    }&amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;#10;        if (password.length() &amp;amp;gt;= 8) {&amp;amp;#10;            isPasswordValid = true;&amp;amp;#10;        }&amp;amp;#10;        return isPasswordValid;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;AutoImportSettings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;autoReloadType&amp;amp;quot; value=&amp;amp;quot;SELECTIVE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ChangeListManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list default=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/.idea/workspace.xml&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;change beforePath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; beforeDir=&amp;amp;quot;false&amp;amp;quot; afterPath=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/main/java/ai/AlphaDuo.java&amp;amp;quot; afterDir=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;SHOW_DIALOG&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_CONFLICTS&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;HIGHLIGHT_NON_ACTIVE_CHANGELIST&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_RESOLUTION&amp;amp;quot; value=&amp;amp;quot;IGNORE&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;FileTemplateManagerImpl&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_TEMPLATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;FxmlFile&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Interface&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;Class&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Git.Settings&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;RECENT_GIT_ROOT_PATH&amp;amp;quot; value=&amp;amp;quot;D:/IdeaProjects/Gaming2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MarkdownSettingsMigration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;stateVersion&amp;amp;quot; value=&amp;amp;quot;1&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectColorInfo&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;associatedIndex&amp;amp;amp;quot;: 3&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectId&amp;amp;quot; id=&amp;amp;quot;2gtu7oicMVlC4ncjClqNBKWrEOa&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectLevelVcsManager&amp;amp;quot; settingsEditedManually=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;ConfirmationsSetting value=&amp;amp;quot;2&amp;amp;quot; id=&amp;amp;quot;Add&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectViewState&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;hideEmptyMiddlePackages&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;openDirectoriesWithSingleClick&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;showLibraryContents&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;PropertiesComponent&amp;amp;quot;&amp;amp;gt;{&amp;amp;#10;  &amp;amp;amp;quot;keyToString&amp;amp;amp;quot;: {&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.OpenProjectViewOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;RunOnceActivity.ShowReadmeOnStart&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;SHARE_PROJECT_CONFIGURATION_FILES&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;git-widget-placeholder&amp;amp;amp;quot;: &amp;amp;amp;quot;CJKProject__202405&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;kotlin-language-version-configured&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.detected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.eslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;node.js.selected.package.tslint&amp;amp;amp;quot;: &amp;amp;amp;quot;(autodetect)&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;nodejs_package_manager_path&amp;amp;amp;quot;: &amp;amp;amp;quot;npm&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;settings.editor.selected.configurable&amp;amp;amp;quot;: &amp;amp;amp;quot;preferences.pluginManager&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;vue.rearranger.settings.migration&amp;amp;amp;quot;: &amp;amp;amp;quot;true&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.GameApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.Main.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;,&amp;amp;#10;    &amp;amp;amp;quot;应用程序.TestMainUIApplication.executor&amp;amp;amp;quot;: &amp;amp;amp;quot;Run&amp;amp;amp;quot;&amp;amp;#10;  }&amp;amp;#10;}&amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;RunManager&amp;amp;quot; selected=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;GameApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;Main&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\lib\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;configuration name=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; type=&amp;amp;quot;Application&amp;amp;quot; factoryName=&amp;amp;quot;Application&amp;amp;quot; temporary=&amp;amp;quot;true&amp;amp;quot; nameIsGenerated=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;MAIN_CLASS_NAME&amp;amp;quot; value=&amp;amp;quot;TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;module name=&amp;amp;quot;Reach2048&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;VM_PARAMETERS&amp;amp;quot; value=&amp;amp;quot;--module-path &amp;amp;amp;quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&amp;amp;amp;quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;method v=&amp;amp;quot;2&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option name=&amp;amp;quot;Make&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/method&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;recent_temporary&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.TestMainUIApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.Main&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;item itemvalue=&amp;amp;quot;应用程序.GameApplication&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/recent_temporary&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;SpellCheckerSettings&amp;amp;quot; RuntimeDictionaries=&amp;amp;quot;0&amp;amp;quot; Folders=&amp;amp;quot;0&amp;amp;quot; CustomDictionaries=&amp;amp;quot;0&amp;amp;quot; DefaultDictionary=&amp;amp;quot;项目级&amp;amp;quot; UseSingleDictionary=&amp;amp;quot;true&amp;amp;quot; transferred=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TaskManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00001&amp;amp;quot; summary=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716480870818&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00001&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716480870818&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task active=&amp;amp;quot;true&amp;amp;quot; id=&amp;amp;quot;Default&amp;amp;quot; summary=&amp;amp;quot;默认任务&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;changelist id=&amp;amp;quot;0e72e034-aaa7-4046-b7f9-bbfb7b65012a&amp;amp;quot; name=&amp;amp;quot;更改&amp;amp;quot; comment=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716529031291&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;Default&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716529031291&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716529033750&amp;amp;quot; duration=&amp;amp;quot;10429000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716611936691&amp;amp;quot; duration=&amp;amp;quot;178000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716612124380&amp;amp;quot; duration=&amp;amp;quot;25412000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716702297487&amp;amp;quot; duration=&amp;amp;quot;11293000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716713611578&amp;amp;quot; duration=&amp;amp;quot;244000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;workItem from=&amp;amp;quot;1716717775841&amp;amp;quot; duration=&amp;amp;quot;4053000&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00002&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716632335330&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00002&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716632335331&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00003&amp;amp;quot; summary=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716650344770&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00003&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716650344770&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00004&amp;amp;quot; summary=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716711603420&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00004&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716711603420&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00005&amp;amp;quot; summary=&amp;amp;quot;Apply auto save func&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716713655208&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00005&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716713655208&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00006&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716717860221&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00006&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716717860221&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00007&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716721663720&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00007&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716721663720&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00008&amp;amp;quot; summary=&amp;amp;quot;Version:1.0.0&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983228635&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00008&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983228635&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;task id=&amp;amp;quot;LOCAL-00009&amp;amp;quot; summary=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;closed&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;created&amp;amp;gt;1716983259273&amp;amp;lt;/created&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;number&amp;amp;quot; value=&amp;amp;quot;00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;presentableId&amp;amp;quot; value=&amp;amp;quot;LOCAL-00009&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;option name=&amp;amp;quot;project&amp;amp;quot; value=&amp;amp;quot;LOCAL&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;updated&amp;amp;gt;1716983259273&amp;amp;lt;/updated&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/task&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;localTasksCounter&amp;amp;quot; value=&amp;amp;quot;10&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;servers /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;TypeScriptGeneratedFilesManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;version&amp;amp;quot; value=&amp;amp;quot;3&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;Vcs.Log.Tabs.Properties&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;TAB_STATES&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;map&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;entry key=&amp;amp;quot;MAIN&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;value&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;State /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/value&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/entry&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/map&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;VcsManagerConfiguration&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Merge branch 'dev' into zaddle&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Add move sound effect and apply custom font&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Implement multiple player management and save function&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify GameUI with sidebar&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Modify Game Runtime logic&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Apply auto save func&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;Version:1.0.0&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;MESSAGE value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;LAST_COMMIT_MESSAGE&amp;amp;quot; value=&amp;amp;quot;package model;&amp;amp;amp;#10;&amp;amp;amp;#10;import util.Saver;&amp;amp;amp;#10;import java.io.IOException;&amp;amp;amp;#10;import java.util.*;&amp;amp;amp;#10;&amp;amp;amp;#10;public class UserManager {&amp;amp;amp;#10;    private List&amp;amp;amp;lt;User&amp;amp;amp;gt; userList;&amp;amp;amp;#10;    private static final String savePath = &amp;amp;amp;quot;src/main/resources/general&amp;amp;amp;quot;;&amp;amp;amp;#10;&amp;amp;amp;#10;    public UserManager() {&amp;amp;amp;#10;        try {&amp;amp;amp;#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&amp;amp;amp;#10;        } catch (Exception e) {&amp;amp;amp;#10;            e.printStackTrace();&amp;amp;amp;#10;        }&amp;amp;amp;#10;        userList = new ArrayList&amp;amp;amp;lt;&amp;amp;amp;gt;();&amp;amp;amp;#10;    }&amp;amp;amp;#10;&amp;amp;amp;#10;    public User register(String name, String password) throws IOException {&amp;amp;amp;#10;        User user = null;&amp;amp;amp;#10;        if (hasUser(name)) { // 检查用户是否已存在&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user has existed!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Invalid password! Your password should contain at least 8 characters.&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else if (name.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;) || password.equals(&amp;amp;amp;quot;&amp;amp;amp;quot;)) { // 检查用户名和密码是否为空&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;Username or password cannot be empty!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            user = new User(name, password, &amp;amp;amp;quot;src/main/resources/savedata/&amp;amp;amp;quot; + name);&amp;amp;amp;#10;            Saver.makeDir(user.getPath());&amp;amp;amp;#10;            userList.add(user);&amp;amp;amp;#10;            // 保存用户信息&amp;amp;amp;#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &amp;amp;amp;quot;/userInfo.json&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return user;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public User login(String name, String password) {&amp;amp;amp;#10;        if (userList.isEmpty()) {&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        } else {&amp;amp;amp;#10;            for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;                if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                    if (!userList.get(i).getPassword().equals(password)) {&amp;amp;amp;#10;                        throw new IllegalArgumentException(&amp;amp;amp;quot;Incorrect password!&amp;amp;amp;quot;);&amp;amp;amp;#10;                    } else {&amp;amp;amp;#10;                        return userList.get(i);&amp;amp;amp;#10;                    }&amp;amp;amp;#10;                }&amp;amp;amp;#10;            }&amp;amp;amp;#10;            throw new IllegalArgumentException(&amp;amp;amp;quot;This user doesn't exist!&amp;amp;amp;quot;);&amp;amp;amp;#10;        }&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public void deleteUser(User user) throws IOException {&amp;amp;amp;#10;        userList.remove(user);&amp;amp;amp;#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean hasUser(String name) {&amp;amp;amp;#10;        boolean hasUser = false;&amp;amp;amp;#10;        for (int i = 0; i &amp;amp;amp;lt; userList.size(); i++) {&amp;amp;amp;#10;            if (userList.get(i).getName().equals(name)) {&amp;amp;amp;#10;                hasUser = true;&amp;amp;amp;#10;                break;&amp;amp;amp;#10;            }&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return hasUser;&amp;amp;amp;#10;    }&amp;amp;amp;#10;    public boolean isPasswordValid(String password) {&amp;amp;amp;#10;        boolean isPasswordValid = false;&amp;amp;amp;#10;        if (password.length() &amp;amp;amp;gt;= 8) {&amp;amp;amp;#10;            isPasswordValid = true;&amp;amp;amp;#10;        }&amp;amp;amp;#10;        return isPasswordValid;&amp;amp;amp;#10;    }&amp;amp;amp;#10;}&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;XDebuggerManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;breakpoint-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;breakpoints&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;34&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;42&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;218&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;58&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;216&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;59&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;214&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;60&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;212&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;61&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;551&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;62&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;330&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;66&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-line&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/LoadingAnimation.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;132&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;68&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;line-breakpoint enabled=&amp;amp;quot;true&amp;amp;quot; type=&amp;amp;quot;java-method&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;url&amp;amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;amp;lt;/url&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;line&amp;amp;gt;64&amp;amp;lt;/line&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;properties class=&amp;amp;quot;controller.MainUI&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;EMULATED&amp;amp;quot; value=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;            &amp;amp;lt;option name=&amp;amp;quot;WATCH_EXIT&amp;amp;quot; value=&amp;amp;quot;false&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;/properties&amp;amp;gt;&amp;amp;#10;          &amp;amp;lt;option name=&amp;amp;quot;timeStamp&amp;amp;quot; value=&amp;amp;quot;47&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;/line-breakpoint&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/breakpoints&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/breakpoint-manager&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;watches-manager&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;configuration name=&amp;amp;quot;Application&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;Saver.makeDir(savePath)&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;currentIndex&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;watch expression=&amp;amp;quot;MainUI.downPanes&amp;amp;quot; language=&amp;amp;quot;JAVA&amp;amp;quot; custom=&amp;amp;quot;controller.MainUI&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/configuration&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/watches-manager&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import util.*;&amp;amp;#10;&amp;amp;#10;/**&amp;amp;#10; * AlphaDuo&amp;amp;#10; * @version: 1.0.0&amp;amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;amp;quot;duo&amp;amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;amp;quot;2&amp;amp;quot; grids to make larger binary numbers.&amp;amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;amp;#10; */&amp;amp;#10;public class AlphaDuo {&amp;amp;#10;    protected static double evaluationScore = 0;&amp;amp;#10;    protected static final double monotonyWeight = 0.4; // 单调性权重&amp;amp;#10;    protected static final double smoothWeight = 1.0; // 平滑性权重&amp;amp;#10;    protected static final double emptyWeight = 0.7; // 总空格数权重&amp;amp;#10;    protected static final double islandWeight = 0.1; // 孤立空格数权重&amp;amp;#10;    protected static int directionNum = 0;&amp;amp;#10;&amp;amp;#10;    protected static double evaluate(Direction d) {&amp;amp;#10;        boolean isIncrease = false;&amp;amp;#10;        int numOfMonotonyTiles = 0;&amp;amp;#10;        int monotonyL = 0;&amp;amp;#10;        int monotonyR = 0;&amp;amp;#10;        int monotonyU = 0;&amp;amp;#10;        int monotonyD = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = true;&amp;amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;amp;#10;                    isIncrease = false;&amp;amp;#10;                }&amp;amp;#10;                if (isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;lt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = false;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                } else if (!isIncrease) {&amp;amp;#10;                    for (int a=1; j+a &amp;amp;lt; GameUI.getGrid().getSize(); a++) {&amp;amp;#10;                        if (GameUI.getGrid().getBoard()[i][j+a] &amp;amp;gt; GameUI.getGrid().getBoard()[i][j+a+1]) {&amp;amp;#10;                            numOfMonotonyTiles += 1;&amp;amp;#10;                        } else {&amp;amp;#10;                            isIncrease = true;&amp;amp;#10;                            break;&amp;amp;#10;                        }&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;                for (int a=0; j+a &amp;amp;lt; GameUI.getGrid().getSize()-1; a++) {&amp;amp;#10;                }&amp;amp;#10;                for (int b=0; i+b &amp;amp;lt; GameUI.getGrid().getSize() - 1; b++) {&amp;amp;#10;                    if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;lt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyD += 1;&amp;amp;#10;                    } else if (GameUI.getGrid().getBoard()[i+b][j] &amp;amp;gt; GameUI.getGrid().getBoard()[i+b+1][j]) {&amp;amp;#10;                        monotonyU += 1;&amp;amp;#10;                    }&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += (monotonyL * monotonyWeight) + (monotonyR * monotonyWeight) + (monotonyU * monotonyWeight) + (monotonyD * monotonyWeight);&amp;amp;#10;&amp;amp;#10;        int emptyTile = 0;&amp;amp;#10;        for (int i=0; i &amp;amp;lt; GameUI.getGrid().getSize(); i++) {&amp;amp;#10;            for (int j=0; j &amp;amp;lt; GameUI.getGrid().getSize(); j++) {&amp;amp;#10;                if (GameUI.getGrid().getBoard()[i][j] == 0) {&amp;amp;#10;                    emptyTile += 1;&amp;amp;#10;                }&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        evaluationScore += emptyTile * emptyWeight;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;&amp;amp;#10;        return evaluationScore;&amp;amp;#10;    }&amp;amp;#10;    protected static int setDirection() {&amp;amp;#10;        Direction direction = Direction.UP;&amp;amp;#10;        if (evaluate(Direction.DOWN) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.DOWN;&amp;amp;#10;            directionNum = 1;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.LEFT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            direction = Direction.LEFT;&amp;amp;#10;            directionNum = 2;&amp;amp;#10;        }&amp;amp;#10;        if (evaluate(Direction.RIGHT) &amp;amp;gt; evaluate(direction)) {&amp;amp;#10;            directionNum = 3;&amp;amp;#10;        }&amp;amp;#10;        return directionNum;&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        Random random = new Random();&amp;amp;#10;        int randomNum = random.nextInt(4);&amp;amp;#10;        if (randomNum == 0) {&amp;amp;#10;            move(Direction.UP);&amp;amp;#10;        } else if (randomNum == 1) {&amp;amp;#10;            move(Direction.DOWN);&amp;amp;#10;        } else if (randomNum == 2) {&amp;amp;#10;            move(Direction.LEFT);&amp;amp;#10;        } else {&amp;amp;#10;            move(Direction.RIGHT);&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.setDirection;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(1000);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;package ai;&amp;amp;#10;&amp;amp;#10;import controller.GameUI;&amp;amp;#10;import model.Grid;&amp;amp;#10;import util.Direction;&amp;amp;#10;import java.util.Random;&amp;amp;#10;&amp;amp;#10;import static ai.AlphaDuo.*;&amp;amp;#10;import static java.lang.Thread.sleep;&amp;amp;#10;&amp;amp;#10;public class AIThread implements Runnable {&amp;amp;#10;    protected Grid grid;&amp;amp;#10;    protected GameUI gameThread;&amp;amp;#10;    public boolean endFlag = false;&amp;amp;#10;&amp;amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;amp;#10;        this.grid = grid;&amp;amp;#10;        this.gameThread = gameThread;&amp;amp;#10;    }&amp;amp;#10;&amp;amp;#10;    protected Direction getDirection() {&amp;amp;#10;        if (setDirection() == 0) {&amp;amp;#10;            return Direction.UP;&amp;amp;#10;        } else if (setDirection() == 1) {&amp;amp;#10;            return Direction.DOWN;&amp;amp;#10;        } else if (setDirection() == 2) {&amp;amp;#10;            return Direction.LEFT;&amp;amp;#10;        } else if (setDirection() == 3) {&amp;amp;#10;            return Direction.RIGHT;&amp;amp;#10;        } else {&amp;amp;#10;            return null;&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;    protected void move(Direction direction) {&amp;amp;#10;        gameThread.simulateMove(direction);&amp;amp;#10;    }&amp;amp;#10;    protected void updateGrid() {&amp;amp;#10;        grid = gameThread.getGrid();&amp;amp;#10;    }&amp;amp;#10;    protected void updateEndFlag() {&amp;amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;amp;#10;    }&amp;amp;#10;    @Override&amp;amp;#10;    public void run() {&amp;amp;#10;        if (!endFlag) {&amp;amp;#10;            Random random = new Random();&amp;amp;#10;            int randomNum = random.nextInt(4);&amp;amp;#10;            if (randomNum == 0) {&amp;amp;#10;                move(Direction.UP);&amp;amp;#10;            } else if (randomNum == 1) {&amp;amp;#10;                move(Direction.DOWN);&amp;amp;#10;            } else if (randomNum == 2) {&amp;amp;#10;                move(Direction.LEFT);&amp;amp;#10;            } else {&amp;amp;#10;                move(Direction.RIGHT);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;        while (!endFlag) {&amp;amp;#10;            try {&amp;amp;#10;                sleep(200);&amp;amp;#10;                updateGrid();&amp;amp;#10;                updateEndFlag();&amp;amp;#10;                evaluate();&amp;amp;#10;                move(getDirection());&amp;amp;#10;                upEvaluationScore = 0;&amp;amp;#10;                downEvaluationScore = 0;&amp;amp;#10;                leftEvaluationScore = 0;&amp;amp;#10;                rightEvaluationScore = 0;&amp;amp;#10;            } catch (InterruptedException e) {&amp;amp;#10;                throw new RuntimeException(e);&amp;amp;#10;            }&amp;amp;#10;        }&amp;amp;#10;    }&amp;amp;#10;}&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;MESSAGE value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;    &amp;lt;option name=&amp;quot;LAST_COMMIT_MESSAGE&amp;quot; value=&amp;quot;&amp;amp;lt;?xml version=&amp;amp;quot;1.0&amp;amp;quot; encoding=&amp;amp;quot;UTF-8&amp;amp;quot;?&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;project version=&amp;amp;quot;4&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ExternalStorageConfigurationManager&amp;amp;quot; enabled=&amp;amp;quot;true&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;MavenProjectsManager&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;option name=&amp;amp;quot;originalFiles&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;list&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/src/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;        &amp;amp;lt;option value=&amp;amp;quot;D:/IdeaProjects/Gaming2048/pom.xml&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;      &amp;amp;lt;/list&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;/option&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;component name=&amp;amp;quot;ProjectRootManager&amp;amp;quot; version=&amp;amp;quot;2&amp;amp;quot; languageLevel=&amp;amp;quot;JDK_17&amp;amp;quot; default=&amp;amp;quot;true&amp;amp;quot; project-jdk-name=&amp;amp;quot;21&amp;amp;quot; project-jdk-type=&amp;amp;quot;JavaSDK&amp;amp;quot;&amp;amp;gt;&amp;amp;#10;    &amp;amp;lt;output url=&amp;amp;quot;file://D:/IdeaProjects/Gaming2048/out&amp;amp;quot; /&amp;amp;gt;&amp;amp;#10;  &amp;amp;lt;/component&amp;amp;gt;&amp;amp;#10;&amp;amp;lt;/project&amp;amp;gt;&amp;quot; /&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;  &amp;lt;component name=&amp;quot;XDebuggerManager&amp;quot;&amp;gt;&amp;#10;    &amp;lt;breakpoint-manager&amp;gt;&amp;#10;      &amp;lt;breakpoints&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;34&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;42&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;218&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;58&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;214&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;60&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-line&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;551&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;62&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;        &amp;lt;line-breakpoint enabled=&amp;quot;true&amp;quot; type=&amp;quot;java-method&amp;quot;&amp;gt;&amp;#10;          &amp;lt;url&amp;gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&amp;lt;/url&amp;gt;&amp;#10;          &amp;lt;line&amp;gt;64&amp;lt;/line&amp;gt;&amp;#10;          &amp;lt;properties class=&amp;quot;controller.MainUI&amp;quot;&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;EMULATED&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;&amp;#10;            &amp;lt;option name=&amp;quot;WATCH_EXIT&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;&amp;#10;          &amp;lt;/properties&amp;gt;&amp;#10;          &amp;lt;option name=&amp;quot;timeStamp&amp;quot; value=&amp;quot;47&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;/line-breakpoint&amp;gt;&amp;#10;      &amp;lt;/breakpoints&amp;gt;&amp;#10;    &amp;lt;/breakpoint-manager&amp;gt;&amp;#10;    &amp;lt;watches-manager&amp;gt;&amp;#10;      &amp;lt;configuration name=&amp;quot;Application&amp;quot;&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;Saver.makeDir(savePath)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;currentIndex&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;MainUI.downPanes&amp;quot; language=&amp;quot;JAVA&amp;quot; custom=&amp;quot;controller.MainUI&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;evaluateDirection(direction)&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;        &amp;lt;watch expression=&amp;quot;getDirection()&amp;quot; language=&amp;quot;JAVA&amp;quot; /&amp;gt;&amp;#10;      &amp;lt;/configuration&amp;gt;&amp;#10;    &amp;lt;/watches-manager&amp;gt;&amp;#10;  &amp;lt;/component&amp;gt;&amp;#10;&amp;lt;/project&amp;gt;&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import util.*;&amp;#10;&amp;#10;/**&amp;#10; * AlphaDuo&amp;#10; * @version: 1.0.0&amp;#10; * @description: AlphaDuo is a class that represents the AI of the game, &amp;quot;duo&amp;quot; means two, which means that the AI is designed for 2048 which uses &amp;quot;2&amp;quot; grids to make larger binary numbers.&amp;#10; * @function: Used to play the game automatically or to provide hints to the player.&amp;#10; * @Implementation: AlphaDuo uses the Minimax and Alpha-Beta algorithms to simulate the game and make decisions.&amp;#10; */&amp;#10;public class AlphaDuo {&amp;#10;    // 为每种移动方向“评分”，哪种方向评分最高，采取哪种方向移动&amp;#10;    protected static double upEvaluationScore = 0;&amp;#10;    protected static double downEvaluationScore = 0;&amp;#10;    protected static double leftEvaluationScore = 0;&amp;#10;    protected static double rightEvaluationScore = 0;&amp;#10;    protected static final double monotonyWeight = 0.5; // 单调性权重&amp;#10;    protected static final double smoothWeight = -0.2; // 平滑性权重&amp;#10;    protected static final double emptyWeight = 0.5; // 总空格数权重&amp;#10;    protected static int directionNum = 0;&amp;#10;&amp;#10;    protected static void evaluate() {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        // 1. 单调性评估&amp;#10;        boolean isIncrease = false;&amp;#10;        int numOfMonotonyTiles;&amp;#10;        int monotonyL = 0;&amp;#10;        int monotonyR = 0;&amp;#10;        int monotonyU = 0;&amp;#10;        int monotonyD = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j+1 &amp;lt; GameUI.getGrid().getSize(); j += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i][j+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i][j+1])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;lt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyR += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i][j+a+1] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a] &amp;gt; GameUI.getGrid().getBoard()[i][j+a+1])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyL += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (monotonyL * monotonyWeight);&amp;#10;        rightEvaluationScore += (monotonyR * monotonyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i+1 &amp;lt; GameUI.getGrid().getSize(); i += numOfMonotonyTiles) {&amp;#10;                numOfMonotonyTiles = 0;&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;lt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = true;&amp;#10;                } else if ((GameUI.getGrid().getBoard()[i+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j] &amp;gt; GameUI.getGrid().getBoard()[i+1][j])) {&amp;#10;                    isIncrease = false;&amp;#10;                }&amp;#10;                if (isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;lt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyD += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = false;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else if (!isIncrease) {&amp;#10;                    for (int a = 1; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                        if ((GameUI.getGrid().getBoard()[i+a+1][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a][j] &amp;gt; GameUI.getGrid().getBoard()[i+a+1][j])) {&amp;#10;                            numOfMonotonyTiles += 1;&amp;#10;                            monotonyU += 1;&amp;#10;                        } else {&amp;#10;                            isIncrease = true;&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfMonotonyTiles == 0) {&amp;#10;                    numOfMonotonyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (monotonyU * monotonyWeight);&amp;#10;        downEvaluationScore += (monotonyD * monotonyWeight);&amp;#10;&amp;#10;        // 2. 平滑性评估&amp;#10;        int smoothU = 0;&amp;#10;        int smoothD = 0;&amp;#10;        int smoothL = 0;&amp;#10;        int smoothR = 0;&amp;#10;        for (int i=1; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i-1][j] != 0)) {&amp;#10;                    smoothU += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i-1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize() - 1; i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+1][j] != 0)) {&amp;#10;                    smoothD += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i+1][j]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=1; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j-1] != 0)) {&amp;#10;                    smoothL += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j-1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        for (int i=0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j=0; j &amp;lt; GameUI.getGrid().getSize() - 1; j++) {&amp;#10;                if ((GameUI.getGrid().getBoard()[i][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+1] != 0)) {&amp;#10;                    smoothR += (Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) * Math.abs(GameUI.getGrid().getBoard()[i][j] - GameUI.getGrid().getBoard()[i][j+1]) / GameUI.getGrid().getSize());&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += smoothU * smoothWeight;&amp;#10;        downEvaluationScore += smoothD * smoothWeight;&amp;#10;        leftEvaluationScore += smoothL * smoothWeight;&amp;#10;        rightEvaluationScore += smoothR * smoothWeight;&amp;#10;        // 找连续的同数值格子个数&amp;#10;        int numOfEqualTiles;&amp;#10;        int equalU = 0;&amp;#10;        int equalD = 0;&amp;#10;        int equalL = 0;&amp;#10;        int equalR = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; j+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i][j+a] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i][j+a+1] == GameUI.getGrid().getBoard()[i][j+a])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalL += 1;&amp;#10;                        equalR += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (equalL * smoothWeight * (-10));&amp;#10;        rightEvaluationScore += (equalR * smoothWeight * (-10));&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEqualTiles) {&amp;#10;                numOfEqualTiles = 0;&amp;#10;                for (int a = 0; i+a+1 &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if ((GameUI.getGrid().getBoard()[i+a][j] != 0) &amp;amp;&amp;amp; (GameUI.getGrid().getBoard()[i+a+1][j] == GameUI.getGrid().getBoard()[i+a][j])) {&amp;#10;                        numOfEqualTiles += 1;&amp;#10;                        equalU += 1;&amp;#10;                        equalD += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEqualTiles == 0) {&amp;#10;                    numOfEqualTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (equalU * smoothWeight * (-10));&amp;#10;        downEvaluationScore += (equalD * smoothWeight * (-10));&amp;#10;&amp;#10;        // 3. 总空格数评估&amp;#10;        int numOfEmptyTiles;&amp;#10;        int emptyRow = 0;&amp;#10;        int emptyColumn = 0;&amp;#10;        for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i++) {&amp;#10;            for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; j+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i][j+a] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyRow += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        leftEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        rightEvaluationScore += (emptyRow * emptyWeight);&amp;#10;        for (int j = 0; j &amp;lt; GameUI.getGrid().getSize(); j++) {&amp;#10;            for (int i = 0; i &amp;lt; GameUI.getGrid().getSize(); i += numOfEmptyTiles) {&amp;#10;                numOfEmptyTiles = 0;&amp;#10;                for (int a = 0; i+a &amp;lt; GameUI.getGrid().getSize(); a++) {&amp;#10;                    if (GameUI.getGrid().getBoard()[i+a][j] == 0) {&amp;#10;                        numOfEmptyTiles += 1;&amp;#10;                        emptyColumn += 1;&amp;#10;                    } else {&amp;#10;                        break;&amp;#10;                    }&amp;#10;                }&amp;#10;                if (numOfEmptyTiles == 0) {&amp;#10;                    numOfEmptyTiles += 1;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        upEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;        downEvaluationScore += (emptyColumn * emptyWeight);&amp;#10;    }&amp;#10;    protected static double evaluateDirection(Direction d) {&amp;#10;        upEvaluationScore = 0;&amp;#10;        downEvaluationScore = 0;&amp;#10;        leftEvaluationScore = 0;&amp;#10;        rightEvaluationScore = 0;&amp;#10;        evaluate();&amp;#10;        if (d == Direction.UP) {&amp;#10;            return upEvaluationScore;&amp;#10;        } else if (d == Direction.DOWN) {&amp;#10;            return downEvaluationScore;&amp;#10;        } else if (d == Direction.LEFT) {&amp;#10;            return leftEvaluationScore;&amp;#10;        } else if (d == Direction.RIGHT) {&amp;#10;            return rightEvaluationScore;&amp;#10;        } else {&amp;#10;            return 0;&amp;#10;        }&amp;#10;    }&amp;#10;    protected static int setDirection() {&amp;#10;        Direction direction = Direction.UP;&amp;#10;        if (evaluateDirection(Direction.DOWN) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.DOWN;&amp;#10;            directionNum = 1;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.LEFT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            direction = Direction.LEFT;&amp;#10;            directionNum = 2;&amp;#10;        }&amp;#10;        if (evaluateDirection(Direction.RIGHT) &amp;gt;= evaluateDirection(direction)) {&amp;#10;            directionNum = 3;&amp;#10;        }&amp;#10;        return directionNum;&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;MESSAGE value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;    &lt;option name=&quot;LAST_COMMIT_MESSAGE&quot; value=&quot;package ai;&amp;#10;&amp;#10;import controller.GameUI;&amp;#10;import model.Grid;&amp;#10;import org.jetbrains.annotations.Nullable;&amp;#10;import util.Direction;&amp;#10;import java.util.Random;&amp;#10;&amp;#10;import static ai.AlphaDuo.*;&amp;#10;import static java.lang.Thread.sleep;&amp;#10;&amp;#10;public class AIThread implements Runnable {&amp;#10;    protected Grid grid;&amp;#10;    protected GameUI gameThread;&amp;#10;    public boolean endFlag = false;&amp;#10;&amp;#10;    public AIThread(Grid grid, GameUI gameThread) {&amp;#10;        this.grid = grid;&amp;#10;        this.gameThread = gameThread;&amp;#10;    }&amp;#10;&amp;#10;    @Nullable&amp;#10;    public static Direction getDirection() {&amp;#10;        if (setDirection() == 0) {&amp;#10;            return Direction.UP;&amp;#10;        } else if (setDirection() == 1) {&amp;#10;            return Direction.DOWN;&amp;#10;        } else if (setDirection() == 2) {&amp;#10;            return Direction.LEFT;&amp;#10;        } else if (setDirection() == 3) {&amp;#10;            return Direction.RIGHT;&amp;#10;        } else {&amp;#10;            return null;&amp;#10;        }&amp;#10;    }&amp;#10;    protected void move(Direction direction) {&amp;#10;        gameThread.simulateMove(direction);&amp;#10;    }&amp;#10;    protected void updateGrid() {&amp;#10;        grid = gameThread.getGrid();&amp;#10;    }&amp;#10;    protected void updateEndFlag() {&amp;#10;        endFlag = !GameUI.isAuto || GameUI.isWin || GameUI.isLose;&amp;#10;    }&amp;#10;    @Override&amp;#10;    public void run() {&amp;#10;        if (!endFlag) {&amp;#10;            Random random = new Random();&amp;#10;            int randomNum = random.nextInt(4);&amp;#10;            if (randomNum == 0) {&amp;#10;                move(Direction.UP);&amp;#10;            } else if (randomNum == 1) {&amp;#10;                move(Direction.DOWN);&amp;#10;            } else if (randomNum == 2) {&amp;#10;                move(Direction.LEFT);&amp;#10;            } else {&amp;#10;                move(Direction.RIGHT);&amp;#10;            }&amp;#10;        }&amp;#10;        while (!endFlag) {&amp;#10;            try {&amp;#10;                sleep(200);&amp;#10;                updateGrid();&amp;#10;                updateEndFlag();&amp;#10;                evaluate();&amp;#10;                move(getDirection());&amp;#10;                upEvaluationScore = 0;&amp;#10;                downEvaluationScore = 0;&amp;#10;                leftEvaluationScore = 0;&amp;#10;                rightEvaluationScore = 0;&amp;#10;            } catch (InterruptedException e) {&amp;#10;                throw new RuntimeException(e);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;XDebuggerManager&quot;&gt;&#10;    &lt;breakpoint-manager&gt;&#10;      &lt;breakpoints&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/util/Saver.java&lt;/url&gt;&#10;          &lt;line&gt;34&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;42&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;218&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;58&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;214&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;60&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-line&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/GameUI.java&lt;/url&gt;&#10;          &lt;line&gt;550&lt;/line&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;62&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;        &lt;line-breakpoint enabled=&quot;true&quot; type=&quot;java-method&quot;&gt;&#10;          &lt;url&gt;file://D:/IdeaProjects/Gaming2048/src/main/java/controller/MainUI.java&lt;/url&gt;&#10;          &lt;line&gt;64&lt;/line&gt;&#10;          &lt;properties class=&quot;controller.MainUI&quot;&gt;&#10;            &lt;option name=&quot;EMULATED&quot; value=&quot;true&quot; /&gt;&#10;            &lt;option name=&quot;WATCH_EXIT&quot; value=&quot;false&quot; /&gt;&#10;          &lt;/properties&gt;&#10;          &lt;option name=&quot;timeStamp&quot; value=&quot;47&quot; /&gt;&#10;        &lt;/line-breakpoint&gt;&#10;      &lt;/breakpoints&gt;&#10;    &lt;/breakpoint-manager&gt;&#10;    &lt;watches-manager&gt;&#10;      &lt;configuration name=&quot;Application&quot;&gt;&#10;        &lt;watch expression=&quot;Saver.makeDir(savePath)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;currentIndex&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;MainUI.downPanes&quot; language=&quot;JAVA&quot; custom=&quot;controller.MainUI&quot; /&gt;&#10;        &lt;watch expression=&quot;evaluateDirection(direction)&quot; language=&quot;JAVA&quot; /&gt;&#10;        &lt;watch expression=&quot;getDirection()&quot; language=&quot;JAVA&quot; /&gt;&#10;      &lt;/configuration&gt;&#10;    &lt;/watches-manager&gt;&#10;  &lt;/component&gt;&#10;&lt;/project&gt;" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/util/Saver.java</url>
          <line>34</line>
          <option name="timeStamp" value="42" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/controller/GameUI.java</url>
          <line>218</line>
          <option name="timeStamp" value="58" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/controller/GameUI.java</url>
          <line>214</line>
          <option name="timeStamp" value="60" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/controller/GameUI.java</url>
          <line>550</line>
          <option name="timeStamp" value="62" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-method">
          <url>file://$PROJECT_DIR$/src/main/java/controller/MainUI.java</url>
          <line>64</line>
          <properties class="controller.MainUI">
            <option name="EMULATED" value="true" />
            <option name="WATCH_EXIT" value="false" />
          </properties>
          <option name="timeStamp" value="47" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
    <watches-manager>
      <configuration name="Application">
        <watch expression="Saver.makeDir(savePath)" language="JAVA" />
        <watch expression="currentIndex" language="JAVA" />
        <watch expression="MainUI.downPanes" language="JAVA" custom="controller.MainUI" />
        <watch expression="evaluateDirection(direction)" language="JAVA" />
        <watch expression="getDirection()" language="JAVA" />
      </configuration>
    </watches-manager>
  </component>
</project>