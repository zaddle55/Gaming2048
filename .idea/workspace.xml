<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="09c65125-3507-45f0-a5a6-7390dce42387" name="更改" comment="package model;&#10;&#10;import org.jetbrains.annotations.NotNull;&#10;&#10;import javax.swing.*;&#10;import java.util.*;&#10;&#10;public class UserManager {&#10;    List&lt;User&gt; userList;&#10;&#10;    public UserManager() {&#10;        List&lt;User&gt; userList = new List&lt;&gt;() {&#10;            @Override&#10;            public int size() {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public boolean isEmpty() {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean contains(Object o) {&#10;                return false;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public Iterator&lt;User&gt; iterator() {&#10;                return null;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public Object[] toArray() {&#10;                return new Object[0];&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public &lt;T&gt; T[] toArray(@NotNull T[] a) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public boolean add(User user) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean remove(Object o) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean containsAll(@NotNull Collection&lt;?&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean addAll(@NotNull Collection&lt;? extends User&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean addAll(int index, @NotNull Collection&lt;? extends User&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean removeAll(@NotNull Collection&lt;?&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean retainAll(@NotNull Collection&lt;?&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public void clear() {&#10;&#10;            }&#10;&#10;            @Override&#10;            public boolean equals(Object o) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public int hashCode() {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public User get(int index) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public User set(int index, User element) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public void add(int index, User element) {&#10;&#10;            }&#10;&#10;            @Override&#10;            public User remove(int index) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public int indexOf(Object o) {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public int lastIndexOf(Object o) {&#10;                return 0;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public ListIterator&lt;User&gt; listIterator() {&#10;                return null;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public ListIterator&lt;User&gt; listIterator(int index) {&#10;                return null;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public List&lt;User&gt; subList(int fromIndex, int toIndex) {&#10;                return null;&#10;            }&#10;        };&#10;    }&#10;&#10;    public void register(String name, String password) {&#10;        if (hasUser(name)) {&#10;            JOptionPane.showMessageDialog(null, &quot;This user has existed!&quot;, &quot;Register Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } else if (!isPasswordValid(password)) {&#10;            JOptionPane.showMessageDialog(null, &quot;Invalid password!&quot;, &quot;Register Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } else {&#10;&#10;        }&#10;    }&#10;&#10;    public void logIn(String name, String password) {&#10;        if (!hasUser(name)) {&#10;            JOptionPane.showMessageDialog(null, &quot;This user doesn't exist!&quot;, &quot;Log-in Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } else if () {&#10;            JOptionPane.showMessageDialog(null, &quot;Invalid password!&quot;, &quot;Log-in Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length())&#10;    }&#10;    public boolean isPasswordCorrect(String name, String password) {&#10;&#10;    }&#10;}">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/model/UserManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/model/UserManager.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/util/Saver.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/util/Saver.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Maven.Reach2048 [javafx:run].executor": "Run",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "deletionFromPopupRequiresConfirmation": "false",
    "git-widget-placeholder": "CJKProject__202405",
    "kotlin-language-version-configured": "true",
    "应用程序.GameApplication.executor": "Run",
    "应用程序.Test.executor": "Run",
    "应用程序.TestMainUIApplication.executor": "Run",
    "应用程序.未命名.executor": "Run"
  }
}]]></component>
  <component name="RunManager">
    <configuration name="TestMainUIApplication" type="Application" factoryName="Application">
      <option name="ALTERNATIVE_JRE_PATH" value="BUNDLED" />
      <option name="MAIN_CLASS_NAME" value="TestMainUIApplication" />
      <module name="Reach2048" />
      <option name="VM_PARAMETERS" value="--module-path &quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="应用程序级" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="默认任务">
      <changelist id="09c65125-3507-45f0-a5a6-7390dce42387" name="更改" comment="" />
      <created>1716431142916</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1716431142916</updated>
    </task>
    <task id="LOCAL-00001" summary="    public String getName() {&#10;        return name;&#10;    }&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;    public String getPath() {&#10;        return path;&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716431725789</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1716431725789</updated>
    </task>
    <task id="LOCAL-00002" summary="package model;&#10;&#10;import org.jetbrains.annotations.NotNull;&#10;&#10;import javax.swing.*;&#10;import java.util.*;&#10;&#10;public class UserManager {&#10;    List&lt;User&gt; userList;&#10;&#10;    public UserManager() {&#10;        List&lt;User&gt; userList = new List&lt;&gt;() {&#10;            @Override&#10;            public int size() {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public boolean isEmpty() {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean contains(Object o) {&#10;                return false;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public Iterator&lt;User&gt; iterator() {&#10;                return null;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public Object[] toArray() {&#10;                return new Object[0];&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public &lt;T&gt; T[] toArray(@NotNull T[] a) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public boolean add(User user) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean remove(Object o) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean containsAll(@NotNull Collection&lt;?&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean addAll(@NotNull Collection&lt;? extends User&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean addAll(int index, @NotNull Collection&lt;? extends User&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean removeAll(@NotNull Collection&lt;?&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean retainAll(@NotNull Collection&lt;?&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public void clear() {&#10;&#10;            }&#10;&#10;            @Override&#10;            public boolean equals(Object o) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public int hashCode() {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public User get(int index) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public User set(int index, User element) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public void add(int index, User element) {&#10;&#10;            }&#10;&#10;            @Override&#10;            public User remove(int index) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public int indexOf(Object o) {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public int lastIndexOf(Object o) {&#10;                return 0;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public ListIterator&lt;User&gt; listIterator() {&#10;                return null;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public ListIterator&lt;User&gt; listIterator(int index) {&#10;                return null;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public List&lt;User&gt; subList(int fromIndex, int toIndex) {&#10;                return null;&#10;            }&#10;        };&#10;    }&#10;&#10;    public void register(String name, String password) {&#10;        if (hasUser(name)) {&#10;            JOptionPane.showMessageDialog(null, &quot;This user has existed!&quot;, &quot;Register Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } else if (!isPasswordValid(password)) {&#10;            JOptionPane.showMessageDialog(null, &quot;Invalid password!&quot;, &quot;Register Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } else {&#10;&#10;        }&#10;    }&#10;&#10;    public void logIn(String name, String password) {&#10;        if (!hasUser(name)) {&#10;            JOptionPane.showMessageDialog(null, &quot;This user doesn't exist!&quot;, &quot;Log-in Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } else if () {&#10;            JOptionPane.showMessageDialog(null, &quot;Invalid password!&quot;, &quot;Log-in Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length())&#10;    }&#10;    public boolean isPasswordCorrect(String name, String password) {&#10;&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716434466247</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1716434466247</updated>
    </task>
    <option name="localTasksCounter" value="3" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="    public String getName() {&#10;        return name;&#10;    }&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;    public String getPath() {&#10;        return path;&#10;    }&#10;}" />
    <MESSAGE value="package model;&#10;&#10;import org.jetbrains.annotations.NotNull;&#10;&#10;import javax.swing.*;&#10;import java.util.*;&#10;&#10;public class UserManager {&#10;    List&lt;User&gt; userList;&#10;&#10;    public UserManager() {&#10;        List&lt;User&gt; userList = new List&lt;&gt;() {&#10;            @Override&#10;            public int size() {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public boolean isEmpty() {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean contains(Object o) {&#10;                return false;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public Iterator&lt;User&gt; iterator() {&#10;                return null;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public Object[] toArray() {&#10;                return new Object[0];&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public &lt;T&gt; T[] toArray(@NotNull T[] a) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public boolean add(User user) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean remove(Object o) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean containsAll(@NotNull Collection&lt;?&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean addAll(@NotNull Collection&lt;? extends User&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean addAll(int index, @NotNull Collection&lt;? extends User&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean removeAll(@NotNull Collection&lt;?&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean retainAll(@NotNull Collection&lt;?&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public void clear() {&#10;&#10;            }&#10;&#10;            @Override&#10;            public boolean equals(Object o) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public int hashCode() {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public User get(int index) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public User set(int index, User element) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public void add(int index, User element) {&#10;&#10;            }&#10;&#10;            @Override&#10;            public User remove(int index) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public int indexOf(Object o) {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public int lastIndexOf(Object o) {&#10;                return 0;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public ListIterator&lt;User&gt; listIterator() {&#10;                return null;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public ListIterator&lt;User&gt; listIterator(int index) {&#10;                return null;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public List&lt;User&gt; subList(int fromIndex, int toIndex) {&#10;                return null;&#10;            }&#10;        };&#10;    }&#10;&#10;    public void register(String name, String password) {&#10;        if (hasUser(name)) {&#10;            JOptionPane.showMessageDialog(null, &quot;This user has existed!&quot;, &quot;Register Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } else if (!isPasswordValid(password)) {&#10;            JOptionPane.showMessageDialog(null, &quot;Invalid password!&quot;, &quot;Register Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } else {&#10;&#10;        }&#10;    }&#10;&#10;    public void logIn(String name, String password) {&#10;        if (!hasUser(name)) {&#10;            JOptionPane.showMessageDialog(null, &quot;This user doesn't exist!&quot;, &quot;Log-in Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } else if () {&#10;            JOptionPane.showMessageDialog(null, &quot;Invalid password!&quot;, &quot;Log-in Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length())&#10;    }&#10;    public boolean isPasswordCorrect(String name, String password) {&#10;&#10;    }&#10;}" />
    <option name="LAST_COMMIT_MESSAGE" value="package model;&#10;&#10;import org.jetbrains.annotations.NotNull;&#10;&#10;import javax.swing.*;&#10;import java.util.*;&#10;&#10;public class UserManager {&#10;    List&lt;User&gt; userList;&#10;&#10;    public UserManager() {&#10;        List&lt;User&gt; userList = new List&lt;&gt;() {&#10;            @Override&#10;            public int size() {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public boolean isEmpty() {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean contains(Object o) {&#10;                return false;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public Iterator&lt;User&gt; iterator() {&#10;                return null;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public Object[] toArray() {&#10;                return new Object[0];&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public &lt;T&gt; T[] toArray(@NotNull T[] a) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public boolean add(User user) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean remove(Object o) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean containsAll(@NotNull Collection&lt;?&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean addAll(@NotNull Collection&lt;? extends User&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean addAll(int index, @NotNull Collection&lt;? extends User&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean removeAll(@NotNull Collection&lt;?&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean retainAll(@NotNull Collection&lt;?&gt; c) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public void clear() {&#10;&#10;            }&#10;&#10;            @Override&#10;            public boolean equals(Object o) {&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public int hashCode() {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public User get(int index) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public User set(int index, User element) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public void add(int index, User element) {&#10;&#10;            }&#10;&#10;            @Override&#10;            public User remove(int index) {&#10;                return null;&#10;            }&#10;&#10;            @Override&#10;            public int indexOf(Object o) {&#10;                return 0;&#10;            }&#10;&#10;            @Override&#10;            public int lastIndexOf(Object o) {&#10;                return 0;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public ListIterator&lt;User&gt; listIterator() {&#10;                return null;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public ListIterator&lt;User&gt; listIterator(int index) {&#10;                return null;&#10;            }&#10;&#10;            @NotNull&#10;            @Override&#10;            public List&lt;User&gt; subList(int fromIndex, int toIndex) {&#10;                return null;&#10;            }&#10;        };&#10;    }&#10;&#10;    public void register(String name, String password) {&#10;        if (hasUser(name)) {&#10;            JOptionPane.showMessageDialog(null, &quot;This user has existed!&quot;, &quot;Register Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } else if (!isPasswordValid(password)) {&#10;            JOptionPane.showMessageDialog(null, &quot;Invalid password!&quot;, &quot;Register Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } else {&#10;&#10;        }&#10;    }&#10;&#10;    public void logIn(String name, String password) {&#10;        if (!hasUser(name)) {&#10;            JOptionPane.showMessageDialog(null, &quot;This user doesn't exist!&quot;, &quot;Log-in Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } else if () {&#10;            JOptionPane.showMessageDialog(null, &quot;Invalid password!&quot;, &quot;Log-in Failure&quot;, JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length())&#10;    }&#10;    public boolean isPasswordCorrect(String name, String password) {&#10;&#10;    }&#10;}" />
  </component>
</project>