<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="0e72e034-aaa7-4046-b7f9-bbfb7b65012a" name="更改" comment="package model;&#10;import util.Saver;&#10;import java.io.IOException;&#10;import java.util.*;&#10;public class UserManager {&#10;    private List&lt;User&gt; userList;&#10;    private static final String savePath = &quot;src/main/resources/general&quot;;&#10;    &#10;    public UserManager() {&#10;        try {&#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        userList = new ArrayList&lt;&gt;();&#10;    }&#10;    &#10;    public User register(String name, String password) throws IOException {&#10;        User user = null;&#10;        if (hasUser(name)) { // 检查用户是否已存在&#10;            throw new IllegalArgumentException(&quot;This user has existed!&quot;);&#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&#10;            throw new IllegalArgumentException(&quot;Invalid password!&quot; + &quot;Your password should contain at least 8 characters.&quot;);&#10;        } else if (name.equals(&quot;&quot;) || password.equals(&quot;&quot;)) { // 检查用户名和密码是否为空&#10;            throw new IllegalArgumentException(&quot;Username or password cannot be empty!&quot;);&#10;        } else {&#10;            user = new User(name, password, &quot;src/main/resources/savedata/&quot; + name);&#10;            Saver.makeDir(user.getPath());&#10;            userList.add(user);&#10;            // 保存用户信息&#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &quot;/userInfo.json&quot;);&#10;&#10;        }&#10;        return user;&#10;&#10;    }&#10;    public User login(String name, String password) {&#10;        if (userList.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            for (int i = 0; i &lt; userList.size(); i++) {&#10;                if (userList.get(i).getName().equals(name)) {&#10;                    if (!isPasswordCorrect(name, password)) {&#10;                        throw new IllegalArgumentException(&quot;Incorrect password!&quot;);&#10;                    } else {&#10;                        return userList.get(i);&#10;                    }&#10;                }&#10;            }&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        }&#10;    }&#10;    public void deleteUser(User user) throws IOException {&#10;        userList.remove(user);&#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&#10;&#10;    }&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length() &gt;= 8) {&#10;            isPasswordValid = true;&#10;        }&#10;        return isPasswordValid;&#10;    }&#10;    public boolean isPasswordCorrect(String name, String password) {&#10;        boolean isPasswordCorrect = false;&#10;        int i0 = 0;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                i0 = i;&#10;                break;&#10;            }&#10;        }&#10;        if (password.equals(userList.get(i0).getPassword())) {&#10;            isPasswordCorrect = true;&#10;        }&#10;        return isPasswordCorrect;&#10;    }&#10;}">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/ai/AIThread.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ai/AIThread.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="FxmlFile" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="dev" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 6
}</component>
  <component name="ProjectId" id="2gzDgn7Z1Dbff0iGRqjibYqVjRl" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;CJKProject__202405&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;应用程序.TestMainUIApplication.executor&quot;: &quot;Run&quot;
  }
}</component>
  <component name="RunManager">
    <configuration name="TestMainUIApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="TestMainUIApplication" />
      <module name="Reach2048" />
      <option name="VM_PARAMETERS" value="--module-path &quot;C:\Program Files\Java\javafx-sdk-21.0.2\lib&quot; --add-modules javafx.controls,javafx.fxml --add-modules javafx.controls,javafx.media --add-exports javafx.graphics/com.sun.glass.utils=ALL-UNNAMED --add-exports javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="应用程序.TestMainUIApplication" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="项目级" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="默认任务">
      <changelist id="0e72e034-aaa7-4046-b7f9-bbfb7b65012a" name="更改" comment="Add move sound effect and apply custom font" />
      <created>1716691630324</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1716691630324</updated>
    </task>
    <task id="LOCAL-00001" summary="Add move sound effect a&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;                       &lt;project version=&quot;4&quot;&gt;&#10;                         &lt;component name=&quot;ExternalStorageConfigurationManager&quot; enabled=&quot;true&quot; /&gt;&#10;                         &lt;component name=&quot;MavenProjectsManager&quot;&gt;&#10;                           &lt;option name=&quot;originalFiles&quot;&gt;&#10;                             &lt;list&gt;&#10;                               &lt;option value=&quot;$PROJECT_DIR$/src/pom.xml&quot; /&gt;&#10;                               &lt;option value=&quot;$PROJECT_DIR$/pom.xml&quot; /&gt;&#10;                             &lt;/list&gt;&#10;                           &lt;/option&gt;&#10;                         &lt;/component&gt;&#10;                         &lt;component name=&quot;ProjectRootManager&quot; version=&quot;2&quot; languageLevel=&quot;JDK_17&quot; default=&quot;true&quot; project-jdk-name=&quot;21&quot; project-jdk-type=&quot;JavaSDK&quot;&gt;&#10;                           &lt;output url=&quot;file://$PROJECT_DIR$/out&quot; /&gt;&#10;                         &lt;/component&gt;&#10;                       &lt;/project&gt;nd apply custom font">
      <option name="closed" value="true" />
      <created>1716822634114</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1716822634114</updated>
    </task>
    <task id="LOCAL-00002" summary="package controller;&#10;&#10;public class RegistrationAndLogInUI {&#10;    // 注册与登录界面，当输入的用户名和密码不合法时，弹出窗口&#10;}">
      <option name="closed" value="true" />
      <created>1716822661645</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1716822661645</updated>
    </task>
    <task id="LOCAL-00003" summary="package model;&#10;public class User {&#10;    private String name;&#10;    private String password;&#10;    private String path;&#10;    private int bestScore;&#10;    private int totalGames;&#10;    private int totalWins;&#10;    private int totalLoses;&#10;    &#10;    public User (String name, String password, String path) {&#10;        this.name = name;&#10;        this.password = password;&#10;        this.path = path;&#10;        this.bestScore = 0;&#10;        this.totalGames = 0;&#10;        this.totalWins = 0;&#10;        this.totalLoses = 0;&#10;    }&#10;    &#10;    public String getName() {&#10;        return name;&#10;    }&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;    public String getPath() {&#10;        return path;&#10;    }&#10;    public int getBestScore() {&#10;        return bestScore;&#10;    }&#10;    public void setBestScore(int bestScore) {&#10;        this.bestScore = bestScore;&#10;    }&#10;    public int getTotalGames() {&#10;        return totalGames;&#10;    }&#10;    public void setTotalGames(int totalGames) {&#10;        this.totalGames = totalGames;&#10;    }&#10;    public int getTotalWins() {&#10;        return totalWins;&#10;    }&#10;    public void setTotalWins(int totalWins) {&#10;        this.totalWins = totalWins;&#10;    }&#10;    public int getTotalLoses() {&#10;        return totalLoses;&#10;    }&#10;    public void setTotalLoses(int totalLoses) {&#10;        this.totalLoses = totalLoses;&#10;    }&#10;    public void refreshInfo(int bestScore, int totalGames, int totalWins, int totalLoses) {&#10;        this.bestScore = bestScore;&#10;        this.totalGames = totalGames;&#10;        this.totalWins = totalWins;&#10;        this.totalLoses = totalLoses;&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716823036071</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1716823036071</updated>
    </task>
    <task id="LOCAL-00004" summary="package model;&#10;import util.Saver;&#10;import java.io.IOException;&#10;import java.util.*;&#10;public class UserManager {&#10;    private List&lt;User&gt; userList;&#10;    private static final String savePath = &quot;src/main/resources/general&quot;;&#10;    &#10;    public UserManager() {&#10;        try {&#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        userList = new ArrayList&lt;&gt;();&#10;    }&#10;    &#10;    public User register(String name, String password) throws IOException {&#10;        User user = null;&#10;        if (hasUser(name)) { // 检查用户是否已存在&#10;            throw new IllegalArgumentException(&quot;This user has existed!&quot;);&#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&#10;            throw new IllegalArgumentException(&quot;Invalid password!&quot; + &quot;Your password should contain at least 8 characters.&quot;);&#10;        } else if (name.equals(&quot;&quot;) || password.equals(&quot;&quot;)) { // 检查用户名和密码是否为空&#10;            throw new IllegalArgumentException(&quot;Username or password cannot be empty!&quot;);&#10;        } else {&#10;            user = new User(name, password, &quot;src/main/resources/savedata/&quot; + name);&#10;            Saver.makeDir(user.getPath());&#10;            userList.add(user);&#10;            // 保存用户信息&#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &quot;/userInfo.json&quot;);&#10;&#10;        }&#10;        return user;&#10;&#10;    }&#10;    public User login(String name, String password) {&#10;        if (userList.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            for (int i = 0; i &lt; userList.size(); i++) {&#10;                if (userList.get(i).getName().equals(name)) {&#10;                    if (!isPasswordCorrect(name, password)) {&#10;                        throw new IllegalArgumentException(&quot;Incorrect password!&quot;);&#10;                    } else {&#10;                        return userList.get(i);&#10;                    }&#10;                }&#10;            }&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        }&#10;    }&#10;    public void deleteUser(User user) throws IOException {&#10;        userList.remove(user);&#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&#10;&#10;    }&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length() &gt;= 8) {&#10;            isPasswordValid = true;&#10;        }&#10;        return isPasswordValid;&#10;    }&#10;    public boolean isPasswordCorrect(String name, String password) {&#10;        boolean isPasswordCorrect = false;&#10;        int i0 = 0;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                i0 = i;&#10;                break;&#10;            }&#10;        }&#10;        if (password.equals(userList.get(i0).getPassword())) {&#10;            isPasswordCorrect = true;&#10;        }&#10;        return isPasswordCorrect;&#10;    }&#10;}">
      <option name="closed" value="true" />
      <created>1716823985794</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1716823985794</updated>
    </task>
    <option name="localTasksCounter" value="5" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Add move sound effect and apply custom font" />
    <MESSAGE value="Add move sound effect a&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;                       &lt;project version=&quot;4&quot;&gt;&#10;                         &lt;component name=&quot;ExternalStorageConfigurationManager&quot; enabled=&quot;true&quot; /&gt;&#10;                         &lt;component name=&quot;MavenProjectsManager&quot;&gt;&#10;                           &lt;option name=&quot;originalFiles&quot;&gt;&#10;                             &lt;list&gt;&#10;                               &lt;option value=&quot;$PROJECT_DIR$/src/pom.xml&quot; /&gt;&#10;                               &lt;option value=&quot;$PROJECT_DIR$/pom.xml&quot; /&gt;&#10;                             &lt;/list&gt;&#10;                           &lt;/option&gt;&#10;                         &lt;/component&gt;&#10;                         &lt;component name=&quot;ProjectRootManager&quot; version=&quot;2&quot; languageLevel=&quot;JDK_17&quot; default=&quot;true&quot; project-jdk-name=&quot;21&quot; project-jdk-type=&quot;JavaSDK&quot;&gt;&#10;                           &lt;output url=&quot;file://$PROJECT_DIR$/out&quot; /&gt;&#10;                         &lt;/component&gt;&#10;                       &lt;/project&gt;nd apply custom font" />
    <MESSAGE value="package controller;&#10;&#10;public class RegistrationAndLogInUI {&#10;    // 注册与登录界面，当输入的用户名和密码不合法时，弹出窗口&#10;}" />
    <MESSAGE value="package model;&#10;public class User {&#10;    private String name;&#10;    private String password;&#10;    private String path;&#10;    private int bestScore;&#10;    private int totalGames;&#10;    private int totalWins;&#10;    private int totalLoses;&#10;    &#10;    public User (String name, String password, String path) {&#10;        this.name = name;&#10;        this.password = password;&#10;        this.path = path;&#10;        this.bestScore = 0;&#10;        this.totalGames = 0;&#10;        this.totalWins = 0;&#10;        this.totalLoses = 0;&#10;    }&#10;    &#10;    public String getName() {&#10;        return name;&#10;    }&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;    public String getPath() {&#10;        return path;&#10;    }&#10;    public int getBestScore() {&#10;        return bestScore;&#10;    }&#10;    public void setBestScore(int bestScore) {&#10;        this.bestScore = bestScore;&#10;    }&#10;    public int getTotalGames() {&#10;        return totalGames;&#10;    }&#10;    public void setTotalGames(int totalGames) {&#10;        this.totalGames = totalGames;&#10;    }&#10;    public int getTotalWins() {&#10;        return totalWins;&#10;    }&#10;    public void setTotalWins(int totalWins) {&#10;        this.totalWins = totalWins;&#10;    }&#10;    public int getTotalLoses() {&#10;        return totalLoses;&#10;    }&#10;    public void setTotalLoses(int totalLoses) {&#10;        this.totalLoses = totalLoses;&#10;    }&#10;    public void refreshInfo(int bestScore, int totalGames, int totalWins, int totalLoses) {&#10;        this.bestScore = bestScore;&#10;        this.totalGames = totalGames;&#10;        this.totalWins = totalWins;&#10;        this.totalLoses = totalLoses;&#10;    }&#10;}" />
    <MESSAGE value="package model;&#10;import util.Saver;&#10;import java.io.IOException;&#10;import java.util.*;&#10;public class UserManager {&#10;    private List&lt;User&gt; userList;&#10;    private static final String savePath = &quot;src/main/resources/general&quot;;&#10;    &#10;    public UserManager() {&#10;        try {&#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        userList = new ArrayList&lt;&gt;();&#10;    }&#10;    &#10;    public User register(String name, String password) throws IOException {&#10;        User user = null;&#10;        if (hasUser(name)) { // 检查用户是否已存在&#10;            throw new IllegalArgumentException(&quot;This user has existed!&quot;);&#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&#10;            throw new IllegalArgumentException(&quot;Invalid password!&quot; + &quot;Your password should contain at least 8 characters.&quot;);&#10;        } else if (name.equals(&quot;&quot;) || password.equals(&quot;&quot;)) { // 检查用户名和密码是否为空&#10;            throw new IllegalArgumentException(&quot;Username or password cannot be empty!&quot;);&#10;        } else {&#10;            user = new User(name, password, &quot;src/main/resources/savedata/&quot; + name);&#10;            Saver.makeDir(user.getPath());&#10;            userList.add(user);&#10;            // 保存用户信息&#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &quot;/userInfo.json&quot;);&#10;&#10;        }&#10;        return user;&#10;&#10;    }&#10;    public User login(String name, String password) {&#10;        if (userList.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            for (int i = 0; i &lt; userList.size(); i++) {&#10;                if (userList.get(i).getName().equals(name)) {&#10;                    if (!isPasswordCorrect(name, password)) {&#10;                        throw new IllegalArgumentException(&quot;Incorrect password!&quot;);&#10;                    } else {&#10;                        return userList.get(i);&#10;                    }&#10;                }&#10;            }&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        }&#10;    }&#10;    public void deleteUser(User user) throws IOException {&#10;        userList.remove(user);&#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&#10;&#10;    }&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length() &gt;= 8) {&#10;            isPasswordValid = true;&#10;        }&#10;        return isPasswordValid;&#10;    }&#10;    public boolean isPasswordCorrect(String name, String password) {&#10;        boolean isPasswordCorrect = false;&#10;        int i0 = 0;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                i0 = i;&#10;                break;&#10;            }&#10;        }&#10;        if (password.equals(userList.get(i0).getPassword())) {&#10;            isPasswordCorrect = true;&#10;        }&#10;        return isPasswordCorrect;&#10;    }&#10;}" />
    <option name="LAST_COMMIT_MESSAGE" value="package model;&#10;import util.Saver;&#10;import java.io.IOException;&#10;import java.util.*;&#10;public class UserManager {&#10;    private List&lt;User&gt; userList;&#10;    private static final String savePath = &quot;src/main/resources/general&quot;;&#10;    &#10;    public UserManager() {&#10;        try {&#10;            Saver.makeDir(savePath); // 创建存储用户信息的文件夹&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        userList = new ArrayList&lt;&gt;();&#10;    }&#10;    &#10;    public User register(String name, String password) throws IOException {&#10;        User user = null;&#10;        if (hasUser(name)) { // 检查用户是否已存在&#10;            throw new IllegalArgumentException(&quot;This user has existed!&quot;);&#10;        } else if (!isPasswordValid(password)) { // 检查密码是否有效&#10;            throw new IllegalArgumentException(&quot;Invalid password!&quot; + &quot;Your password should contain at least 8 characters.&quot;);&#10;        } else if (name.equals(&quot;&quot;) || password.equals(&quot;&quot;)) { // 检查用户名和密码是否为空&#10;            throw new IllegalArgumentException(&quot;Username or password cannot be empty!&quot;);&#10;        } else {&#10;            user = new User(name, password, &quot;src/main/resources/savedata/&quot; + name);&#10;            Saver.makeDir(user.getPath());&#10;            userList.add(user);&#10;            // 保存用户信息&#10;            Saver.saveToJson(Saver.buildGson(this), savePath + &quot;/userInfo.json&quot;);&#10;&#10;        }&#10;        return user;&#10;&#10;    }&#10;    public User login(String name, String password) {&#10;        if (userList.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            for (int i = 0; i &lt; userList.size(); i++) {&#10;                if (userList.get(i).getName().equals(name)) {&#10;                    if (!isPasswordCorrect(name, password)) {&#10;                        throw new IllegalArgumentException(&quot;Incorrect password!&quot;);&#10;                    } else {&#10;                        return userList.get(i);&#10;                    }&#10;                }&#10;            }&#10;            throw new IllegalArgumentException(&quot;This user doesn't exist!&quot;);&#10;        }&#10;    }&#10;    public void deleteUser(User user) throws IOException {&#10;        userList.remove(user);&#10;        Saver.saveToJson(Saver.buildGson(this), savePath);&#10;&#10;    }&#10;    public boolean hasUser(String name) {&#10;        boolean hasUser = false;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                hasUser = true;&#10;                break;&#10;            }&#10;        }&#10;        return hasUser;&#10;    }&#10;    public boolean isPasswordValid(String password) {&#10;        boolean isPasswordValid = false;&#10;        if (password.length() &gt;= 8) {&#10;            isPasswordValid = true;&#10;        }&#10;        return isPasswordValid;&#10;    }&#10;    public boolean isPasswordCorrect(String name, String password) {&#10;        boolean isPasswordCorrect = false;&#10;        int i0 = 0;&#10;        for (int i = 0; i &lt; userList.size(); i++) {&#10;            if (userList.get(i).getName().equals(name)) {&#10;                i0 = i;&#10;                break;&#10;            }&#10;        }&#10;        if (password.equals(userList.get(i0).getPassword())) {&#10;            isPasswordCorrect = true;&#10;        }&#10;        return isPasswordCorrect;&#10;    }&#10;}" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/util/Saver.java</url>
          <line>34</line>
          <option name="timeStamp" value="42" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-method">
          <url>file://$PROJECT_DIR$/src/main/java/controller/MainUI.java</url>
          <line>61</line>
          <properties class="controller.MainUI">
            <option name="EMULATED" value="true" />
            <option name="WATCH_EXIT" value="false" />
          </properties>
          <option name="timeStamp" value="47" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-method">
          <url>file://$PROJECT_DIR$/src/main/java/util/Timer.java</url>
          <line>25</line>
          <properties class="util.Timer">
            <option name="EMULATED" value="true" />
            <option name="WATCH_EXIT" value="false" />
          </properties>
          <option name="timeStamp" value="51" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
    <watches-manager>
      <configuration name="Application">
        <watch expression="Saver.makeDir(savePath)" language="JAVA" />
      </configuration>
    </watches-manager>
  </component>
</project>